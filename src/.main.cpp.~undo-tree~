(undo-tree-save-format-version . 1)
"860454aad89bad8fd1e7d7d83892f07ab6f2a6c4"
[nil nil nil nil (26353 1693 424209 669000) 0 nil]
([nil nil ((#("milliseconds" 0 12 (fontified t)) . 763) (undo-tree-id68 . -11) (t 26352 20458 961284 302000)) nil (26353 1693 424208 323000) 0 nil])
([nil nil ((30 . 48) (763 . 763) (763 . 775) (#("mi" 0 2 (fontified nil)) . 763) (763 . 765) (#("microseconds" 0 12 (fontified nil)) . -763) (undo-tree-id2 . -12) (763 . 775) (#("micro" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -763) (undo-tree-id3 . -5) (undo-tree-id4 . -5) (undo-tree-id5 . -5) (undo-tree-id6 . -5) (undo-tree-id7 . -5) (undo-tree-id8 . -5) (undo-tree-id9 . -5) (undo-tree-id10 . -5) (undo-tree-id11 . -5) (undo-tree-id12 . -5) (undo-tree-id13 . -5) (undo-tree-id14 . -5) (undo-tree-id15 . -5) (undo-tree-id16 . -5) (undo-tree-id17 . -5) (undo-tree-id18 . -5) (undo-tree-id19 . -5) (undo-tree-id20 . -5) (undo-tree-id21 . -5) (undo-tree-id22 . -5) (undo-tree-id23 . -5) (undo-tree-id24 . -5) (undo-tree-id25 . -5) (undo-tree-id26 . -5) (undo-tree-id27 . -5) (undo-tree-id28 . -5) (undo-tree-id29 . -5) (undo-tree-id30 . -5) (undo-tree-id31 . -5) (undo-tree-id32 . -5) (undo-tree-id33 . -5) (undo-tree-id34 . -5) (undo-tree-id35 . -5) (undo-tree-id36 . -5) (undo-tree-id37 . -5) (undo-tree-id38 . -5) (undo-tree-id39 . -5) (undo-tree-id40 . -5) (undo-tree-id41 . -5) (undo-tree-id42 . -5) (undo-tree-id43 . -5) (undo-tree-id44 . -5) (undo-tree-id45 . -5) (undo-tree-id46 . -5) (undo-tree-id47 . -5) (undo-tree-id48 . -5) (undo-tree-id49 . -5) (undo-tree-id50 . -5) (undo-tree-id51 . -5) (undo-tree-id52 . -5) (undo-tree-id53 . -5) (undo-tree-id54 . -5) (undo-tree-id55 . -5) (undo-tree-id56 . -5) (undo-tree-id57 . -5) (undo-tree-id58 . -5) (undo-tree-id59 . -5) (undo-tree-id60 . -5) (undo-tree-id61 . -5) (undo-tree-id62 . -5) (undo-tree-id63 . -5) (undo-tree-id64 . -5) (undo-tree-id65 . -5) (undo-tree-id66 . -5) (undo-tree-id67 . -5) 768 (767 . 768) (763 . 767)) nil (26353 1693 424206 365000) 0 nil])
([nil nil ((794 . 797) (#("1" 0 1 (fontified t)) . -794) (undo-tree-id1 . -1) 795) nil (26353 1693 424175 235000) 0 nil])
([nil nil ((796 . 797) (#("0" 0 1 (fontified t)) . -796) (undo-tree-id0 . -1) 797) nil (26353 1693 424170 938000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . 794) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (t 26353 1693 463869 366000)) nil (26353 2158 897758 793000) 0 nil])
([nil nil ((794 . 795)) nil (26353 2158 897746 181000) 0 nil])
([nil nil ((551 . 552) (542 . 551) (538 . 542) (t 26353 2158 935726 279000)) nil (26353 2231 904961 829000) 0 nil])
([nil nil ((542 . 546)) nil (26353 2231 904956 503000) 0 nil])
([nil nil ((1286 . 1287) (1284 . 1286) (#(" " 0 1 (fontified t)) . -1284) (undo-tree-id71 . -1) (undo-tree-id72 . -1) 1285 (1282 . 1285) (1281 . 1282) (1279 . 1281) (1272 . 1279) (t 26353 2231 942533 232000)) nil (26353 2246 259834 900000) 0 nil])
([nil nil ((#("      std::cout << \"Sending This Stupid Message \\n\";
" 0 6 (fontified t c-is-sws t c-in-sws t) 6 7 (face font-lock-constant-face fontified t c-is-sws t) 7 9 (face font-lock-constant-face fontified t) 9 19 (fontified t) 19 51 (face font-lock-string-face fontified t) 51 52 (fontified t) 52 53 (fontified t)) . 1289) (undo-tree-id77 . -52) (undo-tree-id78 . -13) 1302 (t 26353 2246 297867 765000)) nil (26353 2252 32962 607000) 0 nil])
([nil nil ((#("      //RCLCPP_INFO(this->get_logger(), \"Publishing : data from serial\");
" 0 1 (c-in-sws t fontified t) 1 6 (fontified t c-in-sws t) 6 7 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 7 8 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 8 73 (face font-lock-comment-face fontified t c-in-sws t) 73 74 (c-in-sws t face font-lock-comment-face fontified t)) . 1199) (undo-tree-id75 . -73) (undo-tree-id76 . -13) 1212) nil (26353 2252 32960 773000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1220 . 1221) (#("
" 0 1 (fontified nil c-in-sws t face font-lock-comment-face)) . -1288) (1214 . 1289)) nil (26353 2252 32959 358000) 0 nil])
([nil nil ((#("//" 0 1 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 1 2 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 1221) (undo-tree-id74 . -1)) nil (26353 2252 32958 585000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -1287) (undo-tree-id73 . -6) 1293 (1286 . 1293)) nil (26353 2252 32954 727000) 0 nil])
([nil nil ((#("Publishing " 0 11 (face font-lock-string-face fontified t)) . 1254) (undo-tree-id177 . -10) (t 26353 2252 70000 470000)) nil (26353 2287 915521 41000) 0 nil])
([nil nil ((#(": " 0 2 (face font-lock-string-face fontified t)) . 1254) (undo-tree-id176 . -1)) nil (26353 2287 915520 189000) 0 nil])
([nil nil ((#("data " 0 5 (face font-lock-string-face fontified t)) . 1254) (undo-tree-id175 . -4)) nil (26353 2287 915518 846000) 0 nil])
([nil nil ((#("from " 0 5 (face font-lock-string-face fontified t)) . 1254) (undo-tree-id174 . -4)) nil (26353 2287 915517 975000) 0 nil])
([nil nil ((#("serial" 0 6 (face font-lock-string-face fontified t)) . 1254) (undo-tree-id173 . -5)) nil (26353 2287 915516 639000) 0 nil])
([nil nil ((1229 . 1237) (1224 . 1229) (#("time" 0 4 (fontified nil)) . 1224) (1224 . 1228) (#("times" 0 5 (fontified nil)) . -1224) (undo-tree-id170 . -5) (1224 . 1229) (#("time" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -1224) (undo-tree-id171 . -4) (undo-tree-id172 . -4) 1228 (1227 . 1228) (1224 . 1227) (1223 . 1225) (1220 . 1223) (1214 . 1220)) nil (26353 2287 915515 112000) 0 nil])
([nil nil ((1240 . 1241) (1239 . 1247) (1238 . 1240)) nil (26353 2287 915512 244000) 0 nil])
([nil nil ((#("      RCLCPP_INFO(this->get_logger(), \"\");
" 0 1 (fontified t c-is-sws t c-in-sws t) 1 5 (fontified t c-is-sws t c-in-sws t) 5 6 (fontified t rear-nonsticky t) 6 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-4-face) fontified t) 18 22 (face font-lock-keyword-face fontified t) 22 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-5-face) fontified t) 35 36 (face (rainbow-delimiters-depth-5-face) fontified t) 36 37 (fontified t) 37 38 (fontified t) 38 39 (face font-lock-string-face fontified t) 39 40 (face font-lock-string-face fontified t) 40 41 (face (rainbow-delimiters-depth-4-face) fontified t) 41 42 (fontified t) 42 43 (fontified t)) . 1250) (undo-tree-id169 . -42)) nil (26353 2287 915511 646000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -1284) (1241 . 1285) 1240) nil (26353 2287 915510 789000) 0 nil])
([nil nil ((1242 . 1243) (#("      " 0 1 (fontified t) 1 5 (fontified t) 5 6 (fontified t rear-nonsticky t)) . -1242) (undo-tree-id168 . -6) 1248) nil (26353 2287 915510 302000) 0 nil])
([nil nil ((1240 . 1241) (#("	" 0 1 (fontified t)) . 1240)) nil (26353 2287 915509 503000) 0 nil])
([nil nil ((1247 . 1250) (1243 . 1247) (1241 . 1243) (1240 . 1241) (#("	" 0 1 (fontified t)) . 1240)) nil (26353 2287 915508 460000) 0 nil])
([nil nil ((1250 . 1251)) nil (26353 2287 915507 995000) 0 nil])
([nil nil ((1294 . 1304) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1294) (undo-tree-id167 . -1) 1295 (1286 . 1295)) nil (26353 2287 915507 179000) 0 nil])
([nil nil ((1307 . 1308)) nil (26353 2287 915506 239000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1307) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) 1308) nil (26353 2287 915502 376000) 0 nil])
([nil nil ((1234 . 1235) (t 26353 2287 953803 0)) nil (26353 2403 45218 637000) 0 nil])
([nil nil ((1295 . 1296)) nil (26353 2403 45213 238000) 0 nil])
([nil nil ((916 . 917) (#("	" 0 1 (fontified nil)) . 915) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (915 . 917) (#(" " 0 1 (fontified nil)) . 914) (undo-tree-id179 . -1) (915 . 916) (t 26353 2403 82141 634000)) nil (26354 30896 102832 384000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 915)) nil (26354 30896 102825 292000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -914) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) 915) nil (26354 30896 102823 674000) 0 nil])
([nil nil ((887 . 893) (#("      " 0 6 (fontified nil)) . 886) (undo-tree-id171 . -6) (undo-tree-id172 . -6) (892 . 893) (886 . 892)) nil (26354 30896 102817 97000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 899 909 nil nil nil nil #s(yas--field 2 925 936 nil nil nil nil #s(yas--exit 941 nil))) #s(yas--field 2 925 936 nil nil nil nil #s(yas--exit 941 nil))) #s(yas--exit 941 nil) 3 nil #s(yas--field 1 899 909 nil nil nil nil #s(yas--field 2 925 936 nil nil nil nil #s(yas--exit 941 nil))) nil nil)) (892 . 946) (#("try {
	${1:statements}
      } catch (${2:declaration}) {
	$0
	  }" 0 66 (fontified nil)) . 892) (954 . 957) (950 . 951) (915 . 921) (898 . 899) (892 . 947) (#("try" 0 3 (fontified nil)) . 892) (892 . 895) (#("try {statements} catch (declaration) {statements}" 0 49 (fontified nil)) . -892) (undo-tree-id168 . -49) (892 . 941) (#("try" 0 1 (face font-lock-keyword-face fontified t) 1 2 (face font-lock-keyword-face fontified t) 2 3 (face font-lock-keyword-face fontified t)) . -892) (undo-tree-id169 . -3) (undo-tree-id170 . -3) 895 (892 . 895) (886 . 892)) nil (26354 30896 102811 151000) 0 nil])
([nil nil ((apply yas--snippet-revive 892 946 #s(yas--snippet nil (#s(yas--field 1 899 909 nil nil nil nil #s(yas--field 2 925 936 nil nil nil nil #s(yas--exit 941 nil))) #s(yas--field 2 925 936 nil nil nil nil #s(yas--exit 941 nil))) #s(yas--exit 941 nil) 3 nil #s(yas--field 1 899 909 nil nil nil nil #s(yas--field 2 925 936 nil nil nil nil #s(yas--exit 941 nil))) nil nil))) nil (26354 30896 102802 393000) 0 nil])
([nil nil ((#("statements" 0 10 (fontified t)) . 899) (undo-tree-id166 . 10) (undo-tree-id167 . -9)) nil (26354 30896 102800 742000) 0 nil])
([nil nil ((#("CommunicationData c" 0 16 (face font-lock-type-face fontified t) 16 17 (face font-lock-type-face c-type c-decl-id-start fontified t) 17 18 (fontified t) 18 19 (face font-lock-variable-name-face fontified t)) . 950) (undo-tree-id163 . -18) (undo-tree-id164 . -18) (undo-tree-id165 . -18)) nil (26354 30896 102794 902000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -886) (undo-tree-id161 . -6) (undo-tree-id162 . -6) 892 (885 . 892)) nil (26354 30896 102788 807000) 0 nil])
([nil nil ((nil rear-nonsticky nil 904 . 905) (nil fontified nil 886 . 905) (886 . 905)) nil (26354 30896 102784 116000) 0 nil])
([nil nil ((886 . 892) 904) nil (26354 30896 102782 297000) 0 nil])
([nil nil ((#("       =	s.get_data();
" 0 6 (fontified t) 6 8 (fontified t) 8 9 (fontified t) 9 19 (fontified t) 19 20 (face (rainbow-delimiters-depth-4-face) fontified t) 20 21 (face (rainbow-delimiters-depth-4-face) fontified t) 21 22 (fontified t) 22 23 (fontified t)) . 970) (undo-tree-id153 . -6) (undo-tree-id154 . 17) (undo-tree-id155 . -6) (undo-tree-id156 . -6) (undo-tree-id157 . -22) (undo-tree-id158 . -6) (undo-tree-id159 . -17) (undo-tree-id160 . -17) 987) nil (26354 30896 102779 511000) 0 nil])
([nil nil ((925 . 929) (924 . 925) (#("	" 0 1 (fontified t)) . 924)) nil (26354 30896 102761 355000) 0 nil])
([nil nil ((nil rear-nonsticky nil 936 . 937) (#("
" 0 1 (fontified nil)) . -952) (929 . 953) 928) nil (26354 30896 102757 854000) 0 nil])
([nil nil ((#("=" 0 1 (fontified nil)) . -927) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (#(" " 0 1 (fontified t)) . -928) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (#("
" 0 1 (fontified t)) . -929) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (#(" " 0 1 (fontified t)) . -930) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (#(" " 0 1 (fontified t)) . -931) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (#(" " 0 1 (fontified t)) . -932) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (#(" " 0 1 (fontified t)) . -933) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (#(" " 0 1 (fontified t)) . -934) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (#(" " 0 1 (fontified t)) . -935) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (#(" " 0 1 (rear-nonsticky t fontified t)) . -936) (undo-tree-id151 . -1) (undo-tree-id152 . -1) 937) nil (26354 30896 102748 944000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -981) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (#(" " 0 1 (fontified nil)) . -982) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (#("	" 0 1 (fontified nil)) . 983) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (975 . 983) 976 (#(" " 0 1 (fontified t)) . -976) (undo-tree-id129 . -1) 977) nil (26354 30896 102670 203000) 0 nil])
([nil nil ((#("declaration" 0 11 (fontified t)) . 958) (undo-tree-id122 . -10)) nil (26354 30896 102645 759000) 0 nil])
([nil nil ((958 . 961)) nil (26354 30896 102641 354000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -976) (undo-tree-id120 . -6) (undo-tree-id121 . -6) 982 (975 . 982)) nil (26354 30896 102637 598000) 0 nil])
([nil nil ((967 . 973) (#("       " 0 6 (fontified t) 6 7 (fontified t)) . -967) (undo-tree-id119 . -7) 974) nil (26354 30896 102628 529000) 0 nil])
([nil nil ((#("auto " 0 3 (face font-lock-keyword-face fontified t) 3 4 (c-type c-decl-id-start face font-lock-keyword-face fontified t) 4 5 (fontified t)) . 990) (undo-tree-id75 . -4) (undo-tree-id76 . -5) (undo-tree-id77 . -5) (undo-tree-id78 . -5) (undo-tree-id79 . -5) (undo-tree-id80 . -5) (undo-tree-id81 . -5) (undo-tree-id82 . -5) (undo-tree-id83 . -5) (undo-tree-id84 . -5) (undo-tree-id85 . -5) (undo-tree-id86 . -5) (undo-tree-id87 . -5) (undo-tree-id88 . -5) (undo-tree-id89 . -5) (undo-tree-id90 . -5) (undo-tree-id91 . -5) (undo-tree-id92 . -5) (undo-tree-id93 . -5) (undo-tree-id94 . -5) (undo-tree-id95 . -5) (undo-tree-id96 . -5) (undo-tree-id97 . -5) (undo-tree-id98 . -5) (undo-tree-id99 . -5) (undo-tree-id100 . -5) (undo-tree-id101 . -5) (undo-tree-id102 . -5) (undo-tree-id103 . -5) (undo-tree-id104 . -5) (undo-tree-id105 . -5) (undo-tree-id106 . -5) (undo-tree-id107 . -5) (undo-tree-id108 . -5) (undo-tree-id109 . -5) (undo-tree-id110 . -5) (undo-tree-id111 . -5) (undo-tree-id112 . -5) (undo-tree-id113 . -5) (undo-tree-id114 . -5) (undo-tree-id115 . -5) (undo-tree-id116 . -5) (undo-tree-id117 . -5) (undo-tree-id118 . -5)) nil (26354 30896 102601 839000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1035) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) 1036 (1035 . 1036) (1028 . 1035) 990) nil (26354 30896 101635 517000) 0 nil])
([nil nil ((993 . 994) (991 . 993) (990 . 991)) nil (26354 30896 101547 962000) 0 nil])
([nil nil ((1010 . 1015) (1008 . 1010) (1005 . 1008) (984 . 990) (#("    " 0 4 (fontified nil)) . 984) (1002 . 1003) (984 . 988) (#("      " 0 6 (fontified nil)) . 984) (undo-tree-id0 . -6) (undo-tree-id1 . -6) (undo-tree-id2 . -6) (undo-tree-id3 . -6) (undo-tree-id4 . -6) (undo-tree-id5 . -6) (undo-tree-id6 . -6) (undo-tree-id7 . -6) (undo-tree-id8 . -6) (undo-tree-id9 . -6) (undo-tree-id10 . -6) (undo-tree-id11 . -6) (undo-tree-id12 . -6) (undo-tree-id13 . -6) (undo-tree-id14 . -6) (undo-tree-id15 . -6) (undo-tree-id16 . -6) (undo-tree-id17 . -6) (undo-tree-id18 . -6) (undo-tree-id19 . -6) (undo-tree-id20 . -6) (undo-tree-id21 . -6) (undo-tree-id22 . -6) (undo-tree-id23 . -6) (undo-tree-id24 . -6) (undo-tree-id25 . -6) (undo-tree-id26 . -6) (undo-tree-id27 . -6) (undo-tree-id28 . -6) (undo-tree-id29 . -6) (undo-tree-id30 . -6) (undo-tree-id31 . -6) (undo-tree-id32 . -6) (undo-tree-id33 . -6) (undo-tree-id34 . -6) (undo-tree-id35 . -6) (undo-tree-id36 . -6) (undo-tree-id37 . -6) (undo-tree-id38 . -6) (undo-tree-id39 . -6) (undo-tree-id40 . -6) (undo-tree-id41 . -6) (undo-tree-id42 . -6) (1003 . 1004) (999 . 1003) (991 . 999) (#("e" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -991) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#("o" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -992) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#("m" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -993) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (#("e" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -994) (undo-tree-id49 . -1) (undo-tree-id50 . -1) 995 (993 . 995) (#("m" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -993) (undo-tree-id51 . -1) (undo-tree-id52 . -1) 994 (993 . 994)) nil (26354 30896 101520 312000) 0 nil])
([nil nil ((974 . 979) (#("-" 0 1 (fontified t)) . -974) (undo-tree-id180 . -1) (undo-tree-id181 . -1) 975 (970 . 975) (969 . 971) (966 . 969) (965 . 966) (#("	" 0 1 (fontified t)) . 965) (t 26354 30896 145703 627000)) nil (26354 30982 16214 733000) 0 nil])
([nil nil ((975 . 976)) nil (26354 30982 22253 612000) 0 nil])
([nil nil ((#("SerialBridge " 0 11 (face font-lock-type-face fontified t) 11 12 (face font-lock-type-face c-type c-decl-id-start fontified t) 12 13 (fontified t)) . 1470) (undo-tree-id298 . -12) (undo-tree-id299 . -13) (t 26357 35423 559015 751000)) nil (26361 6679 112664 492000) 0 nil] [nil nil ((283 . 283) (283 . 284)) ((#("
" 0 1 (c-in-sws t fontified t)) . 283) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1)) (26354 30982 16176 536000) 0 nil])
([nil nil ((1481 . 1482) (1470 . 1481) (#("Br" 0 2 (fontified nil)) . 1470) (1470 . 1472) (#("BridgeClass" 0 11 (fontified nil)) . -1470) (undo-tree-id0 . -11) (1470 . 1481) (#("Brid" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -1470) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -2) (undo-tree-id32 . -2) (undo-tree-id33 . -2) (undo-tree-id34 . -2) (undo-tree-id35 . -2) (undo-tree-id36 . -2) (undo-tree-id37 . -2) (undo-tree-id38 . -2) (undo-tree-id39 . -2) (undo-tree-id40 . -2) (undo-tree-id41 . -2) (undo-tree-id42 . -2) (undo-tree-id43 . -2) (undo-tree-id44 . -2) (undo-tree-id45 . -2) (undo-tree-id46 . -2) (undo-tree-id47 . -2) (undo-tree-id48 . -2) (undo-tree-id49 . -2) (undo-tree-id50 . -2) (undo-tree-id51 . -2) (undo-tree-id52 . -2) (undo-tree-id53 . -2) (undo-tree-id54 . -2) (undo-tree-id55 . -2) (undo-tree-id56 . -2) (undo-tree-id57 . -2) (undo-tree-id58 . -2) (undo-tree-id59 . -2) (undo-tree-id60 . -2) (undo-tree-id61 . -2) (undo-tree-id62 . -2) (undo-tree-id63 . -2) (undo-tree-id64 . -2) (undo-tree-id65 . -2) (undo-tree-id66 . -2) (undo-tree-id67 . -2) (undo-tree-id68 . -2) (undo-tree-id69 . -2) (undo-tree-id70 . -2) (undo-tree-id71 . -2) (undo-tree-id72 . -2) (undo-tree-id73 . -2) (undo-tree-id74 . -2) (undo-tree-id75 . -2) (undo-tree-id76 . -2) (undo-tree-id77 . -2) (undo-tree-id78 . -2) (undo-tree-id79 . -2) (undo-tree-id80 . -2) (undo-tree-id81 . -2) (undo-tree-id82 . -2) (undo-tree-id83 . -2) (undo-tree-id84 . -2) (undo-tree-id85 . -2) (undo-tree-id86 . -2) (undo-tree-id87 . -2) (undo-tree-id88 . -2) (undo-tree-id89 . -2) (undo-tree-id90 . -2) (undo-tree-id91 . -2) (undo-tree-id92 . -2) (undo-tree-id93 . -2) (undo-tree-id94 . -2) (undo-tree-id95 . -2) (undo-tree-id96 . -2) (undo-tree-id97 . -2) (undo-tree-id98 . -2) (undo-tree-id99 . -2) (undo-tree-id100 . -2) (undo-tree-id101 . -2) (undo-tree-id102 . -3) (undo-tree-id103 . -3) (undo-tree-id104 . -3) (undo-tree-id105 . -3) (undo-tree-id106 . -3) (undo-tree-id107 . -3) (undo-tree-id108 . -3) (undo-tree-id109 . -3) (undo-tree-id110 . -3) (undo-tree-id111 . -3) (undo-tree-id112 . -3) (undo-tree-id113 . -3) (undo-tree-id114 . -3) (undo-tree-id115 . -3) (undo-tree-id116 . -3) (undo-tree-id117 . -3) (undo-tree-id118 . -3) (undo-tree-id119 . -3) (undo-tree-id120 . -3) (undo-tree-id121 . -3) (undo-tree-id122 . -3) (undo-tree-id123 . -3) (undo-tree-id124 . -3) (undo-tree-id125 . -3) (undo-tree-id126 . -3) (undo-tree-id127 . -3) (undo-tree-id128 . -3) (undo-tree-id129 . -3) (undo-tree-id130 . -3) (undo-tree-id131 . -3) (undo-tree-id132 . -3) (undo-tree-id133 . -3) (undo-tree-id134 . -3) (undo-tree-id135 . -3) (undo-tree-id136 . -3) (undo-tree-id137 . -3) (undo-tree-id138 . -3) (undo-tree-id139 . -3) (undo-tree-id140 . -3) (undo-tree-id141 . -3) (undo-tree-id142 . -3) (undo-tree-id143 . -3) (undo-tree-id144 . -3) (undo-tree-id145 . -3) (undo-tree-id146 . -3) (undo-tree-id147 . -3) (undo-tree-id148 . -3) (undo-tree-id149 . -3) (undo-tree-id150 . -3) (undo-tree-id151 . -3) (undo-tree-id152 . -3) (undo-tree-id153 . -3) (undo-tree-id154 . -3) (undo-tree-id155 . -3) (undo-tree-id156 . -3) (undo-tree-id157 . -3) (undo-tree-id158 . -3) (undo-tree-id159 . -3) (undo-tree-id160 . -3) (undo-tree-id161 . -3) (undo-tree-id162 . -3) (undo-tree-id163 . -3) (undo-tree-id164 . -3) (undo-tree-id165 . -3) (undo-tree-id166 . -3) (undo-tree-id167 . -3) (undo-tree-id168 . -3) (undo-tree-id169 . -3) (undo-tree-id170 . -3) (undo-tree-id171 . -3) (undo-tree-id172 . -3) (undo-tree-id173 . -3) (undo-tree-id174 . -3) (undo-tree-id175 . -3) (undo-tree-id176 . -3) (undo-tree-id177 . -3) (undo-tree-id178 . -3) (undo-tree-id179 . -3) (undo-tree-id180 . -3) (undo-tree-id181 . -3) (undo-tree-id182 . -3) (undo-tree-id183 . -3) (undo-tree-id184 . -3) (undo-tree-id185 . -3) (undo-tree-id186 . -3) (undo-tree-id187 . -3) (undo-tree-id188 . -3) (undo-tree-id189 . -3) (undo-tree-id190 . -3) (undo-tree-id191 . -3) (undo-tree-id192 . -3) (undo-tree-id193 . -3) (undo-tree-id194 . -3) (undo-tree-id195 . -3) (undo-tree-id196 . -3) (undo-tree-id197 . -3) (undo-tree-id198 . -3) (undo-tree-id199 . -3) (undo-tree-id200 . -3) (undo-tree-id201 . -3) (undo-tree-id202 . -3) (undo-tree-id203 . -4) (undo-tree-id204 . -4) (undo-tree-id205 . -4) (undo-tree-id206 . -4) (undo-tree-id207 . -4) (undo-tree-id208 . -4) (undo-tree-id209 . -4) (undo-tree-id210 . -4) (undo-tree-id211 . -4) (undo-tree-id212 . -4) (undo-tree-id213 . -4) (undo-tree-id214 . -4) (undo-tree-id215 . -4) (undo-tree-id216 . -4) (undo-tree-id217 . -4) (undo-tree-id218 . -4) (undo-tree-id219 . -4) (undo-tree-id220 . -4) (undo-tree-id221 . -4) (undo-tree-id222 . -4) (undo-tree-id223 . -4) (undo-tree-id224 . -4) (undo-tree-id225 . -4) (undo-tree-id226 . -4) (undo-tree-id227 . -4) (undo-tree-id228 . -4) (undo-tree-id229 . -4) (undo-tree-id230 . -4) (undo-tree-id231 . -4) (undo-tree-id232 . -4) (undo-tree-id233 . -4) (undo-tree-id234 . -4) (undo-tree-id235 . -4) (undo-tree-id236 . -4) (undo-tree-id237 . -4) (undo-tree-id238 . -4) (undo-tree-id239 . -4) (undo-tree-id240 . -4) (undo-tree-id241 . -4) (undo-tree-id242 . -4) (undo-tree-id243 . -4) (undo-tree-id244 . -4) (undo-tree-id245 . -4) (undo-tree-id246 . -4) (undo-tree-id247 . -4) (undo-tree-id248 . -4) (undo-tree-id249 . -4) (undo-tree-id250 . -4) (undo-tree-id251 . -4) (undo-tree-id252 . -4) (undo-tree-id253 . -4) (undo-tree-id254 . -4) (undo-tree-id255 . -4) (undo-tree-id256 . -4) (undo-tree-id257 . -4) (undo-tree-id258 . -4) (undo-tree-id259 . -4) (undo-tree-id260 . -4) (undo-tree-id261 . -4) (undo-tree-id262 . -4) (undo-tree-id263 . -4) (undo-tree-id264 . -4) (undo-tree-id265 . -4) (undo-tree-id266 . -4) (undo-tree-id267 . -4) (undo-tree-id268 . -4) (undo-tree-id269 . -4) (undo-tree-id270 . -4) (undo-tree-id271 . -4) (undo-tree-id272 . -4) (undo-tree-id273 . -4) (undo-tree-id274 . -4) (undo-tree-id275 . -4) (undo-tree-id276 . -4) (undo-tree-id277 . -4) (undo-tree-id278 . -4) (undo-tree-id279 . -4) (undo-tree-id280 . -4) (undo-tree-id281 . -4) (undo-tree-id282 . -4) (undo-tree-id283 . -4) (undo-tree-id284 . -4) (undo-tree-id285 . -4) (undo-tree-id286 . -4) (undo-tree-id287 . -4) (undo-tree-id288 . -4) (undo-tree-id289 . -4) (undo-tree-id290 . -4) (undo-tree-id291 . -4) (undo-tree-id292 . -4) (undo-tree-id293 . -4) (undo-tree-id294 . -4) (undo-tree-id295 . -4) (undo-tree-id296 . -4) (undo-tree-id297 . -4) 1474 (1470 . 1474)) nil (26361 6679 112643 831000) 0 nil])
nil
([nil nil ((911 . 912) (t 26361 6679 159948 15000)) nil (26361 6686 735903 315000) 0 nil])
([nil nil ((#("	s.get_data();" 0 11 (fontified t) 11 12 (face (rainbow-delimiters-depth-5-face) fontified t) 12 13 (face (rainbow-delimiters-depth-5-face) fontified t) 13 14 (fontified t)) . 929) (undo-tree-id319 . -10) (undo-tree-id320 . -10) (undo-tree-id321 . -10) (undo-tree-id322 . -10) (undo-tree-id323 . -10) (undo-tree-id324 . -10) (undo-tree-id325 . -10) (undo-tree-id326 . -10) (undo-tree-id327 . -10) (undo-tree-id328 . -10) (undo-tree-id329 . -10) (undo-tree-id330 . -10) (undo-tree-id331 . -10) (undo-tree-id332 . -10) (undo-tree-id333 . -10) (undo-tree-id334 . -10) (undo-tree-id335 . -10) (undo-tree-id336 . -10) (undo-tree-id337 . -10) (undo-tree-id338 . -10) (undo-tree-id339 . -10) (undo-tree-id340 . -10) (undo-tree-id341 . -10) (undo-tree-id342 . -10) (undo-tree-id343 . -10) (undo-tree-id344 . -10) (undo-tree-id345 . -10) (undo-tree-id346 . -10) (undo-tree-id347 . -10) (undo-tree-id348 . -10) (undo-tree-id349 . -10) (undo-tree-id350 . -10) (undo-tree-id351 . -10) (undo-tree-id352 . -10) (undo-tree-id353 . -10) (undo-tree-id354 . -7) (undo-tree-id355 . -7) (undo-tree-id356 . -7) (undo-tree-id357 . -7) (undo-tree-id358 . -7) (undo-tree-id359 . -7) (undo-tree-id360 . -7) (undo-tree-id361 . -7) (undo-tree-id362 . -7) (undo-tree-id363 . -7) (undo-tree-id364 . -7) (undo-tree-id365 . -7) (undo-tree-id366 . -7) (undo-tree-id367 . -7) (undo-tree-id368 . -7) (undo-tree-id369 . -7) (undo-tree-id370 . -7) (undo-tree-id371 . -7) (undo-tree-id372 . -7) (undo-tree-id373 . -7) (undo-tree-id374 . -7) (undo-tree-id375 . -6) (undo-tree-id376 . -6) (undo-tree-id377 . -6) (undo-tree-id378 . -6) (undo-tree-id379 . -6) (undo-tree-id380 . -6) (undo-tree-id381 . -6) (undo-tree-id382 . -6) (undo-tree-id383 . -6) (undo-tree-id384 . -6) (undo-tree-id385 . -6) (undo-tree-id386 . -6) (undo-tree-id387 . -6) (undo-tree-id388 . -6) (undo-tree-id389 . -6) (undo-tree-id390 . -6) (undo-tree-id391 . -6) (undo-tree-id392 . -6) (undo-tree-id393 . -6) (undo-tree-id394 . -6) (undo-tree-id395 . -6) (undo-tree-id396 . -3) (undo-tree-id397 . -3) (undo-tree-id398 . -3) (undo-tree-id399 . -3) (undo-tree-id400 . -3) (undo-tree-id401 . -3) (undo-tree-id402 . -3) (undo-tree-id403 . -3) (undo-tree-id404 . -3) (undo-tree-id405 . -3) (undo-tree-id406 . -3) (undo-tree-id407 . -3) (undo-tree-id408 . -3) (undo-tree-id409 . -3) (undo-tree-id410 . -3) (undo-tree-id411 . -3) (undo-tree-id412 . -3) (undo-tree-id413 . -3) (undo-tree-id414 . -3) (undo-tree-id415 . -3) (undo-tree-id416 . -3) (undo-tree-id417 . -3) (undo-tree-id418 . -3) (undo-tree-id419 . -3) (undo-tree-id420 . -3) (undo-tree-id421 . -3) (undo-tree-id422 . -3) (undo-tree-id423 . -3) (undo-tree-id424 . -2) (undo-tree-id425 . -2) (undo-tree-id426 . -2) (undo-tree-id427 . -2) (undo-tree-id428 . -2) (undo-tree-id429 . -2) (undo-tree-id430 . -2) (undo-tree-id431 . -2) (undo-tree-id432 . -2) (undo-tree-id433 . -2) (undo-tree-id434 . -2) (undo-tree-id435 . -2) (undo-tree-id436 . -2) (undo-tree-id437 . -2) (undo-tree-id438 . -2) (undo-tree-id439 . -2) (undo-tree-id440 . -2) (undo-tree-id441 . -2) (undo-tree-id442 . -2) (undo-tree-id443 . -2) (undo-tree-id444 . -2) (undo-tree-id445 . -2) (undo-tree-id446 . -2) (undo-tree-id447 . -2) (undo-tree-id448 . -2) (undo-tree-id449 . -2) (undo-tree-id450 . -2) (undo-tree-id451 . -2) (undo-tree-id452 . -2) (undo-tree-id453 . -2) (undo-tree-id454 . -2) (undo-tree-id455 . -2) (undo-tree-id456 . -2) (undo-tree-id457 . -2) (undo-tree-id458 . -2) (undo-tree-id459 . -2) (undo-tree-id460 . -2) (undo-tree-id461 . -2) (undo-tree-id462 . -2) (undo-tree-id463 . -2) (undo-tree-id464 . -2) (undo-tree-id465 . -2) (undo-tree-id466 . -2) (undo-tree-id467 . -2) (undo-tree-id468 . -2) (undo-tree-id469 . -2) (undo-tree-id470 . -2) (undo-tree-id471 . -2) (undo-tree-id472 . -2) (undo-tree-id473 . -2) (undo-tree-id474 . -2) (undo-tree-id475 . -2) (undo-tree-id476 . -2) (undo-tree-id477 . -2) (undo-tree-id478 . -2) (undo-tree-id479 . -2) (undo-tree-id480 . -2) (undo-tree-id481 . -2) (undo-tree-id482 . -2) (undo-tree-id483 . -2) (undo-tree-id484 . -2) (undo-tree-id485 . -2) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -14) (t 26361 6686 751609 297000)) nil (26361 6728 402471 5000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -932) (undo-tree-id317 . -1) (#("e" 0 1 (fontified t)) . -933) (undo-tree-id318 . -1) 934 (929 . 934)) nil (26361 6728 402049 976000) 0 nil])
([nil nil ((nil rear-nonsticky nil 955 . 956) (nil fontified nil 932 . 956) (932 . 956) 931) nil (26361 6728 402047 929000) 0 nil])
([nil nil ((957 . 958) (956 . 958)) nil (26361 6728 402046 736000) 0 nil])
([nil nil ((959 . 960)) nil (26361 6728 402045 891000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . 957) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1)) nil (26361 6728 402042 372000) 0 nil])
([nil nil ((1001 . 1004) (1000 . 1003) (999 . 1001) (998 . 999) (t 26361 6728 439917 793000)) nil (26361 6917 543061 506000) 0 nil])
([nil nil ((978 . 980) (#("i" 0 1 (fontified t)) . -978) (undo-tree-id581 . -1) (undo-tree-id582 . -1) 979 (978 . 979)) nil (26361 6917 543060 929000) 0 nil])
([nil nil ((979 . 980) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -979) (undo-tree-id580 . -1) 980) nil (26361 6917 543059 706000) 0 nil])
([nil nil ((#("int " 0 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face c-type c-decl-id-start fontified t) 3 4 (fontified t)) . 989) (undo-tree-id579 . -3)) nil (26361 6917 543058 952000) 0 nil])
([nil nil ((989 . 991)) nil (26361 6917 543058 236000) 0 nil])
([nil nil ((1001 . 1004) (#("	 " 0 2 (fontified nil)) . -1001) (undo-tree-id578 . -2) (#(" " 0 1 (fontified t)) . 1003)) nil (26361 6917 543057 531000) 0 nil])
([nil nil ((1001 . 1004) (#("	 " 0 2 (fontified nil)) . -1001) (undo-tree-id577 . -2) (#(" " 0 1 (fontified t)) . 1003)) nil (26361 6917 543056 726000) 0 nil])
([nil nil ((1001 . 1004) (#("	 " 0 2 (fontified nil)) . -1001) (undo-tree-id516 . -2) (undo-tree-id517 . -2) (undo-tree-id518 . -2) (undo-tree-id519 . -2) (undo-tree-id520 . -2) (undo-tree-id521 . -2) (undo-tree-id522 . -2) (undo-tree-id523 . -2) (undo-tree-id524 . -2) (undo-tree-id525 . -2) (undo-tree-id526 . -2) (undo-tree-id527 . -2) (undo-tree-id528 . -2) (undo-tree-id529 . -2) (undo-tree-id530 . -2) (undo-tree-id531 . -2) (undo-tree-id532 . -2) (undo-tree-id533 . -2) (undo-tree-id534 . -2) (undo-tree-id535 . -2) (undo-tree-id536 . -2) (undo-tree-id537 . -2) (undo-tree-id538 . -2) (undo-tree-id539 . -2) (undo-tree-id540 . -2) (undo-tree-id541 . -2) (undo-tree-id542 . -2) (undo-tree-id543 . -2) (undo-tree-id544 . -2) (undo-tree-id545 . -2) (undo-tree-id546 . -2) (undo-tree-id547 . -2) (undo-tree-id548 . -2) (undo-tree-id549 . -2) (undo-tree-id550 . -2) (undo-tree-id551 . -2) (undo-tree-id552 . -2) (undo-tree-id553 . -2) (undo-tree-id554 . -2) (undo-tree-id555 . -2) (undo-tree-id556 . -2) (undo-tree-id557 . -2) (undo-tree-id558 . -2) (undo-tree-id559 . -2) (undo-tree-id560 . -2) (undo-tree-id561 . -2) (undo-tree-id562 . -2) (undo-tree-id563 . -2) (undo-tree-id564 . -2) (undo-tree-id565 . -2) (undo-tree-id566 . -2) (undo-tree-id567 . -2) (undo-tree-id568 . -2) (undo-tree-id569 . -2) (undo-tree-id570 . -2) (undo-tree-id571 . -2) (undo-tree-id572 . -2) (undo-tree-id573 . -2) (undo-tree-id574 . -2) (undo-tree-id575 . -2) (undo-tree-id576 . -2) (#(" " 0 1 (fontified t)) . 1003)) nil (26361 6917 543054 775000) 0 nil])
([nil nil ((1016 . 1017) (1013 . 1016) (1010 . 1013) (1009 . 1010) (#("	" 0 1 (fontified nil)) . 1008) (undo-tree-id515 . -1) (1007 . 1010)) nil (26361 6917 543022 212000) 0 nil])
([nil nil ((1001 . 1004) (#("	 " 0 2 (fontified nil)) . -1001) (undo-tree-id615 . -2) (#(" " 0 1 (fontified t)) . 1003) (t 26361 6917 554914 885000)) nil (26361 6935 977828 548000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1005 . 1006) (#("
" 0 1 (fontified nil)) . -1061) (1004 . 1062) 1003) nil (26361 6935 977827 384000) 0 nil])
([nil nil ((#("INFO" 0 4 (fontified t)) . 1013) (undo-tree-id613 . -3) (undo-tree-id614 . -4)) nil (26361 6935 977826 640000) 0 nil])
([nil nil ((1006 . 1018) (#("RCLCPP_E" 0 8 (fontified nil)) . 1006) (1006 . 1014) (#("RCLCPP_ERROR(logger, ...)" 0 25 (fontified nil)) . -1006) (undo-tree-id583 . -25) (1006 . 1031) (#("RCLCPP_ER" 0 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t)) . -1006) (undo-tree-id584 . -7) (undo-tree-id585 . -7) (undo-tree-id586 . -9) (undo-tree-id587 . -9) (undo-tree-id588 . -9) (undo-tree-id589 . -9) (undo-tree-id590 . -9) (undo-tree-id591 . -9) (undo-tree-id592 . -9) (undo-tree-id593 . -9) (undo-tree-id594 . -9) (undo-tree-id595 . -9) (undo-tree-id596 . -9) (undo-tree-id597 . -9) (undo-tree-id598 . -9) (undo-tree-id599 . -9) (undo-tree-id600 . -9) (undo-tree-id601 . -9) (undo-tree-id602 . -9) (undo-tree-id603 . -9) (undo-tree-id604 . -9) (undo-tree-id605 . -9) (undo-tree-id606 . -9) (undo-tree-id607 . -9) (undo-tree-id608 . -9) (undo-tree-id609 . -9) (undo-tree-id610 . -9) (undo-tree-id611 . -9) (undo-tree-id612 . -9) 1015 (1013 . 1015)) nil (26361 6935 977822 500000) 0 nil])
([nil nil ((#("	  
" 0 3 (fontified t) 3 4 (fontified t)) . 1001) (undo-tree-id748 . -3) (undo-tree-id749 . -2) 1003 (t 26361 6936 16595 637000)) nil (26361 7044 497944 42000) 0 nil])
([nil nil ((1001 . 1004) (#("	" 0 1 (rear-nonsticky t fontified t)) . 1001) 1003) nil (26361 7044 497942 507000) 0 nil])
([nil nil ((#("sent " 0 5 (face font-lock-string-face fontified t)) . 1038) (undo-tree-id747 . -4)) nil (26361 7044 497941 992000) 0 nil])
([nil nil ((#("10000 " 0 6 (face font-lock-string-face fontified t)) . 1038) (undo-tree-id746 . -5)) nil (26361 7044 497941 249000) 0 nil])
([nil nil ((#("messages" 0 8 (face font-lock-string-face fontified t)) . 1038) (undo-tree-id745 . -7)) nil (26361 7044 497940 691000) 0 nil])
([nil nil ((1049 . 1063) (#("a" 0 1 (face font-lock-string-face fontified t)) . -1049) (undo-tree-id696 . -1) 1050 (1038 . 1050) (#("
" 0 1 (face font-lock-warning-face fontified t)) . -1038) (undo-tree-id697 . -1) (#(" " 0 1 (fontified t)) . -1039) (undo-tree-id698 . -1) (#(" " 0 1 (fontified t)) . -1040) (undo-tree-id699 . -1) (#(" " 0 1 (fontified t)) . -1041) (undo-tree-id700 . -1) (#(" " 0 1 (fontified t)) . -1042) (undo-tree-id701 . -1) (#(" " 0 1 (fontified t)) . -1043) (undo-tree-id702 . -1) (#(" " 0 1 (fontified t)) . -1044) (undo-tree-id703 . -1) (#(" " 0 1 (fontified t)) . -1045) (undo-tree-id704 . -1) (#(" " 0 1 (fontified nil)) . -1046) (undo-tree-id705 . -1) (#("	" 0 1 (fontified nil)) . 1047) (undo-tree-id706 . -1) (nil face font-lock-warning-face 1039 . 1047) (nil fontified t 1039 . 1047) (1039 . 1047) 1040 (#(" " 0 1 (fontified t)) . -1040) (undo-tree-id707 . -1) (#(" " 0 1 (fontified t)) . -1041) (undo-tree-id708 . -1) (#(" " 0 1 (fontified t)) . -1042) (undo-tree-id709 . -1) (#(" " 0 1 (fontified t)) . -1043) (undo-tree-id710 . -1) (#(" " 0 1 (fontified t)) . -1044) (undo-tree-id711 . -1) (#(" " 0 1 (fontified t)) . -1045) (undo-tree-id712 . -1) (#(" " 0 1 (fontified t)) . -1046) (undo-tree-id713 . -1) (#(" " 0 1 (fontified nil)) . -1047) (undo-tree-id714 . -1) (#("	" 0 1 (fontified nil)) . 1048) (undo-tree-id715 . -1) (1040 . 1048) 1041 (#(" " 0 1 (fontified t)) . -1041) (undo-tree-id716 . -1) (#(" " 0 1 (fontified t)) . -1042) (undo-tree-id717 . -1) (#(" " 0 1 (fontified t)) . -1043) (undo-tree-id718 . -1) (#(" " 0 1 (fontified t)) . -1044) (undo-tree-id719 . -1) (#(" " 0 1 (fontified t)) . -1045) (undo-tree-id720 . -1) (#(" " 0 1 (fontified t)) . -1046) (undo-tree-id721 . -1) (#(" " 0 1 (fontified t)) . -1047) (undo-tree-id722 . -1) 1048 (1038 . 1048) (#("[" 0 1 (face font-lock-string-face fontified nil)) . -1038) (undo-tree-id723 . -1) (#("]" 0 1 (face font-lock-string-face fontified t)) . 1039) (#("E" 0 1 (face font-lock-string-face fontified t)) . -1039) (undo-tree-id724 . -1) (#("R" 0 1 (face font-lock-string-face fontified t)) . -1040) (undo-tree-id725 . -1) 1041 (1040 . 1041) (#("O" 0 1 (face font-lock-string-face fontified t)) . -1040) (undo-tree-id726 . -1) (#("O" 0 1 (face font-lock-string-face fontified t)) . -1041) (undo-tree-id727 . -1) 1042 (1039 . 1042) (1038 . 1040) (#("S" 0 1 (face font-lock-string-face fontified t)) . -1038) (undo-tree-id728 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1039) (undo-tree-id729 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -1040) (undo-tree-id730 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1041) (undo-tree-id731 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1042) (undo-tree-id732 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1043) (undo-tree-id733 . -1) (#("B" 0 1 (face font-lock-string-face fontified t)) . -1044) (undo-tree-id734 . -1) (#("y" 0 1 (face font-lock-string-face fontified t)) . -1045) (undo-tree-id735 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1046) (undo-tree-id736 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1047) (undo-tree-id737 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1048) (undo-tree-id738 . -1) (#("J" 0 1 (face font-lock-string-face fontified t)) . -1049) (undo-tree-id739 . -1) (#("u" 0 1 (face font-lock-string-face fontified t)) . -1050) (undo-tree-id740 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -1051) (undo-tree-id741 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1052) (undo-tree-id742 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1053) (undo-tree-id743 . -1) (#("F" 0 1 (face font-lock-string-face fontified t)) . -1054) (undo-tree-id744 . -1) 1055 (1038 . 1055)) nil (26361 7044 497933 95000) 0 nil])
([nil nil ((#("	  " 0 3 (fontified t)) . -1067) (undo-tree-id695 . -3) 1070 (1066 . 1070)) nil (26361 7044 497913 372000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1067) (undo-tree-id694 . 1)) nil (26361 7044 497912 649000) 0 nil])
([nil nil ((1081 . 1085) (1080 . 1081) (1079 . 1080) (1078 . 1080) (1075 . 1078) (1074 . 1075) (#("else" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 3 (face font-lock-keyword-face fontified nil) 3 4 (face font-lock-keyword-face fontified nil)) . 1074) (undo-tree-id693 . -4) (1070 . 1074) 1074 (1069 . 1074)) nil (26361 7044 497911 938000) 0 nil])
([nil nil ((1086 . 1087)) nil (26361 7044 497911 195000) 0 nil])
([nil nil ((1084 . 1085)) nil (26361 7044 497910 969000) 0 nil])
([nil nil ((1090 . 1093) (1089 . 1092) (1088 . 1090) (1087 . 1088) (#(" " 0 1 (fontified t)) . -1087) (undo-tree-id691 . -1) (#(" " 0 1 (fontified t)) . -1088) (undo-tree-id692 . -1) 1089 (1088 . 1089)) nil (26361 7044 497910 296000) 0 nil])
([nil nil ((#("	  RCLCPP_ERROR(this->get_logger(), \"Start Byte Search Ongoing\");
" 0 3 (fontified t) 3 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-6-face) fontified t) 16 20 (face font-lock-keyword-face fontified t) 20 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-7-face) fontified t) 33 34 (face (rainbow-delimiters-depth-7-face) fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 37 (face font-lock-string-face fontified t) 37 38 (face font-lock-string-face fontified t) 38 39 (face font-lock-string-face fontified t) 39 40 (face font-lock-string-face fontified t) 40 41 (face font-lock-string-face fontified t) 41 42 (face font-lock-string-face fontified t) 42 43 (face font-lock-string-face fontified t) 43 44 (face font-lock-string-face fontified t) 44 45 (face font-lock-string-face fontified t) 45 46 (face font-lock-string-face fontified t) 46 47 (face font-lock-string-face fontified t) 47 48 (face font-lock-string-face fontified t) 48 49 (face font-lock-string-face fontified t) 49 50 (face font-lock-string-face fontified t) 50 51 (face font-lock-string-face fontified t) 51 52 (face font-lock-string-face fontified t) 52 53 (face font-lock-string-face fontified t) 53 54 (face font-lock-string-face fontified t) 54 55 (face font-lock-string-face fontified t) 55 56 (face font-lock-string-face fontified t) 56 57 (face font-lock-string-face fontified t) 57 58 (face font-lock-string-face fontified t) 58 59 (face font-lock-string-face fontified t) 59 60 (face font-lock-string-face fontified t) 60 61 (face font-lock-string-face fontified t) 61 62 (face font-lock-string-face fontified t) 62 63 (face font-lock-string-face fontified t) 63 64 (face (rainbow-delimiters-depth-6-face) fontified t) 64 65 (fontified t) 65 66 (fontified t)) . 1001) (undo-tree-id689 . -65) (undo-tree-id690 . -2) 1003) nil (26361 7044 497908 898000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1034 . 1035) (#("
" 0 1 (fontified nil)) . -1097) (1031 . 1098)) nil (26361 7044 497907 402000) 0 nil])
([nil nil ((#("if (e == -1 ) {
	} else if (e == -2) {
	  
	}" 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-5-face) fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 8 (fontified t) 8 12 (fontified t) 12 13 (face (rainbow-delimiters-depth-5-face) fontified t) 13 14 (fontified t) 14 15 (face (rainbow-delimiters-depth-5-face) fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-5-face) fontified t) 18 19 (fontified t) 19 23 (face font-lock-keyword-face fontified t) 23 24 (fontified t) 24 25 (face font-lock-keyword-face fontified t) 25 26 (face font-lock-keyword-face fontified t) 26 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-5-face) fontified t) 28 29 (fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-5-face) fontified t) 36 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-5-face) fontified t) 38 39 (fontified t) 39 44 (fontified t) 44 45 (face (rainbow-delimiters-depth-5-face) fontified t)) . 985) (undo-tree-id684 . -44) (undo-tree-id685 . -44) (undo-tree-id686 . 3) (undo-tree-id687 . -44) (undo-tree-id688 . -30)) nil (26361 7044 497906 519000) 0 nil])
([nil nil ((1007 . 1011) (998 . 999) (#("	  " 0 3 (fontified nil)) . 998) (1008 . 1009) (1006 . 1008) (1003 . 1006) (1001 . 1003) (#("a" 0 1 (fontified t)) . -1001) (undo-tree-id670 . -1) (undo-tree-id671 . -1) 1002 (1001 . 1002) (apply yas--snippet-revive 985 1008 #s(yas--snippet nil (#s(yas--field 1 993 994 nil nil nil t #s(yas--exit 1001 nil))) #s(yas--exit 1001 nil) 2 nil #s(yas--field 1 993 994 nil nil nil t #s(yas--exit 1001 nil)) nil nil)) (993 . 994) (#("e" 0 1 (fontified nil)) . 993) (993 . 994) (#("e" 0 1 (fontified t)) . -993) (undo-tree-id672 . -1) (undo-tree-id673 . -1) 994 (#("condition" 0 9 (fontified nil)) . 994) (993 . 994) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 993 994 nil nil nil t #s(yas--exit 1001 nil))) #s(yas--exit 1001 nil) 2 nil #s(yas--field 1 993 994 nil nil nil t #s(yas--exit 1001 nil)) nil nil)) (985 . 1016) (#("switch (${1:condition}) {
	  $0
	    }" 0 38 (fontified nil)) . 985) (1017 . 1022) (1011 . 1014) (985 . 1015) (#("swi" 0 3 (fontified nil)) . 985) (985 . 988) (#("switch (condition) {cases}" 0 26 (fontified nil)) . -985) (undo-tree-id674 . -26) (985 . 1011) (#("swit" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -985) (undo-tree-id675 . -4) (undo-tree-id676 . -4) 989 (987 . 989) (985 . 987) (984 . 985) (#("	" 0 1 (fontified t)) . 984) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1)) nil (26361 7044 497899 285000) 0 nil])
([nil nil ((#("	  RCLCPP_ERROR(this->get_logger(), \"Start Byte Search Ongoing\");
" 0 2 (fontified t) 2 3 (fontified t rear-nonsticky t) 3 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-5-face) fontified t) 16 20 (face font-lock-keyword-face fontified t) 20 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-6-face) fontified t) 33 34 (face (rainbow-delimiters-depth-6-face) fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 37 (face font-lock-string-face fontified t) 37 38 (face font-lock-string-face fontified t) 38 39 (face font-lock-string-face fontified t) 39 40 (face font-lock-string-face fontified t) 40 41 (face font-lock-string-face fontified t) 41 42 (face font-lock-string-face fontified t) 42 43 (face font-lock-string-face fontified t) 43 44 (face font-lock-string-face fontified t) 44 45 (face font-lock-string-face fontified t) 45 46 (face font-lock-string-face fontified t) 46 47 (face font-lock-string-face fontified t) 47 48 (face font-lock-string-face fontified t) 48 49 (face font-lock-string-face fontified t) 49 50 (face font-lock-string-face fontified t) 50 51 (face font-lock-string-face fontified t) 51 52 (face font-lock-string-face fontified t) 52 53 (face font-lock-string-face fontified t) 53 54 (face font-lock-string-face fontified t) 54 55 (face font-lock-string-face fontified t) 55 56 (face font-lock-string-face fontified t) 56 57 (face font-lock-string-face fontified t) 57 58 (face font-lock-string-face fontified t) 58 59 (face font-lock-string-face fontified t) 59 60 (face font-lock-string-face fontified t) 60 61 (face font-lock-string-face fontified t) 61 62 (face font-lock-string-face fontified t) 62 63 (face font-lock-string-face fontified t) 63 64 (face (rainbow-delimiters-depth-5-face) fontified t) 64 65 (fontified t) 65 66 (fontified t)) . 1020) (undo-tree-id668 . -65) (undo-tree-id669 . -2) 1022) nil (26361 7044 497878 52000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -1077) (1011 . 1078) 1010) nil (26361 7044 497876 111000) 0 nil])
([nil nil ((#("	  
" 0 3 (fontified t) 3 4 (fontified t)) . 1008) (undo-tree-id666 . -3) (undo-tree-id667 . -2) 1010) nil (26361 7044 497874 812000) 0 nil])
([nil nil ((1077 . 1082) (#("r" 0 1 (fontified t)) . -1077) (undo-tree-id664 . -1) (undo-tree-id665 . -1) 1078 (1077 . 1078) (1073 . 1077)) nil (26361 7044 497870 582000) 0 nil])
([nil nil ((1082 . 1083)) nil (26361 7044 497868 282000) 0 nil])
([nil nil ((1094 . 1098) (1085 . 1086) (#("	  " 0 3 (fontified nil)) . 1085) (1095 . 1096) (1088 . 1095) (1085 . 1088) (#("	  " 0 3 (fontified nil)) . 1084) (undo-tree-id663 . -3) (1083 . 1088)) nil (26361 7044 497867 353000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -1164) (1098 . 1165) 1097) nil (26361 7044 497865 797000) 0 nil])
([nil nil ((#("	  
" 0 3 (fontified t) 3 4 (fontified t)) . 1095) (undo-tree-id661 . -3) (undo-tree-id662 . -2) 1097) nil (26361 7044 497864 534000) 0 nil])
([nil nil ((#("Start " 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t)) . 1132) (undo-tree-id659 . -5) (undo-tree-id660 . -6)) nil (26361 7044 497862 264000) 0 nil])
([nil nil ((#("Byte " 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t)) . 1132) (undo-tree-id657 . -4) (undo-tree-id658 . -5)) nil (26361 7044 497860 284000) 0 nil])
([nil nil ((#("Search " 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t) 6 7 (face font-lock-string-face fontified t)) . 1132) (undo-tree-id655 . -6) (undo-tree-id656 . -7)) nil (26361 7044 497856 180000) 0 nil])
([nil nil ((#("Ongoing" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t) 6 7 (face font-lock-string-face fontified t)) . 1132) (undo-tree-id653 . -6) (undo-tree-id654 . -7)) nil (26361 7044 497853 468000) 0 nil])
([nil nil ((1132 . 1150)) nil (26361 7044 497851 8000) 0 nil])
([nil nil ((#("	  " 0 3 (fontified t)) . -1154) (undo-tree-id629 . -3) (undo-tree-id630 . -3) (undo-tree-id631 . -3) (undo-tree-id632 . -3) (undo-tree-id633 . -3) (undo-tree-id634 . -3) (undo-tree-id635 . -3) (undo-tree-id636 . -3) (undo-tree-id637 . -3) (undo-tree-id638 . -3) (undo-tree-id639 . -3) (undo-tree-id640 . -3) (undo-tree-id641 . -3) (undo-tree-id642 . -3) (undo-tree-id643 . -3) (undo-tree-id644 . -3) (undo-tree-id645 . -3) (undo-tree-id646 . -3) (undo-tree-id647 . -3) (undo-tree-id648 . -3) (undo-tree-id649 . -3) (undo-tree-id650 . -3) (undo-tree-id651 . -3) (undo-tree-id652 . -3) 1157 (1153 . 1157)) nil (26361 7044 497849 887000) 0 nil])
([nil nil ((1157 . 1162) (1154 . 1157)) nil (26361 7044 497626 846000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -1162) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) 1163 (1162 . 1163)) nil (26361 7044 497626 1000) 0 nil])
([nil nil ((1162 . 1163)) nil (26361 7044 497609 988000) 0 nil])
([nil nil ((1176 . 1182) (apply yas--snippet-revive 1168 1176 #s(yas--snippet nil nil nil 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 3 nil nil nil nil)) (1168 . 1176) (#("default:" 0 8 (fontified nil)) . 1168) (1168 . 1176) (#("def" 0 3 (fontified nil)) . 1168) (1168 . 1171) (#("default:" 0 8 (fontified nil)) . -1168) (undo-tree-id1139 . -8) (1168 . 1176) (#("def" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1168) (undo-tree-id1140 . -3) (undo-tree-id1141 . -3) 1171 (1168 . 1171) (1165 . 1168) (#("	  " 0 3 (fontified nil)) . 1164) (undo-tree-id1142 . -3) (1163 . 1168) (t 26361 7044 537117 196000)) nil (26361 7074 816891 897000) 0 nil])
([nil nil ((1165 . 1166) (#("	  " 0 3 (fontified t)) . 1165) (undo-tree-id1138 . -3) 1169) nil (26361 7074 816888 807000) 0 nil])
([nil nil ((1175 . 1178) (#("	 " 0 2 (fontified nil)) . -1175) (undo-tree-id1109 . -2) (undo-tree-id1110 . -2) (undo-tree-id1111 . -2) (undo-tree-id1112 . -2) (undo-tree-id1113 . -2) (undo-tree-id1114 . -2) (undo-tree-id1115 . -2) (undo-tree-id1116 . -2) (undo-tree-id1117 . -2) (undo-tree-id1118 . -2) (undo-tree-id1119 . -2) (undo-tree-id1120 . -2) (undo-tree-id1121 . -2) (undo-tree-id1122 . -2) (undo-tree-id1123 . -2) (undo-tree-id1124 . -2) (undo-tree-id1125 . -2) (undo-tree-id1126 . -2) (undo-tree-id1127 . -2) (undo-tree-id1128 . -2) (undo-tree-id1129 . -2) (undo-tree-id1130 . -2) (undo-tree-id1131 . -2) (undo-tree-id1132 . -2) (undo-tree-id1133 . -2) (undo-tree-id1134 . -2) (undo-tree-id1135 . -2) (undo-tree-id1136 . -2) (undo-tree-id1137 . -2) (#("   " 0 3 (fontified t)) . 1177)) nil (26361 7074 816887 127000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -1237) (1178 . 1238) 1177) nil (26361 7074 816865 859000) 0 nil])
([nil nil ((#("	  
" 0 3 (fontified t) 3 4 (fontified t)) . 1175) (undo-tree-id1072 . -3) (undo-tree-id1073 . -2) (undo-tree-id1074 . -2) (undo-tree-id1075 . -2) (undo-tree-id1076 . -2) (undo-tree-id1077 . -2) (undo-tree-id1078 . -2) (undo-tree-id1079 . -2) (undo-tree-id1080 . -2) (undo-tree-id1081 . -2) (undo-tree-id1082 . -2) (undo-tree-id1083 . -2) (undo-tree-id1084 . -2) (undo-tree-id1085 . -2) (undo-tree-id1086 . -2) (undo-tree-id1087 . -2) (undo-tree-id1088 . -2) (undo-tree-id1089 . -2) (undo-tree-id1090 . -2) (undo-tree-id1091 . -2) (undo-tree-id1092 . -2) (undo-tree-id1093 . -2) (undo-tree-id1094 . -2) (undo-tree-id1095 . -2) (undo-tree-id1096 . -2) (undo-tree-id1097 . -2) (undo-tree-id1098 . -2) (undo-tree-id1099 . -2) (undo-tree-id1100 . -2) (undo-tree-id1101 . -2) (undo-tree-id1102 . -2) (undo-tree-id1103 . -2) (undo-tree-id1104 . -2) (undo-tree-id1105 . -2) (undo-tree-id1106 . -2) (undo-tree-id1107 . -2) (undo-tree-id1108 . -4) 1177) nil (26361 7074 816864 764000) 0 nil])
([nil nil ((#("Corrupt " 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t) 6 7 (face font-lock-string-face fontified t) 7 8 (face font-lock-string-face fontified t)) . 1212) (undo-tree-id1070 . -7) (undo-tree-id1071 . -8)) nil (26361 7074 816848 10000) 0 nil])
([nil nil ((#("Data " 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t)) . 1212) (undo-tree-id1068 . -4) (undo-tree-id1069 . -5)) nil (26361 7074 816846 858000) 0 nil])
([nil nil ((#("Found" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t)) . 1212) (undo-tree-id1066 . -4) (undo-tree-id1067 . -5)) nil (26361 7074 816845 566000) 0 nil])
([nil nil ((1233 . 1236) (#("p" 0 1 (face font-lock-string-face fontified t)) . -1233) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -1234) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (#("w" 0 1 (face font-lock-string-face fontified t)) . -1235) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) 1236 (1230 . 1236) (#("W" 0 1 (face font-lock-string-face fontified t)) . -1230) (undo-tree-id1064 . -1) 1231 (1230 . 1231) (#("S" 0 1 (face font-lock-string-face fontified t)) . -1230) (undo-tree-id1065 . -1) 1231 (1218 . 1231) (1212 . 1218)) nil (26361 7074 816840 288000) 0 nil])
([nil nil ((1243 . 1244) (1242 . 1243) (1237 . 1242) (1236 . 1237)) nil (26361 7074 816657 425000) 0 nil])
([nil nil ((1244 . 1246)) nil (26361 7074 816656 204000) 0 nil])
([nil nil ((1249 . 1250) (#("d" 0 1 (fontified t)) . -1249) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) 1250 (1248 . 1250) (1247 . 1248)) nil (26361 7074 816651 753000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1260) (t 26361 7074 856803 278000)) nil (26361 7125 91722 640000) 0 nil])
([nil nil ((#("test" 0 4 (face font-lock-function-name-face fontified t)) . 877) (undo-tree-id1143 . -3)) nil (26361 7125 91714 411000) 0 nil])
([nil nil ((877 . 885)) nil (26361 7125 91705 119000) 0 nil])
([nil nil ((#("test" 0 4 (fontified t)) . 846) (undo-tree-id1472 . -3) (undo-tree-id1473 . -4) (t 26361 7125 105357 179000)) nil (26361 7132 365310 415000) 0 nil])
([nil nil ((apply yas--snippet-revive 846 856 #s(yas--snippet nil nil nil 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil nil nil)) (846 . 856) (#("get_data()" 0 10 (fontified nil)) . 846) (846 . 856) (#("get" 0 3 (fontified nil)) . 846) (846 . 849) (#("get_data()" 0 10 (fontified nil)) . -846) (undo-tree-id1379 . -10) (846 . 856) (#("get_data" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . -846) (undo-tree-id1380 . -7) (undo-tree-id1381 . -7) (undo-tree-id1382 . -7) (undo-tree-id1383 . -7) (undo-tree-id1384 . -7) (undo-tree-id1385 . -7) (undo-tree-id1386 . -7) (undo-tree-id1387 . -7) (undo-tree-id1388 . -7) (undo-tree-id1389 . -7) (undo-tree-id1390 . -7) (undo-tree-id1391 . -8) (undo-tree-id1392 . -8) (undo-tree-id1393 . -8) (undo-tree-id1394 . -8) (undo-tree-id1395 . -8) (undo-tree-id1396 . -8) (undo-tree-id1397 . -8) (undo-tree-id1398 . -8) (undo-tree-id1399 . -8) (undo-tree-id1400 . -8) (undo-tree-id1401 . -8) (undo-tree-id1402 . -8) (undo-tree-id1403 . -8) (undo-tree-id1404 . -8) (undo-tree-id1405 . -8) (undo-tree-id1406 . -8) (undo-tree-id1407 . -8) (undo-tree-id1408 . -8) (undo-tree-id1409 . -8) (undo-tree-id1410 . -8) (undo-tree-id1411 . -8) (undo-tree-id1412 . -8) (undo-tree-id1413 . -8) (undo-tree-id1414 . -8) (undo-tree-id1415 . -8) (undo-tree-id1416 . -8) (undo-tree-id1417 . -8) (undo-tree-id1418 . -8) (undo-tree-id1419 . -8) (undo-tree-id1420 . -8) (undo-tree-id1421 . -8) (undo-tree-id1422 . -8) (undo-tree-id1423 . -8) (undo-tree-id1424 . -8) (undo-tree-id1425 . -8) (undo-tree-id1426 . -8) (undo-tree-id1427 . -8) (undo-tree-id1428 . -8) (undo-tree-id1429 . -8) (undo-tree-id1430 . -8) (undo-tree-id1431 . -8) (undo-tree-id1432 . -8) (undo-tree-id1433 . -8) (undo-tree-id1434 . -8) (undo-tree-id1435 . -8) (undo-tree-id1436 . -8) (undo-tree-id1437 . -8) (undo-tree-id1438 . -8) (undo-tree-id1439 . -8) (undo-tree-id1440 . -8) (undo-tree-id1441 . -8) (undo-tree-id1442 . -8) (undo-tree-id1443 . -8) (undo-tree-id1444 . -8) (undo-tree-id1445 . -8) (undo-tree-id1446 . -8) (undo-tree-id1447 . -8) (undo-tree-id1448 . -8) (undo-tree-id1449 . -8) (undo-tree-id1450 . -8) (undo-tree-id1451 . -8) (undo-tree-id1452 . -8) (undo-tree-id1453 . -8) (undo-tree-id1454 . -8) (undo-tree-id1455 . -8) (undo-tree-id1456 . -8) (undo-tree-id1457 . -8) (undo-tree-id1458 . -8) (undo-tree-id1459 . -8) (undo-tree-id1460 . -8) (undo-tree-id1461 . -8) (undo-tree-id1462 . -8) (undo-tree-id1463 . -8) (undo-tree-id1464 . -8) (undo-tree-id1465 . -8) (undo-tree-id1466 . -8) (undo-tree-id1467 . -8) (undo-tree-id1468 . -8) (undo-tree-id1469 . -8) (undo-tree-id1470 . -8) (undo-tree-id1471 . -8) 854 (846 . 854)) nil (26361 7132 365307 370000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-6-face) fontified t)) . -854) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-6-face) fontified t)) . -855) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) 856) nil (26361 7132 365237 122000) 0 nil])
([nil nil ((1769 . 1771) (1756 . 1769) (1752 . 1756) (1748 . 1752) (#("    " 0 4 (fontified nil)) . 1747) (undo-tree-id1542 . -4) (1746 . 1752) (t 26361 7132 404299 236000)) nil (26361 7163 970194 407000) 0 nil])
([nil nil ((1771 . 1772)) nil (26361 7163 970193 133000) 0 nil])
([nil nil ((1788 . 1789) (#("d" 0 1 (face font-lock-variable-name-face fontified t)) . -1788) (undo-tree-id1530 . -1) 1789 (1787 . 1789) (nil fontified nil 1770 . 1787) (nil face (rainbow-delimiters-depth-3-face) 1770 . 1787) (1770 . 1787) (#("Co" 0 2 (fontified nil)) . 1770) (nil fontified nil 1770 . 1772) (nil face (rainbow-delimiters-depth-3-face) 1770 . 1772) (1770 . 1772) (#("CommunicationData" 0 17 (fontified nil)) . -1770) (undo-tree-id1531 . -17) (nil fontified nil 1770 . 1787) (nil face (rainbow-delimiters-depth-3-face) 1770 . 1787) (1770 . 1787) (#("Co" 0 1 (fontified t) 1 2 (fontified t)) . -1770) (undo-tree-id1532 . -2) (undo-tree-id1533 . -2) 1772 (1770 . 1772) (#("c" 0 1 (fontified t)) . -1770) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (#("o" 0 1 (fontified t)) . -1771) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (#("m" 0 1 (fontified t)) . -1772) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (#("m" 0 1 (fontified t)) . -1773) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) 1774 (1770 . 1774)) nil (26361 7163 970190 888000) 0 nil])
([nil nil ((1793 . 1799) (1792 . 1798) (1791 . 1793) (1790 . 1791) (#(";" 0 1 (fontified t)) . -1790) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) 1791) nil (26361 7163 970180 405000) 0 nil])
([nil nil ((#("
      geometry_msgs::msg::Twist message = geometry_msgs::msg::Twist();
      

      message.linear.x = c.x;
      message.linear.y = c.y;
      message.linear.z = c.zz;

      message.angular.z = c.omega;


      
      // auto message = std_msgs::msg::String();
      // message.data = \"Hello\";
      times++;
      if (times == 10000){
	times = 0;
	RCLCPP_INFO(this->get_logger(), \"sent 10000 messages\");
      }

      publ->publish(message);
" 0 7 (fontified t) 7 20 (face font-lock-constant-face fontified t) 20 22 (fontified t) 22 25 (face font-lock-constant-face fontified t) 25 27 (fontified t) 27 31 (face font-lock-type-face fontified t) 31 32 (face font-lock-type-face c-type c-decl-id-start fontified t) 32 33 (fontified t) 33 40 (face font-lock-variable-name-face fontified t) 40 43 (fontified t) 43 56 (face font-lock-constant-face fontified t) 56 58 (fontified t) 58 61 (face font-lock-constant-face fontified t) 61 68 (fontified t) 68 69 (face (rainbow-delimiters-depth-4-face) fontified t) 69 70 (face (rainbow-delimiters-depth-4-face) fontified t) 70 216 (fontified t) 216 222 (fontified t c-is-sws t c-in-sws t) 222 223 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 223 225 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 225 265 (face font-lock-comment-face fontified t c-in-sws t) 265 271 (fontified t c-in-sws t) 271 274 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 274 298 (face font-lock-comment-face fontified t c-in-sws t) 298 304 (fontified t c-in-sws t c-is-sws t) 304 305 (fontified t c-is-sws t) 305 319 (fontified t) 319 321 (face font-lock-keyword-face fontified t) 321 322 (fontified t) 322 323 (face (rainbow-delimiters-depth-4-face) fontified t) 323 337 (fontified t) 337 338 (face (rainbow-delimiters-depth-4-face) fontified t) 338 339 (face (rainbow-delimiters-depth-4-face) fontified t) 339 364 (fontified t) 364 365 (face (rainbow-delimiters-depth-5-face) fontified t) 365 369 (face font-lock-keyword-face fontified t) 369 381 (fontified t) 381 382 (face (rainbow-delimiters-depth-6-face) fontified t) 382 383 (face (rainbow-delimiters-depth-6-face) fontified t) 383 385 (fontified t) 385 406 (face font-lock-string-face fontified t) 406 407 (face (rainbow-delimiters-depth-5-face) fontified t) 407 415 (fontified t) 415 416 (face (rainbow-delimiters-depth-4-face) fontified t) 416 437 (fontified t) 437 438 (face (rainbow-delimiters-depth-4-face) fontified t) 438 445 (fontified t) 445 446 (face (rainbow-delimiters-depth-4-face) fontified t) 446 448 (fontified t)) . 1293) (undo-tree-id1616 . -447) (undo-tree-id1617 . -447) (undo-tree-id1618 . -447) (undo-tree-id1619 . -447) 1740 (t 26361 7164 8066 182000)) nil (26361 7187 274845 438000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1793 . 1794) (nil fontified nil 1346 . 1794) (1346 . 1794) 1345) nil (26361 7187 274844 3000) 0 nil])
([nil nil ((1794 . 1800) (#("     " 0 5 (fontified t)) . 1794) (undo-tree-id1615 . -4)) nil (26361 7187 274843 286000) 0 nil])
([nil nil ((1286 . 1292) (#("      " 0 6 (fontified nil)) . 1285) (undo-tree-id1614 . -6) (1291 . 1292) (1285 . 1291)) nil (26361 7187 274842 415000) 0 nil])
([nil nil ((1286 . 1292) (#("     " 0 5 (fontified nil)) . -1286) (undo-tree-id1572 . -5) (undo-tree-id1573 . -5) (undo-tree-id1574 . -5) (undo-tree-id1575 . -5) (undo-tree-id1576 . -5) (undo-tree-id1577 . -5) (undo-tree-id1578 . -5) (undo-tree-id1579 . -5) (undo-tree-id1580 . -5) (undo-tree-id1581 . -5) (undo-tree-id1582 . -5) (undo-tree-id1583 . -5) (undo-tree-id1584 . -5) (undo-tree-id1585 . -5) (undo-tree-id1586 . -5) (undo-tree-id1587 . -5) (undo-tree-id1588 . -5) (undo-tree-id1589 . -5) (undo-tree-id1590 . -5) (undo-tree-id1591 . -5) (undo-tree-id1592 . -5) (undo-tree-id1593 . -5) (undo-tree-id1594 . -5) (undo-tree-id1595 . -5) (undo-tree-id1596 . -5) (undo-tree-id1597 . -5) (undo-tree-id1598 . -5) (undo-tree-id1599 . -5) (undo-tree-id1600 . -5) (undo-tree-id1601 . -5) (undo-tree-id1602 . -5) (undo-tree-id1603 . -5) (undo-tree-id1604 . -5) (undo-tree-id1605 . -5) (undo-tree-id1606 . -5) (undo-tree-id1607 . -5) (undo-tree-id1608 . -5) (undo-tree-id1609 . -5) (undo-tree-id1610 . -5) (undo-tree-id1611 . -5) (undo-tree-id1612 . -5) (undo-tree-id1613 . -5) (#(" " 0 1 (fontified t)) . 1291)) nil (26361 7187 274840 888000) 0 nil])
([nil nil ((apply yas--snippet-revive 1292 1307 #s(yas--snippet nil (#s(yas--field 1 1305 1306 nil nil nil t nil)) nil 5 nil #s(yas--field 1 1305 1306 nil nil nil t nil) nil nil)) (1305 . 1306) (#("c" 0 1 (fontified nil)) . 1305) (undo-tree-id1543 . -1) (1305 . 1306) (#("c" 0 1 (fontified t)) . -1305) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) 1306 (#("CommunicationData c" 0 19 (fontified nil)) . 1306) (undo-tree-id1567 . -19) (1305 . 1306) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1305 1306 nil nil nil t nil)) nil 5 nil #s(yas--field 1 1305 1306 nil nil nil t nil) nil nil)) (1292 . 1325) (#("publish_data(${1:CommunicationData c})" 0 38 (fontified nil)) . 1292) (1292 . 1330) (#("pu" 0 2 (fontified nil)) . 1292) (1292 . 1294) (#("publish_data(CommunicationData c)" 0 33 (fontified nil)) . -1292) (undo-tree-id1568 . -33) (1292 . 1325) (#("pu" 0 1 (fontified t) 1 2 (fontified t)) . -1292) (undo-tree-id1569 . -2) (undo-tree-id1570 . -2) 1294 (1292 . 1294) (1286 . 1292) (#("     " 0 5 (fontified nil)) . -1286) (undo-tree-id1571 . -5) (#(" " 0 1 (fontified t)) . 1291)) nil (26361 7187 274818 508000) 0 nil])
([nil nil ((1307 . 1308)) nil (26361 7187 274794 615000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1540) (t 26361 7187 286911 630000)) nil (26361 7219 800168 265000) 0 nil])
([nil nil ((#("      message.linear.z = c.zz;
" 0 31 (fontified t)) . 1509) (undo-tree-id1620 . -30)) nil (26361 7219 800165 817000) 0 nil])
([nil nil ((1409 . 1410) (t 26361 7219 839717 205000)) nil (26361 7246 97875 500000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1447 . 1448) (#("
" 0 1 (fontified nil)) . -1513) (1441 . 1514) 1409) nil (26361 7246 97874 963000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1519 . 1520) (#("
" 0 1 (fontified nil)) . -1585) (1513 . 1586) 1448) nil (26361 7246 97874 179000) 0 nil])
([nil nil ((1481 . 1482) (#("3" 0 1 (face font-lock-variable-name-face fontified t)) . -1481) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) 1482 (1481 . 1482) (#("1" 0 1 (face font-lock-variable-name-face fontified t)) . -1481) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) 1482) nil (26361 7246 97871 807000) 0 nil])
([nil nil ((1553 . 1554) (#("1" 0 1 (face font-lock-variable-name-face fontified t)) . -1553) (undo-tree-id1621 . -1) 1554) nil (26361 7246 97846 648000) 0 nil])
([nil nil ((1711 . 1712) (1705 . 1711) (#("linear" 0 6 (fontified nil)) . -1705) (undo-tree-id1664 . -6) (1705 . 1711) (#("li" 0 1 (fontified t) 1 2 (fontified t)) . -1705) (undo-tree-id1665 . -2) (undo-tree-id1666 . -2) 1707 (1704 . 1707) (1696 . 1704) (#("me" 0 2 (fontified nil)) . 1696) (1696 . 1698) (#("message2" 0 8 (fontified nil)) . -1696) (undo-tree-id1667 . -8) (1696 . 1704) (#("mess" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -1696) (undo-tree-id1668 . -4) (undo-tree-id1669 . -4) 1700 (1696 . 1700) (1690 . 1696) (t 26361 7246 132576 787000)) nil (26361 7261 612691 613000) 0 nil])
([nil nil ((1669 . 1670) (1638 . 1639) (1607 . 1608)) nil (26361 7261 612673 831000) 0 nil])
([nil nil ((1721 . 1722) (1720 . 1721) (#("z" 0 1 (fontified t)) . -1720) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (#(";" 0 1 (fontified t)) . -1721) (undo-tree-id1676 . -1) 1722 (1721 . 1722) (1715 . 1721) (t 26361 7261 625500 349000)) nil (26361 7291 891223 206000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1728 . 1729) (#("
" 0 1 (fontified nil)) . -1752) (1722 . 1753) 1721) nil (26361 7291 891219 246000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1758 . 1759) (#("
" 0 1 (fontified nil)) . -1782) (1752 . 1783) 1729) nil (26361 7291 891217 870000) 0 nil])
([nil nil ((1719 . 1721)) nil (26361 7291 891217 321000) 0 nil])
([nil nil ((1751 . 1753)) nil (26361 7291 891216 871000) 0 nil])
([nil nil ((1783 . 1785)) nil (26361 7291 891216 638000) 0 nil])
([nil nil ((1747 . 1748) (#("x" 0 1 (fontified t)) . 1747)) nil (26361 7291 891215 635000) 0 nil])
([nil nil ((1754 . 1755) (#("x" 0 1 (fontified t)) . -1754) (undo-tree-id1673 . -1) 1755) nil (26361 7291 891215 200000) 0 nil])
([nil nil ((1786 . 1787) (#("x" 0 1 (fontified t)) . -1786) (undo-tree-id1672 . -1) 1787) nil (26361 7291 891213 902000) 0 nil])
([nil nil ((1779 . 1780) (#("x" 0 1 (fontified t)) . 1779) (undo-tree-id1670 . -1) (1779 . 1780) (#("x" 0 1 (fontified t)) . 1779) (undo-tree-id1671 . -1)) nil (26361 7291 891210 276000) 0 nil])
([nil nil ((#("      geometry_msgs::msg::Twist message3 = geometry_msgs::msg::Twist();
" 0 5 (fontified t) 5 6 (fontified t rear-nonsticky t) 6 19 (face font-lock-constant-face fontified t) 19 21 (fontified t) 21 24 (face font-lock-constant-face fontified t) 24 26 (fontified t) 26 30 (face font-lock-type-face fontified t) 30 31 (face font-lock-type-face c-type c-decl-id-start fontified t) 31 32 (fontified t) 32 39 (face font-lock-variable-name-face fontified t) 39 40 (face font-lock-variable-name-face fontified t) 40 42 (fontified t) 42 43 (fontified t) 43 56 (face font-lock-constant-face fontified t) 56 58 (fontified t) 58 61 (face font-lock-constant-face fontified t) 61 68 (fontified t) 68 69 (face (rainbow-delimiters-depth-4-face) fontified t) 69 70 (face (rainbow-delimiters-depth-4-face) fontified t) 70 71 (fontified t) 71 72 (fontified t)) . 1514) (undo-tree-id1715 . -71) (undo-tree-id1716 . -22) 1536 (t 26361 7291 902984 102000)) nil (26361 7370 842872 357000) 0 nil])
([nil nil ((1534 . 1536) (1531 . 1534) (#("msg" 0 3 (fontified nil)) . -1531) (undo-tree-id1702 . -3) (1531 . 1534) (#("ms" 0 1 (fontified t) 1 2 (fontified t)) . -1531) (undo-tree-id1703 . -2) (undo-tree-id1704 . -2) 1533 (1531 . 1533) (1515 . 1521) (#("    " 0 4 (fontified nil)) . 1515) (1528 . 1529) (1515 . 1519) (#("      " 0 6 (fontified nil)) . 1515) (undo-tree-id1705 . -6) (1529 . 1530) (1521 . 1529) (#("std_" 0 4 (fontified nil)) . 1521) (1521 . 1525) (#("std_msgs" 0 8 (fontified nil)) . -1521) (undo-tree-id1706 . -8) (1521 . 1529) (#("std_ms" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -1521) (undo-tree-id1707 . -6) (undo-tree-id1708 . -6) 1527 (1526 . 1527) (1525 . 1526) (1524 . 1525) (#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -1524) (undo-tree-id1709 . -1) 1525 (1524 . 1525) (#(")" 0 1 (fontified nil)) . -1524) (1524 . 1525) (#(":" 0 1 (c-type c-decl-end fontified t)) . -1524) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (#(":" 0 1 (fontified t)) . -1525) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) 1526 (1515 . 1521) (#("    " 0 4 (fontified nil)) . 1515) (1523 . 1524) (1515 . 1519) (#("      " 0 6 (fontified nil)) . 1515) (1524 . 1525) (1523 . 1524) (1522 . 1523) (1521 . 1522) (1515 . 1521) (#("      " 0 6 (fontified nil)) . 1514) (undo-tree-id1714 . -6) (1513 . 1521)) nil (26361 7370 842864 901000) 0 nil])
([nil nil ((#("      std_msgs::msg::
" 0 6 (fontified t) 6 14 (face font-lock-constant-face fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 19 (face font-lock-constant-face fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t)) . 1515) (undo-tree-id1697 . -21) (undo-tree-id1698 . 1) (undo-tree-id1699 . 1) (undo-tree-id1700 . -20) (undo-tree-id1701 . -20) 1535) nil (26361 7370 842851 603000) 0 nil])
([nil nil ((356 . 357) (347 . 356) (#("bool.hpp\"" 0 9 (fontified nil c-in-sws t)) . -347) (undo-tree-id1677 . -9) (undo-tree-id1678 . -9) (347 . 356) (#("t" 0 1 (face font-lock-string-face fontified t)) . -347) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) 348 (347 . 348) (343 . 347) (#("ms" 0 2 (fontified nil)) . 343) (343 . 345) (#("msg/" 0 4 (fontified nil)) . -343) (undo-tree-id1681 . -4) (343 . 347) (#("ms" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t)) . -343) (undo-tree-id1682 . -2) (undo-tree-id1683 . -2) 345 (343 . 345) (334 . 343) (#("st\"" 0 2 (fontified nil c-in-sws t) 2 3 (c-in-sws t face font-lock-string-face fontified nil)) . 334) (undo-tree-id1684 . -3) (334 . 336) (#("std_msgs/" 0 9 (fontified nil c-in-sws t)) . -334) (undo-tree-id1685 . -9) (334 . 343) (#("std" 0 1 (face font-lock-string-face c-in-sws t fontified t) 1 2 (face font-lock-string-face c-in-sws t fontified t) 2 3 (face font-lock-string-face c-in-sws t fontified t)) . -334) (undo-tree-id1686 . -3) (undo-tree-id1687 . -3) 337 (334 . 337) (apply yas--snippet-revive 325 335 #s(yas--snippet nil nil #s(yas--exit 334 nil) 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 334 nil) 6 nil nil nil nil)) (325 . 335) (#("include \"$0\"" 0 12 (fontified nil)) . 325) (undo-tree-id1688 . -12) (325 . 337) (#("i" 0 1 (fontified nil c-in-sws t)) . 325) (undo-tree-id1689 . -1) (325 . 326) (#("include \"header\"" 0 16 (fontified nil)) . -325) (undo-tree-id1690 . -16) (undo-tree-id1691 . -16) (325 . 341) (#("incl" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t) 2 3 (face font-lock-preprocessor-face c-in-sws t fontified t) 3 4 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -325) (undo-tree-id1692 . -4) (undo-tree-id1693 . -4) (undo-tree-id1694 . -4) 329 (325 . 329) (324 . 325) (#("$" 0 1 (c-is-sws t fontified t)) . -324) (undo-tree-id1695 . -1) (#("i" 0 1 (fontified t)) . -325) (undo-tree-id1696 . -1) 326 (324 . 326) (323 . 323) (323 . 324)) nil (26361 7370 842839 245000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -1619) (1547 . 1620) 1508 (t 26361 7370 857240 364000)) nil (26361 7386 90000 706000) 0 nil])
([nil nil ((1587 . 1588) (#("2" 0 1 (face font-lock-variable-name-face fontified t)) . -1587) (undo-tree-id1718 . -1) 1588) nil (26361 7386 89999 714000) 0 nil])
([nil nil ((1587 . 1588) (#("2" 0 1 (face font-lock-variable-name-face fontified t)) . -1587) (undo-tree-id1717 . -1) 1588) nil (26361 7386 89995 795000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -1826) (undo-tree-id1855 . -6) 1832 (1826 . 1832) (#("      " 0 6 (fontified nil)) . 1825) (undo-tree-id1856 . -6) (1825 . 1832) (#("      " 0 6 (fontified nil)) . 1824) (undo-tree-id1857 . -6) (1830 . 1831) (t 26361 7386 103353 823000)) nil (26361 7415 701187 771000) 0 nil])
([nil nil ((1855 . 1856) (1853 . 1855) (1846 . 1853) (1840 . 1846) (#("linear" 0 6 (fontified nil)) . -1840) (undo-tree-id1849 . -6) (1840 . 1846) (#("li" 0 1 (fontified t) 1 2 (fontified t)) . -1840) (undo-tree-id1850 . -2) (undo-tree-id1851 . -2) 1842 (1839 . 1842) (1831 . 1839) (#("me" 0 2 (fontified nil)) . 1831) (1831 . 1833) (#("message3" 0 8 (fontified nil)) . -1831) (undo-tree-id1852 . -8) (1831 . 1839) (#("mes" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1831) (undo-tree-id1853 . -3) (undo-tree-id1854 . -3) 1834 (1831 . 1834) (1825 . 1831)) nil (26361 7415 701184 195000) 0 nil])
([nil nil ((1891 . 1892) (1886 . 1891) (#("theta" 0 5 (fontified nil)) . -1886) (undo-tree-id1719 . -5) (1886 . 1891) (#("th" 0 1 (fontified t) 1 2 (fontified t)) . -1886) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -2) (undo-tree-id1752 . -2) (undo-tree-id1753 . -2) (undo-tree-id1754 . -2) (undo-tree-id1755 . -2) (undo-tree-id1756 . -2) (undo-tree-id1757 . -2) (undo-tree-id1758 . -2) (undo-tree-id1759 . -2) (undo-tree-id1760 . -2) (undo-tree-id1761 . -2) (undo-tree-id1762 . -2) (undo-tree-id1763 . -2) (undo-tree-id1764 . -2) (undo-tree-id1765 . -2) (undo-tree-id1766 . -2) (undo-tree-id1767 . -2) (undo-tree-id1768 . -2) (undo-tree-id1769 . -2) (undo-tree-id1770 . -2) (undo-tree-id1771 . -2) (undo-tree-id1772 . -2) (undo-tree-id1773 . -2) (undo-tree-id1774 . -2) (undo-tree-id1775 . -2) (undo-tree-id1776 . -2) (undo-tree-id1777 . -2) (undo-tree-id1778 . -2) (undo-tree-id1779 . -2) (undo-tree-id1780 . -2) (undo-tree-id1781 . -2) (undo-tree-id1782 . -2) (undo-tree-id1783 . -2) (undo-tree-id1784 . -2) (undo-tree-id1785 . -2) (undo-tree-id1786 . -2) (undo-tree-id1787 . -2) (undo-tree-id1788 . -2) (undo-tree-id1789 . -2) (undo-tree-id1790 . -2) (undo-tree-id1791 . -2) (undo-tree-id1792 . -2) (undo-tree-id1793 . -2) (undo-tree-id1794 . -2) (undo-tree-id1795 . -2) (undo-tree-id1796 . -2) (undo-tree-id1797 . -2) (undo-tree-id1798 . -2) (undo-tree-id1799 . -2) (undo-tree-id1800 . -2) (undo-tree-id1801 . -2) (undo-tree-id1802 . -2) (undo-tree-id1803 . -2) (undo-tree-id1804 . -2) (undo-tree-id1805 . -2) (undo-tree-id1806 . -2) (undo-tree-id1807 . -2) (undo-tree-id1808 . -2) (undo-tree-id1809 . -2) (undo-tree-id1810 . -2) (undo-tree-id1811 . -2) (undo-tree-id1812 . -2) (undo-tree-id1813 . -2) (undo-tree-id1814 . -2) (undo-tree-id1815 . -2) (undo-tree-id1816 . -2) (undo-tree-id1817 . -2) (undo-tree-id1818 . -2) (undo-tree-id1819 . -2) (undo-tree-id1820 . -2) (undo-tree-id1821 . -2) (undo-tree-id1822 . -2) (undo-tree-id1823 . -2) (undo-tree-id1824 . -2) (undo-tree-id1825 . -2) (undo-tree-id1826 . -2) (undo-tree-id1827 . -2) (undo-tree-id1828 . -2) (undo-tree-id1829 . -2) (undo-tree-id1830 . -2) (undo-tree-id1831 . -2) 1888 (1884 . 1888) (1881 . 1884) (1880 . 1881) (#("z" 0 1 (fontified t)) . -1880) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) 1881 (1879 . 1881) (1872 . 1879) (#("an" 0 2 (fontified nil)) . 1872) (1872 . 1874) (#("angular" 0 7 (fontified nil)) . -1872) (undo-tree-id1834 . -7) (1872 . 1879) (#("an" 0 1 (fontified t) 1 2 (fontified t)) . -1872) (undo-tree-id1835 . -2) (undo-tree-id1836 . -2) 1874 (1872 . 1874) (#("l" 0 1 (fontified t)) . -1872) (undo-tree-id1837 . -1) (#("i" 0 1 (fontified t)) . -1873) (undo-tree-id1838 . -1) (#("n" 0 1 (fontified t)) . -1874) (undo-tree-id1839 . -1) (#("e" 0 1 (fontified t)) . -1875) (undo-tree-id1840 . -1) (#("a" 0 1 (fontified t)) . -1876) (undo-tree-id1841 . -1) (#("r" 0 1 (fontified t)) . -1877) (undo-tree-id1842 . -1) 1878 (1872 . 1878) (#("linear" 0 6 (fontified nil)) . -1872) (undo-tree-id1843 . -6) (1872 . 1878) (#("li" 0 1 (fontified t) 1 2 (fontified t)) . -1872) (undo-tree-id1844 . -2) (undo-tree-id1845 . -2) 1874 (1871 . 1874) (1863 . 1871) (#("me" 0 2 (fontified nil)) . 1863) (1863 . 1865) (#("message3" 0 8 (fontified nil)) . -1863) (undo-tree-id1846 . -8) (1863 . 1871) (#("me" 0 1 (fontified t) 1 2 (fontified t)) . -1863) (undo-tree-id1847 . -2) (undo-tree-id1848 . -2) 1865 (1863 . 1865) (1856 . 1863)) nil (26361 7415 701171 311000) 0 nil])
([nil nil ((1730 . 1746) (1729 . 1730) (1727 . 1729) (1726 . 1727) (t 26361 7415 714435 691000)) nil (26361 7424 599924 792000) 0 nil])
([nil nil ((1759 . 1766) (1746 . 1759) (t 26361 7424 640043 51000)) nil (26361 7446 83794 855000) 0 nil])
([nil nil ((1953 . 1966) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -1953) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) 1954 (1935 . 1954) (1933 . 1935) (1932 . 1933)) nil (26361 7446 83794 395000) 0 nil])
([nil nil ((#("      " 0 6 (c-is-sws t fontified t)) . -1968) (undo-tree-id1858 . -6) (undo-tree-id1859 . -6) 1974 (1968 . 1974) (#("      " 0 6 (c-in-sws t c-is-sws t fontified nil)) . 1967) (undo-tree-id1860 . -6) (undo-tree-id1861 . -6) (undo-tree-id1862 . -6) (undo-tree-id1863 . -6) (undo-tree-id1864 . -6) (undo-tree-id1865 . -6) (undo-tree-id1866 . -6) (undo-tree-id1867 . -6) (undo-tree-id1868 . -6) (undo-tree-id1869 . -6) (undo-tree-id1870 . -6) (undo-tree-id1871 . -6) (undo-tree-id1872 . -6) (undo-tree-id1873 . -6) (undo-tree-id1874 . -6) (undo-tree-id1875 . -6) (undo-tree-id1876 . -6) (undo-tree-id1877 . -6) (undo-tree-id1878 . -6) (undo-tree-id1879 . -6) (undo-tree-id1880 . -6) (undo-tree-id1881 . -6) (undo-tree-id1882 . -6) (undo-tree-id1883 . -6) (undo-tree-id1884 . -6) (undo-tree-id1885 . -6) (undo-tree-id1886 . -6) (undo-tree-id1887 . -6) (undo-tree-id1888 . -6) (undo-tree-id1889 . -6) (undo-tree-id1890 . -6) (undo-tree-id1891 . -6) (undo-tree-id1892 . -6) (undo-tree-id1893 . -6) (undo-tree-id1894 . -6) (undo-tree-id1895 . -6) (undo-tree-id1896 . -6) (undo-tree-id1897 . -6) (undo-tree-id1898 . -6) (undo-tree-id1899 . -6) (undo-tree-id1900 . -6) (undo-tree-id1901 . -6) (undo-tree-id1902 . -6) (undo-tree-id1903 . -6) (undo-tree-id1904 . -6) (undo-tree-id1905 . -6) (undo-tree-id1906 . -6) (undo-tree-id1907 . -6) (undo-tree-id1908 . -6) (undo-tree-id1909 . -6) (undo-tree-id1910 . -6) (undo-tree-id1911 . -6) (undo-tree-id1912 . -6) (undo-tree-id1913 . -6) (undo-tree-id1914 . -6) (1966 . 1974)) nil (26361 7446 83792 85000) 0 nil])
([nil nil ((1968 . 1974)) nil (26361 7446 83754 111000) 0 nil])
([nil nil ((1975 . 1976) (1969 . 1975) (#("      " 0 6 (c-is-sws t fontified nil)) . 1968) (undo-tree-id1954 . -6) (1968 . 1975) (#("      " 0 6 (c-in-sws t c-is-sws t fontified nil)) . 1967) (undo-tree-id1955 . -6) (1973 . 1974) (1967 . 1973) (t 26361 7446 123468 97000)) nil (26361 7520 418675 884000) 0 nil])
([nil nil ((#("      k
" 0 6 (c-is-sws t fontified t) 6 7 (c-is-sws t fontified t) 7 8 (fontified t)) . 1969) (undo-tree-id1951 . -7) (undo-tree-id1952 . 1) (undo-tree-id1953 . -5) 1974) nil (26361 7520 418674 736000) 0 nil])
([nil nil ((1675 . 1677) (1671 . 1675) (#("Bool" 0 4 (fontified nil)) . -1671) (undo-tree-id1926 . -4) (1671 . 1675) (#("B" 0 1 (fontified t)) . -1671) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) 1672 (1671 . 1672) (1669 . 1671) (1666 . 1669) (#("msg" 0 3 (fontified nil)) . -1666) (undo-tree-id1929 . -3) (1666 . 1669) (#("ms" 0 1 (fontified t) 1 2 (fontified t)) . -1666) (undo-tree-id1930 . -2) (undo-tree-id1931 . -2) 1668 (1666 . 1668) (1664 . 1666) (#(":" 0 1 (fontified t)) . -1664) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (#(":" 0 1 (fontified t)) . -1665) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) 1666 (1664 . 1666) (1656 . 1664) (#("std" 0 3 (fontified nil)) . 1656) (1656 . 1659) (#("std_msgs" 0 8 (fontified nil)) . -1656) (undo-tree-id1936 . -8) (1656 . 1664) (#("std" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1656) (undo-tree-id1937 . -3) (undo-tree-id1938 . -3) 1659 (1658 . 1659) (1657 . 1658) (1653 . 1657) (1646 . 1653) (#("m" 0 1 (fontified t)) . -1646) (undo-tree-id1939 . -1) (#("e" 0 1 (fontified t)) . -1647) (undo-tree-id1940 . -1) 1648 (1645 . 1648) (1641 . 1645) (#("Bool" 0 4 (fontified nil)) . -1641) (undo-tree-id1941 . -4) (1641 . 1645) (#("B" 0 1 (fontified t)) . -1641) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) 1642 (1641 . 1642) (1639 . 1641) (1636 . 1639) (#("msg" 0 3 (fontified nil)) . -1636) (undo-tree-id1944 . -3) (1636 . 1639) (#("ms" 0 1 (fontified t) 1 2 (fontified t)) . -1636) (undo-tree-id1945 . -2) (undo-tree-id1946 . -2) 1638 (1636 . 1638) (1620 . 1626) (#("    " 0 4 (fontified nil)) . 1620) (1633 . 1634) (1620 . 1624) (#("      " 0 6 (fontified nil)) . 1620) (undo-tree-id1947 . -6) (1634 . 1635) (1626 . 1634) (#("std" 0 3 (fontified nil)) . 1626) (1626 . 1629) (#("std_msgs" 0 8 (fontified nil)) . -1626) (undo-tree-id1948 . -8) (1626 . 1634) (#("std_ms" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -1626) (undo-tree-id1949 . -6) (undo-tree-id1950 . -6) 1632 (1629 . 1632) (1628 . 1629) (1627 . 1628) (1626 . 1627) (1620 . 1626)) nil (26361 7520 418669 747000) 0 nil])
([nil nil ((1677 . 1678)) nil (26361 7520 418658 268000) 0 nil])
([nil nil ((2056 . 2061) (2050 . 2056) (#("on_off" 0 6 (fontified nil)) . -2050) (undo-tree-id1919 . -6) (2050 . 2056) (#("on" 0 1 (fontified t) 1 2 (fontified t)) . -2050) (undo-tree-id1920 . -2) (undo-tree-id1921 . -2) 2052 (2048 . 2052) (2047 . 2049) (2044 . 2047) (2040 . 2044) (#("data" 0 4 (fontified nil)) . -2040) (undo-tree-id1922 . -4) (2040 . 2044) (2039 . 2040) (2032 . 2039) (#("bo" 0 1 (fontified nil c-is-sws t) 1 2 (fontified nil)) . 2032) (2032 . 2034) (#("boolmsg" 0 1 (fontified nil c-is-sws t) 1 7 (fontified nil)) . -2032) (undo-tree-id1923 . -7) (2032 . 2039) (#("bo" 0 1 (c-is-sws t fontified t) 1 2 (fontified t)) . -2032) (undo-tree-id1924 . -2) (undo-tree-id1925 . -2) 2034 (2032 . 2034) (2026 . 2032)) nil (26361 7520 418656 127000) 0 nil])
([nil nil ((2077 . 2078) (2071 . 2077) (2070 . 2071) (2062 . 2070) (#(" " 0 1 (fontified t)) . -2062) (undo-tree-id1917 . -1) (#("?" 0 1 (fontified t)) . -2063) (undo-tree-id1918 . -1) 2064 (2062 . 2064)) nil (26361 7520 418647 134000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -2080) (undo-tree-id1963 . -6) 2086 (2080 . 2086) (#("      " 0 6 (fontified nil c-in-sws t c-is-sws t)) . 2079) (undo-tree-id1964 . -6) (2085 . 2086) (t 26361 7520 459023 439000)) nil (26361 7545 289381 145000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2429 . 2430) (#("
" 0 1 (fontified nil)) . -2491) (2425 . 2492) 2360) nil (26361 7545 289378 722000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2495 . 2496) (#("
" 0 1 (fontified nil)) . -2557) (2491 . 2558) 2430) nil (26361 7545 289378 254000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2561 . 2562) (#("
" 0 1 (fontified nil)) . -2623) (2557 . 2624) 2496) nil (26361 7545 289377 100000) 0 nil])
([nil nil ((#("geometry" 0 8 (face font-lock-constant-face fontified t)) . 2580) (undo-tree-id1962 . -7)) nil (26361 7545 289376 438000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-constant-face fontified t)) . 2580)) nil (26361 7545 289375 252000) 0 nil])
([nil nil ((2580 . 2584)) nil (26361 7545 289374 960000) 0 nil])
([nil nil ((#("Twist" 0 5 (fontified t)) . 2595) (undo-tree-id1960 . -4) (undo-tree-id1961 . -5)) nil (26361 7545 289374 271000) 0 nil])
([nil nil ((2595 . 2599) (#("B" 0 1 (fontified nil)) . 2595) (2595 . 2596) (#("Bool" 0 4 (fontified nil)) . -2595) (undo-tree-id1956 . -4) (2595 . 2599) (#("B" 0 1 (fontified t)) . -2595) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) 2596 (2595 . 2596)) nil (26361 7545 289369 307000) 0 nil])
([nil nil ((2424 . 2425) (t 26361 7545 329427 287000)) nil (26361 7557 845464 896000) 0 nil])
([nil nil ((2491 . 2492)) nil (26361 7557 845464 171000) 0 nil])
([nil nil ((2558 . 2559)) nil (26361 7557 845463 644000) 0 nil])
([nil nil ((#("publ" 0 4 (face font-lock-variable-name-face fontified t)) . 2615) (undo-tree-id1965 . -3)) nil (26361 7557 845462 854000) 0 nil])
([nil nil ((2615 . 2623)) nil (26361 7557 845454 167000) 0 nil])
([nil nil ((716 . 717) (t 26361 7557 885114 745000)) nil (26361 7574 416439 150000) 0 nil])
([nil nil ((nil rear-nonsticky nil 788 . 789) (#("
" 0 1 (fontified nil)) . -859) (782 . 860) 716 (t 26361 7574 456000 932000)) nil (26361 7617 828000 718000) 0 nil])
([nil nil ((nil rear-nonsticky nil 865 . 866) (#("
" 0 1 (fontified nil)) . -936) (859 . 937) 789) nil (26361 7617 828000 200000) 0 nil])
([nil nil ((793 . 794) (#("1" 0 1 (fontified t)) . -793) (undo-tree-id1993 . -1) 794) nil (26361 7617 827999 671000) 0 nil])
([nil nil ((870 . 871) (#("2" 0 1 (fontified t)) . -870) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) 871 (870 . 871) (#("1" 0 1 (fontified t)) . -870) (undo-tree-id1992 . -1) 871) nil (26361 7617 827998 256000) 0 nil])
([nil nil ((852 . 853)) nil (26361 7617 827996 477000) 0 nil])
([nil nil ((930 . 931)) nil (26361 7617 827996 229000) 0 nil])
([nil nil ((#("<" 0 1 (face (rainbow-delimiters-depth-5-face) c-<>-c-types-set t category c-<-as-paren-syntax fontified t)) . -999) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) 1000 (#("class ContainerAllocator" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 24 (face font-lock-type-face fontified t)) . 1000) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 999 999 nil nil nil t nil)) nil 8 nil #s(yas--field 1 999 999 nil nil nil t nil) #s(yas--field 1 979 998 nil nil nil t #s(yas--field 2 1000 1015 nil nil nil t #s(yas--field 3 1017 1019 nil nil nil t nil))) nil)) (994 . 1025) (#("Bool_<${1:class ContainerAllocator}>" 0 36 (fontified nil)) . 994) (994 . 1030) (#("Bool_<class ContainerAllocator>" 0 5 (fontified nil) 5 6 (fontified nil c-<>-c-types-set t category c-<-as-paren-syntax) 6 30 (fontified nil) 30 31 (fontified nil category c->-as-paren-syntax)) . -994) (undo-tree-id1971 . -31) (994 . 1025) (#("Bo" 0 1 (fontified t) 1 2 (fontified t)) . -994) (undo-tree-id1972 . -2) (undo-tree-id1973 . -2) 996 (994 . 996) (#("N" 0 1 (fontified t)) . -994) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (#("B" 0 1 (fontified t)) . -995) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) 996 (994 . 996) (992 . 994) (989 . 992) (#("msg" 0 3 (fontified nil)) . -989) (undo-tree-id1978 . -3) (989 . 992) (#("ms" 0 1 (fontified t) 1 2 (fontified t)) . -989) (undo-tree-id1979 . -2) (undo-tree-id1980 . -2) 991 (989 . 991) (987 . 989) (nil c-<>-c-types-set t 979 . 987) (nil fontified nil 979 . 987) (nil face (rainbow-delimiters-depth-4-face) 979 . 987) (979 . 987) (#("std" 0 3 (fontified nil)) . 979) (nil c-<>-c-types-set t 979 . 982) (nil fontified nil 979 . 982) (nil face (rainbow-delimiters-depth-4-face) 979 . 982) (979 . 982) (#("std_msgs" 0 8 (fontified nil)) . -979) (undo-tree-id1981 . -8) (nil c-<>-c-types-set t 979 . 987) (nil fontified nil 979 . 987) (nil face (rainbow-delimiters-depth-4-face) 979 . 987) (979 . 987) (#("std" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -979) (undo-tree-id1982 . -3) (undo-tree-id1983 . -3) 982 (980 . 982) (#("typename MessageT" 0 8 (face font-lock-keyword-face fontified nil) 8 9 (fontified nil) 9 17 (face font-lock-type-face fontified nil)) . 980) (979 . 980) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 979 998 nil nil nil t #s(yas--field 2 1000 1015 nil nil nil t #s(yas--field 3 1017 1019 nil nil nil t nil))) #s(yas--field 2 1000 1015 nil nil nil t #s(yas--field 3 1017 1019 nil nil nil t nil)) #s(yas--field 3 1017 1019 nil nil nil t nil)) nil 7 nil #s(yas--field 3 1017 1019 nil nil nil t nil) nil nil)) (962 . 1052) (#("create_publisher<${1:typename MessageT}>(${2:const std::string &topic_name}, ${3:const rclcpp::QoS &qos})" 0 105 (fontified nil)) . 962) (962 . 1067) (#("create_publisher<typename MessageT>(const std::string &topic_name, const rclcpp::QoS &qos, const PublisherOptionsWithAllocator<AllocatorT> &options = PublisherOptionsWithAllocator<AllocatorT>())" 0 16 (fontified nil) 16 17 (fontified nil c-<>-c-types-set t category c-<-as-paren-syntax) 17 34 (fontified nil) 34 35 (fontified nil category c->-as-paren-syntax) 35 126 (fontified nil) 126 127 (fontified nil c-<>-c-types-set t category c-<-as-paren-syntax) 127 137 (fontified nil) 137 138 (fontified nil category c->-as-paren-syntax) 138 179 (fontified nil) 179 180 (fontified nil c-<>-c-types-set t category c-<-as-paren-syntax) 180 190 (fontified nil) 190 191 (fontified nil category c->-as-paren-syntax) 191 194 (fontified nil)) . -962) (undo-tree-id1984 . -194) (962 . 1156) (#("create" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -962) (undo-tree-id1985 . -6) (undo-tree-id1986 . -6) 968 (962 . 968) (961 . 962) (953 . 961) (945 . 953) (#("boo" 0 3 (fontified nil)) . 945) (945 . 948) (#("boolpubl" 0 8 (fontified nil)) . -945) (undo-tree-id1987 . -8) (945 . 953) (#("boo" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -945) (undo-tree-id1988 . -3) (undo-tree-id1989 . -3) 948 (945 . 948) (938 . 945)) nil (26361 7617 827992 764000) 0 nil])
([nil nil ((apply yas--snippet-revive 994 1000 #s(yas--snippet nil (#s(yas--field 1 999 999 nil nil nil t nil)) nil 8 nil #s(yas--field 1 999 999 nil nil nil t nil) #s(yas--field 1 979 998 nil nil nil t #s(yas--field 2 1000 1015 nil nil nil t #s(yas--field 3 1017 1019 nil nil nil t nil))) nil))) nil (26361 7617 827981 113000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 998) (undo-tree-id1967 . -1)) nil (26361 7617 827980 688000) 0 nil])
([nil nil ((#(">" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . 998) (undo-tree-id1966 . 1)) nil (26361 7617 827978 924000) 0 nil])
([nil nil ((1020 . 1021) (apply yas--snippet-revive 962 1020 #s(yas--snippet nil (#s(yas--field 1 979 998 nil nil nil t #s(yas--field 2 1000 1015 nil nil nil t #s(yas--field 3 1017 1019 nil nil nil t nil))) #s(yas--field 2 1000 1015 nil nil nil t #s(yas--field 3 1017 1019 nil nil nil t nil)) #s(yas--field 3 1017 1019 nil nil nil t nil)) nil 7 nil #s(yas--field 3 1017 1019 nil nil nil t nil) nil nil)) (1018 . 1019) (#("const rclcpp::QoS &qos" 0 5 (face font-lock-keyword-face fontified nil) 5 6 (fontified nil) 6 12 (face font-lock-constant-face fontified nil) 12 14 (fontified nil) 14 17 (face font-lock-type-face fontified nil) 17 19 (fontified nil) 19 22 (face font-lock-variable-name-face fontified nil)) . 1018) (1017 . 1018) (1001 . 1014) (1000 . 1002) (#("\"" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -1000) (#("const std::string &topic_name" 0 5 (face font-lock-keyword-face fontified nil) 5 6 (fontified nil) 6 9 (face font-lock-constant-face fontified nil) 9 11 (fontified nil) 11 16 (face font-lock-type-face fontified nil) 16 17 (face font-lock-type-face c-type c-decl-id-start fontified nil) 17 19 (fontified nil) 19 29 (face font-lock-variable-name-face fontified nil)) . 1001) (1000 . 1001)) nil (26361 7617 827968 626000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -709) (undo-tree-id1998 . -6) 715 (709 . 715) (#("      " 0 6 (fontified nil)) . 708) (undo-tree-id1999 . -6) (708 . 715) (#("      " 0 6 (fontified nil)) . 707) (undo-tree-id2000 . -6) (707 . 714) (#("      " 0 6 (fontified nil)) . 706) (undo-tree-id2001 . -6) (705 . 713) (t 26361 7617 841212 667000)) nil (26361 7651 716546 451000) 0 nil])
([nil nil ((784 . 785) (apply yas--snippet-revive 771 784 #s(yas--snippet nil nil nil 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 9 nil nil nil nil)) (771 . 784) (#("best_effort()" 0 13 (fontified nil)) . 771) (771 . 784) (#("best_effort()" 0 13 (fontified nil)) . -771) (undo-tree-id1994 . -13) (771 . 784) (769 . 771) (204 . 230) (732 . 732) (732 . 743) (#("Q" 0 1 (fontified nil)) . 732) (732 . 733) (#("rclcpp::QoS" 0 11 (fontified nil)) . -732) (undo-tree-id1995 . -11) (732 . 743) (#("Q" 0 1 (fontified t)) . -732) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) 733 (714 . 733) (708 . 714)) nil (26361 7651 716540 501000) 0 nil])
([nil nil ((#("best" 0 4 (fontified t)) . 771) (undo-tree-id2024 . -3) (undo-tree-id2025 . -3) (t 26361 7651 719837 62000)) nil (26361 7689 406936 652000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 771)) nil (26361 7689 406935 337000) 0 nil])
([nil nil ((#("effort" 0 6 (fontified t)) . 771) (undo-tree-id2019 . -5) (undo-tree-id2020 . -2) (undo-tree-id2021 . 3) (undo-tree-id2022 . -2) (undo-tree-id2023 . -2)) nil (26361 7689 406934 679000) 0 nil])
([nil nil ((#("();" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t) 1 2 (face (rainbow-delimiters-depth-4-face) fontified t) 2 3 (fontified t)) . 771) (undo-tree-id2017 . -2) (undo-tree-id2018 . 3)) nil (26361 7689 406931 701000) 0 nil])
([nil nil ((784 . 785) (apply yas--snippet-revive 771 784 #s(yas--snippet nil nil nil 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 10 nil nil nil nil)) (771 . 784) (#("best_effort()" 0 13 (fontified nil)) . 771) (771 . 784) (#("be" 0 2 (fontified nil)) . 771) (771 . 773) (#("best_effort()" 0 13 (fontified nil)) . -771) (undo-tree-id2014 . -13) (771 . 784) (#("bes" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -771) (undo-tree-id2015 . -3) (undo-tree-id2016 . -3) 774 (771 . 774)) nil (26361 7689 406929 981000) 0 nil])
([nil nil ((#("auto " 0 1 (face font-lock-keyword-face fontified t) 1 2 (face font-lock-keyword-face fontified t) 2 3 (face font-lock-keyword-face fontified t) 3 4 (c-type c-decl-id-start face font-lock-keyword-face fontified t) 4 5 (fontified t)) . 740) (undo-tree-id2013 . -4)) nil (26361 7689 406928 169000) 0 nil])
([nil nil ((740 . 741) (#("q" 0 1 (fontified t)) . -740) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) 741 (740 . 741)) nil (26361 7689 406926 685000) 0 nil])
([nil nil ((748 . 751) (#("Q" 0 1 (fontified nil)) . 748) (748 . 749) (#("QoS" 0 3 (fontified nil)) . -748) (undo-tree-id2002 . -3) (748 . 751) (#("Qo" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -748) (undo-tree-id2003 . -2) (undo-tree-id2004 . -2) 750 (748 . 750) (734 . 740) (#("    " 0 4 (fontified nil)) . 734) (745 . 746) (734 . 738) (#("      " 0 6 (fontified nil)) . 734) (undo-tree-id2005 . -6) (undo-tree-id2006 . -6) (undo-tree-id2007 . -6) (746 . 747) (740 . 746) (#("rcl" 0 3 (fontified nil)) . 740) (740 . 743) (#("rclcpp" 0 6 (fontified nil)) . -740) (undo-tree-id2008 . -6) (740 . 746) (#("rcl" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -740) (undo-tree-id2009 . -3) (undo-tree-id2010 . -3) 743 (742 . 743) (740 . 742)) nil (26361 7689 406923 649000) 0 nil])
([nil nil ((751 . 753)) nil (26361 7689 406905 618000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t)) . 752) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (t 26361 7689 447547 678000)) nil (26361 7695 187332 713000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 752) (undo-tree-id2026 . 1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1)) nil (26361 7695 187314 622000) 0 nil])
([nil nil ((#("::" 0 1 (fontified t) 1 2 (fontified t)) . 776) (undo-tree-id2034 . -1) (undo-tree-id2035 . -2) (undo-tree-id2036 . -2) (undo-tree-id2037 . -2) (t 26361 7695 200799 883000)) nil (26361 7735 538067 325000) 0 nil])
([nil nil ((#("best" 0 4 (fontified t)) . 776) (undo-tree-id2033 . -3)) nil (26361 7735 538064 33000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 776)) nil (26361 7735 538062 230000) 0 nil])
([nil nil ((#("effort" 0 6 (fontified t)) . 776) (undo-tree-id2032 . -5)) nil (26361 7735 538061 766000) 0 nil])
([nil nil ((#("();" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t) 1 2 (face (rainbow-delimiters-depth-4-face) fontified t) 2 3 (fontified t)) . 776) (undo-tree-id2031 . -2)) nil (26361 7735 538060 281000) 0 nil])
([nil nil ((776 . 778)) nil (26361 7735 538053 947000) 0 nil])
([nil nil ((778 . 779)) nil (26361 7735 538049 933000) 0 nil])
([nil nil ((811 . 812) (apply yas--snippet-revive 798 811 #s(yas--snippet nil nil nil 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 11 nil nil nil nil)) (798 . 811) (#("best_effort()" 0 13 (fontified nil)) . 798) (798 . 811) (#("best_effort()" 0 13 (fontified nil)) . -798) (undo-tree-id2038 . -13) (798 . 811) (#("be" 0 1 (fontified t) 1 2 (fontified t)) . -798) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -2) (undo-tree-id2076 . -2) (undo-tree-id2077 . -2) (undo-tree-id2078 . -2) (undo-tree-id2079 . -2) (undo-tree-id2080 . -2) (undo-tree-id2081 . -2) (undo-tree-id2082 . -2) (undo-tree-id2083 . -2) (undo-tree-id2084 . -2) (undo-tree-id2085 . -2) (undo-tree-id2086 . -2) (undo-tree-id2087 . -2) (undo-tree-id2088 . -2) (undo-tree-id2089 . -2) (undo-tree-id2090 . -2) (undo-tree-id2091 . -2) (undo-tree-id2092 . -2) (undo-tree-id2093 . -2) (undo-tree-id2094 . -2) (undo-tree-id2095 . -2) (undo-tree-id2096 . -2) (undo-tree-id2097 . -2) (undo-tree-id2098 . -2) (undo-tree-id2099 . -2) (undo-tree-id2100 . -2) (undo-tree-id2101 . -2) (undo-tree-id2102 . -2) (undo-tree-id2103 . -2) (undo-tree-id2104 . -2) (undo-tree-id2105 . -2) (undo-tree-id2106 . -2) (undo-tree-id2107 . -2) (undo-tree-id2108 . -2) (undo-tree-id2109 . -2) (undo-tree-id2110 . -2) (undo-tree-id2111 . -2) (undo-tree-id2112 . -2) (undo-tree-id2113 . -2) (undo-tree-id2114 . -2) (undo-tree-id2115 . -2) (undo-tree-id2116 . -2) (undo-tree-id2117 . -2) (undo-tree-id2118 . -2) (undo-tree-id2119 . -2) (undo-tree-id2120 . -2) (undo-tree-id2121 . -2) (undo-tree-id2122 . -2) (undo-tree-id2123 . -2) (undo-tree-id2124 . -2) (undo-tree-id2125 . -2) (undo-tree-id2126 . -2) (undo-tree-id2127 . -2) (undo-tree-id2128 . -2) (undo-tree-id2129 . -2) (undo-tree-id2130 . -2) (undo-tree-id2131 . -2) (undo-tree-id2132 . -2) (undo-tree-id2133 . -2) (undo-tree-id2134 . -2) (undo-tree-id2135 . -2) (undo-tree-id2136 . -2) (undo-tree-id2137 . -2) (undo-tree-id2138 . -2) (undo-tree-id2139 . -2) (undo-tree-id2140 . -2) (undo-tree-id2141 . -2) (undo-tree-id2142 . -2) (undo-tree-id2143 . -2) (undo-tree-id2144 . -2) (undo-tree-id2145 . -2) 800 (797 . 800) (787 . 797) (#("cu" 0 2 (fontified nil)) . 787) (787 . 789) (#("currentqol" 0 10 (fontified nil)) . -787) (undo-tree-id2146 . -10) (787 . 797) (#("cu" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -787) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -2) (undo-tree-id2229 . -2) (undo-tree-id2230 . -2) (undo-tree-id2231 . -2) (undo-tree-id2232 . -2) (undo-tree-id2233 . -2) (undo-tree-id2234 . -2) (undo-tree-id2235 . -2) (undo-tree-id2236 . -2) (undo-tree-id2237 . -2) (undo-tree-id2238 . -2) (undo-tree-id2239 . -2) (undo-tree-id2240 . -2) (undo-tree-id2241 . -2) (undo-tree-id2242 . -2) (undo-tree-id2243 . -2) (undo-tree-id2244 . -2) (undo-tree-id2245 . -2) (undo-tree-id2246 . -2) (undo-tree-id2247 . -2) (undo-tree-id2248 . -2) (undo-tree-id2249 . -2) (undo-tree-id2250 . -2) (undo-tree-id2251 . -2) (undo-tree-id2252 . -2) (undo-tree-id2253 . -2) (undo-tree-id2254 . -2) (undo-tree-id2255 . -2) (undo-tree-id2256 . -2) (undo-tree-id2257 . -2) (undo-tree-id2258 . -2) (undo-tree-id2259 . -2) (undo-tree-id2260 . -2) (undo-tree-id2261 . -2) (undo-tree-id2262 . -2) (undo-tree-id2263 . -2) (undo-tree-id2264 . -2) (undo-tree-id2265 . -2) (undo-tree-id2266 . -2) (undo-tree-id2267 . -2) (undo-tree-id2268 . -2) (undo-tree-id2269 . -2) (undo-tree-id2270 . -2) (undo-tree-id2271 . -2) (undo-tree-id2272 . -2) (undo-tree-id2273 . -2) (undo-tree-id2274 . -2) (undo-tree-id2275 . -2) (undo-tree-id2276 . -2) (undo-tree-id2277 . -2) (undo-tree-id2278 . -2) (undo-tree-id2279 . -2) (undo-tree-id2280 . -2) (undo-tree-id2281 . -2) (undo-tree-id2282 . -2) (undo-tree-id2283 . -2) (undo-tree-id2284 . -2) (undo-tree-id2285 . -2) (undo-tree-id2286 . -2) (undo-tree-id2287 . -2) (undo-tree-id2288 . -2) (undo-tree-id2289 . -2) (undo-tree-id2290 . -2) (undo-tree-id2291 . -2) (undo-tree-id2292 . -2) (undo-tree-id2293 . -2) (undo-tree-id2294 . -2) (undo-tree-id2295 . -2) (undo-tree-id2296 . -2) (undo-tree-id2297 . -2) (undo-tree-id2298 . -2) (undo-tree-id2299 . -2) (undo-tree-id2300 . -2) (undo-tree-id2301 . -2) (undo-tree-id2302 . -2) (undo-tree-id2303 . -2) (undo-tree-id2304 . -2) (undo-tree-id2305 . -2) (undo-tree-id2306 . -2) (undo-tree-id2307 . -2) (undo-tree-id2308 . -2) (undo-tree-id2309 . -2) (undo-tree-id2310 . -2) (undo-tree-id2311 . -2) 789 (787 . 789) (781 . 787) (#("      " 0 6 (fontified nil)) . 780) (undo-tree-id2312 . -6) (undo-tree-id2313 . -6) (undo-tree-id2314 . -6) (undo-tree-id2315 . -6) (undo-tree-id2316 . -6) (undo-tree-id2317 . -6) (undo-tree-id2318 . -6) (undo-tree-id2319 . -6) (undo-tree-id2320 . -6) (undo-tree-id2321 . -6) (undo-tree-id2322 . -6) (undo-tree-id2323 . -6) (undo-tree-id2324 . -6) (undo-tree-id2325 . -6) (undo-tree-id2326 . -6) (undo-tree-id2327 . -6) (undo-tree-id2328 . -6) (undo-tree-id2329 . -6) (undo-tree-id2330 . -6) (undo-tree-id2331 . -6) (undo-tree-id2332 . -6) (undo-tree-id2333 . -6) (undo-tree-id2334 . -6) (undo-tree-id2335 . -6) (undo-tree-id2336 . -6) (undo-tree-id2337 . -6) (undo-tree-id2338 . -6) (undo-tree-id2339 . -6) (undo-tree-id2340 . -6) (undo-tree-id2341 . -6) (undo-tree-id2342 . -6) (undo-tree-id2343 . -6) (undo-tree-id2344 . -6) (undo-tree-id2345 . -6) (undo-tree-id2346 . -6) (undo-tree-id2347 . -6) (undo-tree-id2348 . -6) (undo-tree-id2349 . -6) (undo-tree-id2350 . -6) (undo-tree-id2351 . -6) (undo-tree-id2352 . -6) (undo-tree-id2353 . -6) (undo-tree-id2354 . -6) (undo-tree-id2355 . -6) (undo-tree-id2356 . -6) (undo-tree-id2357 . -6) (undo-tree-id2358 . -6) (undo-tree-id2359 . -6) (undo-tree-id2360 . -6) (undo-tree-id2361 . -6) (undo-tree-id2362 . -6) (undo-tree-id2363 . -6) (undo-tree-id2364 . -6) (undo-tree-id2365 . -6) (undo-tree-id2366 . -6) (undo-tree-id2367 . -6) (undo-tree-id2368 . -6) (undo-tree-id2369 . -6) (undo-tree-id2370 . -6) (undo-tree-id2371 . -6) (undo-tree-id2372 . -6) (undo-tree-id2373 . -6) (undo-tree-id2374 . -6) (undo-tree-id2375 . -6) (undo-tree-id2376 . -6) (undo-tree-id2377 . -6) (undo-tree-id2378 . -6) (undo-tree-id2379 . -6) (undo-tree-id2380 . -6) (undo-tree-id2381 . -6) (undo-tree-id2382 . -6) (undo-tree-id2383 . -6) (undo-tree-id2384 . -6) (undo-tree-id2385 . -6) (undo-tree-id2386 . -6) (undo-tree-id2387 . -6) (undo-tree-id2388 . -6) (undo-tree-id2389 . -6) (undo-tree-id2390 . -6) (undo-tree-id2391 . -6) (undo-tree-id2392 . -6) (undo-tree-id2393 . -6) (undo-tree-id2394 . -6) (undo-tree-id2395 . -6) (undo-tree-id2396 . -6) (undo-tree-id2397 . -6) (undo-tree-id2398 . -6) (undo-tree-id2399 . -6) (undo-tree-id2400 . -6) (undo-tree-id2401 . -6) (undo-tree-id2402 . -6) (undo-tree-id2403 . -6) (undo-tree-id2404 . -6) (undo-tree-id2405 . -6) (undo-tree-id2406 . -6) (undo-tree-id2407 . -6) (779 . 787) (t 26361 7735 578508 886000)) nil (26361 7741 354126 701000) 0 nil])
([nil nil ((883 . 884) (t 26361 7741 393746 508000)) nil (26361 7815 127251 474000) 0 nil])
([nil nil ((2643 . 2644)) nil (26361 7815 127250 964000) 0 nil])
([nil nil ((2661 . 2662)) nil (26361 7815 127250 574000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2670 . 2671) (#("
" 0 1 (fontified nil rear-nonsticky t)) . -2696) (2664 . 2697) 2661) nil (26361 7815 127250 108000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2702 . 2703) (#("
" 0 1 (fontified nil rear-nonsticky t)) . -2728) (2696 . 2729) 2671) nil (26361 7815 127249 401000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2734 . 2735) (#("
" 0 1 (fontified nil rear-nonsticky t)) . -2760) (2728 . 2761) 2703) nil (26361 7815 127248 605000) 0 nil])
([nil nil ((nil fontified nil 2693 . 2694) (#("1" 0 1 (fontified nil)) . -2693) (2694 . 2695) (nil fontified t 2675 . 2676) (#("1" 0 1 (fontified t)) . -2675) (2676 . 2677)) nil (26361 7815 127247 681000) 0 nil])
([nil nil ((2707 . 2708) (#("2" 0 1 (fontified t)) . 2707) (undo-tree-id2599 . -1) (2707 . 2708) (#("1" 0 1 (fontified t)) . 2707)) nil (26361 7815 127245 815000) 0 nil])
([nil nil ((2725 . 2726) (#("1" 0 1 (fontified t)) . -2725) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) 2726) nil (26361 7815 127244 223000) 0 nil])
([nil nil ((#("      publ1->publish(message1);
" 0 5 (fontified t) 5 6 (fontified t rear-nonsticky t) 6 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-4-face) fontified t) 21 28 (fontified t) 28 29 (fontified t) 29 30 (face (rainbow-delimiters-depth-4-face) fontified t) 30 31 (fontified t) 31 32 (fontified t rear-nonsticky t)) . 2729) (undo-tree-id2533 . -31) (undo-tree-id2534 . -28) (undo-tree-id2535 . -28) (undo-tree-id2536 . -28) (undo-tree-id2537 . -28) (undo-tree-id2538 . -28) (undo-tree-id2539 . -28) (undo-tree-id2540 . -28) (undo-tree-id2541 . -28) (undo-tree-id2542 . -28) (undo-tree-id2543 . -28) (undo-tree-id2544 . -28) (undo-tree-id2545 . -28) (undo-tree-id2546 . -28) (undo-tree-id2547 . -28) (undo-tree-id2548 . -28) (undo-tree-id2549 . -28) (undo-tree-id2550 . -28) (undo-tree-id2551 . -28) (undo-tree-id2552 . -28) (undo-tree-id2553 . -28) (undo-tree-id2554 . -28) (undo-tree-id2555 . -28) (undo-tree-id2556 . -28) (undo-tree-id2557 . -28) (undo-tree-id2558 . -28) (undo-tree-id2559 . -28) (undo-tree-id2560 . -28) (undo-tree-id2561 . -28) (undo-tree-id2562 . -28) (undo-tree-id2563 . -28) (undo-tree-id2564 . -28) (undo-tree-id2565 . -28) (undo-tree-id2566 . -28) (undo-tree-id2567 . -28) (undo-tree-id2568 . -28) (undo-tree-id2569 . -28) (undo-tree-id2570 . -28) (undo-tree-id2571 . -28) (undo-tree-id2572 . -28) (undo-tree-id2573 . -28) (undo-tree-id2574 . -28) (undo-tree-id2575 . -28) (undo-tree-id2576 . -28) (undo-tree-id2577 . -28) (undo-tree-id2578 . -28) (undo-tree-id2579 . -28) (undo-tree-id2580 . -28) (undo-tree-id2581 . -28) (undo-tree-id2582 . -28) (undo-tree-id2583 . -28) (undo-tree-id2584 . -28) (undo-tree-id2585 . -28) (undo-tree-id2586 . -28) (undo-tree-id2587 . -28) (undo-tree-id2588 . -28) (undo-tree-id2589 . -32) 2757) nil (26361 7815 127235 661000) 0 nil])
([nil nil ((2754 . 2761) (#("b" 0 1 (fontified nil)) . 2754) (2754 . 2755) (#("boolmsg" 0 7 (fontified nil)) . -2754) (undo-tree-id2408 . -7) (2754 . 2761) (#("b" 0 1 (fontified t)) . -2754) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) 2755 (2754 . 2755) (2753 . 2755) (2748 . 2753) (2746 . 2748) (2745 . 2746) (2744 . 2745) (#(" " 0 1 (fontified t)) . -2744) (undo-tree-id2528 . -1) 2745 (2744 . 2745) (2736 . 2744) (#("bo" 0 2 (fontified nil)) . 2736) (2736 . 2738) (#("boolpubl" 0 8 (fontified nil)) . -2736) (undo-tree-id2529 . -8) (2736 . 2744) (#("boo" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -2736) (undo-tree-id2530 . -3) (undo-tree-id2531 . -3) 2739 (2736 . 2739) (2730 . 2736) (#("      " 0 6 (fontified nil)) . 2729) (undo-tree-id2532 . -6) (2728 . 2736)) nil (26361 7815 126880 584000) 0 nil])
([nil nil ((2762 . 2763)) nil (26361 7815 126793 599000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t c-in-sws t)) . -382) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) 383 (t 26361 7815 167589 22000)) nil (26361 7830 12556 834000) 0 nil])
([nil nil ((apply -6 733 897 undo--wrap-and-run-primitive-undo 733 897 ((789 . 792) (739 . 742) 733))) nil (26361 7833 815696 423000) 0 nil])
([nil nil ((apply 3 733 780 undo--wrap-and-run-primitive-undo 733 780 ((#("// " 0 1 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 1 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -739) 733))) nil (26361 8157 895087 316000) 0 nil])
([nil nil ((#("rclcpp::QoS();" 0 6 (face font-lock-constant-face fontified t) 6 8 (fontified t) 8 11 (fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (face (rainbow-delimiters-depth-4-face) fontified t) 13 14 (fontified t)) . 764) (undo-tree-id2636 . -12) (undo-tree-id2637 . -7)) nil (26361 8157 895086 758000) 0 nil])
([nil nil ((775 . 777) (#(":" 0 1 (fontified t)) . -775) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) (#(":" 0 1 (fontified t)) . -776) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) (#("n" 0 1 (fontified t)) . -777) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (#("e" 0 1 (fontified t)) . -778) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (#("w" 0 1 (face font-lock-keyword-face fontified t)) . -779) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) 780 (777 . 780) (775 . 777) (772 . 775) (#("Q" 0 1 (fontified nil)) . 772) (772 . 773) (#("QoS" 0 3 (fontified nil)) . -772) (undo-tree-id2629 . -3) (772 . 775) (#("Q" 0 1 (fontified t)) . -772) (undo-tree-id2630 . -1) (undo-tree-id2631 . -1) 773 (772 . 773) (770 . 772) (#(":" 0 1 (fontified t)) . -770) (undo-tree-id2632 . -1) 771 (770 . 771) (764 . 770) (#("rcl" 0 3 (fontified nil)) . 764) (764 . 767) (#("rclcpp" 0 6 (fontified nil)) . -764) (undo-tree-id2633 . -6) (764 . 770) (#("rcl" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -764) (undo-tree-id2634 . -3) (undo-tree-id2635 . -3) 767 (764 . 767)) nil (26361 8157 895083 627000) 0 nil])
([nil nil ((777 . 778)) nil (26361 8157 895059 729000) 0 nil])
([nil nil ((776 . 778) (#("0" 0 1 (fontified t)) . -776) (undo-tree-id2638 . -1) 777 (776 . 777) (t 26361 8157 935572 6000)) nil (26361 8198 768647 414000) 0 nil])
([nil nil ((811 . 812) (apply yas--snippet-revive 798 811 #s(yas--snippet nil nil nil 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 12 nil nil nil nil)) (798 . 811) (#("best_effort()" 0 13 (fontified nil)) . 798) (798 . 811) (#("best_effort()" 0 13 (fontified nil)) . -798) (undo-tree-id2639 . -13) (798 . 811) (#("be" 0 1 (fontified t) 1 2 (fontified t)) . -798) (undo-tree-id2640 . -2) (undo-tree-id2641 . -2) 800 (797 . 800) (787 . 797) (#("cu" 0 2 (fontified nil)) . 787) (787 . 789) (#("currentqol" 0 10 (fontified nil)) . -787) (undo-tree-id2642 . -10) (787 . 797) (#("cu" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -787) (undo-tree-id2643 . -2) (undo-tree-id2644 . -2) 789 (787 . 789) (780 . 787) (t 26361 8198 782499 217000)) nil (26361 8239 484080 68000) 0 nil])
([nil nil ((#("10" 0 2 (fontified t)) . 923) (undo-tree-id2949 . -1) (t 26361 8239 524382 404000)) nil (26361 8291 493651 723000) 0 nil])
([nil nil ((#("10" 0 2 (fontified t)) . 999) (undo-tree-id2948 . -1)) nil (26361 8291 493651 19000) 0 nil])
([nil nil ((#("10" 0 2 (fontified t)) . 1075) (undo-tree-id2947 . -1)) nil (26361 8291 493650 453000) 0 nil])
([nil nil ((#("10" 0 1 (fontified t) 1 2 (fontified t)) . 1156) (undo-tree-id2946 . -1)) nil (26361 8291 493649 750000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -924) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (#("u" 0 1 (fontified t)) . -925) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) 926 (924 . 926)) nil (26361 8291 493648 977000) 0 nil])
([nil nil ((923 . 933) (#("cu" 0 2 (fontified nil)) . 923) (923 . 925) (#("currentqol" 0 10 (fontified nil)) . -923) (undo-tree-id2939 . -10) (923 . 933) (#("cu" 0 1 (fontified t) 1 2 (fontified t)) . -923) (undo-tree-id2940 . -2) (undo-tree-id2941 . -2) 925 (923 . 925)) nil (26361 8291 493647 146000) 0 nil])
([nil nil ((1009 . 1019) (#("cu" 0 2 (fontified nil)) . 1009) (1009 . 1011) (#("currentqol" 0 10 (fontified nil)) . -1009) (undo-tree-id2936 . -10) (1009 . 1019) (#("cu" 0 1 (fontified t) 1 2 (fontified t)) . -1009) (undo-tree-id2937 . -2) (undo-tree-id2938 . -2) 1011 (1009 . 1011)) nil (26361 8291 493645 15000) 0 nil])
([nil nil ((1095 . 1105) (#("cu" 0 2 (fontified nil)) . 1095) (1095 . 1097) (#("currentqol" 0 10 (fontified nil)) . -1095) (undo-tree-id2693 . -10) (1095 . 1105) (#("cu" 0 1 (fontified t) 1 2 (fontified t)) . -1095) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) (undo-tree-id2735 . -1) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -2) (undo-tree-id2753 . -2) (undo-tree-id2754 . -2) (undo-tree-id2755 . -2) (undo-tree-id2756 . -2) (undo-tree-id2757 . -2) (undo-tree-id2758 . -2) (undo-tree-id2759 . -2) (undo-tree-id2760 . -2) (undo-tree-id2761 . -2) (undo-tree-id2762 . -2) (undo-tree-id2763 . -2) (undo-tree-id2764 . -2) (undo-tree-id2765 . -2) (undo-tree-id2766 . -2) (undo-tree-id2767 . -2) (undo-tree-id2768 . -2) (undo-tree-id2769 . -2) (undo-tree-id2770 . -2) (undo-tree-id2771 . -2) (undo-tree-id2772 . -2) (undo-tree-id2773 . -2) (undo-tree-id2774 . -2) (undo-tree-id2775 . -2) (undo-tree-id2776 . -2) (undo-tree-id2777 . -2) (undo-tree-id2778 . -2) (undo-tree-id2779 . -2) (undo-tree-id2780 . -2) (undo-tree-id2781 . -2) (undo-tree-id2782 . -2) (undo-tree-id2783 . -2) (undo-tree-id2784 . -2) (undo-tree-id2785 . -2) (undo-tree-id2786 . -2) (undo-tree-id2787 . -2) (undo-tree-id2788 . -2) (undo-tree-id2789 . -2) (undo-tree-id2790 . -2) (undo-tree-id2791 . -2) (undo-tree-id2792 . -2) (undo-tree-id2793 . -2) (undo-tree-id2794 . -2) (undo-tree-id2795 . -2) (undo-tree-id2796 . -2) (undo-tree-id2797 . -2) (undo-tree-id2798 . -2) (undo-tree-id2799 . -2) (undo-tree-id2800 . -2) (undo-tree-id2801 . -2) (undo-tree-id2802 . -2) (undo-tree-id2803 . -2) (undo-tree-id2804 . -2) (undo-tree-id2805 . -2) (undo-tree-id2806 . -2) (undo-tree-id2807 . -2) (undo-tree-id2808 . -2) (undo-tree-id2809 . -2) (undo-tree-id2810 . -2) (undo-tree-id2811 . -2) (undo-tree-id2812 . -2) (undo-tree-id2813 . -2) (undo-tree-id2814 . -2) (undo-tree-id2815 . -2) (undo-tree-id2816 . -2) (undo-tree-id2817 . -2) (undo-tree-id2818 . -2) (undo-tree-id2819 . -2) (undo-tree-id2820 . -2) (undo-tree-id2821 . -2) (undo-tree-id2822 . -2) (undo-tree-id2823 . -2) (undo-tree-id2824 . -2) (undo-tree-id2825 . -2) (undo-tree-id2826 . -2) (undo-tree-id2827 . -2) (undo-tree-id2828 . -2) (undo-tree-id2829 . -2) (undo-tree-id2830 . -2) (undo-tree-id2831 . -2) (undo-tree-id2832 . -2) (undo-tree-id2833 . -2) (undo-tree-id2834 . -2) (undo-tree-id2835 . -2) (undo-tree-id2836 . -2) (undo-tree-id2837 . -2) (undo-tree-id2838 . -2) (undo-tree-id2839 . -2) (undo-tree-id2840 . -2) (undo-tree-id2841 . -2) (undo-tree-id2842 . -2) (undo-tree-id2843 . -2) (undo-tree-id2844 . -2) (undo-tree-id2845 . -2) (undo-tree-id2846 . -2) (undo-tree-id2847 . -2) (undo-tree-id2848 . -2) (undo-tree-id2849 . -2) (undo-tree-id2850 . -2) (undo-tree-id2851 . -2) (undo-tree-id2852 . -2) (undo-tree-id2853 . -2) (undo-tree-id2854 . -2) (undo-tree-id2855 . -2) (undo-tree-id2856 . -2) (undo-tree-id2857 . -2) (undo-tree-id2858 . -2) (undo-tree-id2859 . -2) (undo-tree-id2860 . -2) (undo-tree-id2861 . -2) (undo-tree-id2862 . -2) (undo-tree-id2863 . -2) (undo-tree-id2864 . -2) (undo-tree-id2865 . -2) (undo-tree-id2866 . -2) (undo-tree-id2867 . -2) (undo-tree-id2868 . -2) (undo-tree-id2869 . -2) (undo-tree-id2870 . -2) (undo-tree-id2871 . -2) (undo-tree-id2872 . -2) (undo-tree-id2873 . -2) (undo-tree-id2874 . -2) (undo-tree-id2875 . -2) (undo-tree-id2876 . -2) (undo-tree-id2877 . -2) (undo-tree-id2878 . -2) (undo-tree-id2879 . -2) (undo-tree-id2880 . -2) (undo-tree-id2881 . -2) (undo-tree-id2882 . -2) (undo-tree-id2883 . -2) (undo-tree-id2884 . -2) (undo-tree-id2885 . -2) (undo-tree-id2886 . -2) (undo-tree-id2887 . -2) (undo-tree-id2888 . -2) (undo-tree-id2889 . -2) (undo-tree-id2890 . -2) (undo-tree-id2891 . -2) (undo-tree-id2892 . -2) (undo-tree-id2893 . -2) (undo-tree-id2894 . -2) (undo-tree-id2895 . -2) (undo-tree-id2896 . -2) (undo-tree-id2897 . -2) (undo-tree-id2898 . -2) (undo-tree-id2899 . -2) (undo-tree-id2900 . -2) (undo-tree-id2901 . -2) (undo-tree-id2902 . -2) (undo-tree-id2903 . -2) (undo-tree-id2904 . -2) (undo-tree-id2905 . -2) (undo-tree-id2906 . -2) (undo-tree-id2907 . -2) (undo-tree-id2908 . -2) (undo-tree-id2909 . -2) (undo-tree-id2910 . -2) (undo-tree-id2911 . -2) (undo-tree-id2912 . -2) (undo-tree-id2913 . -2) (undo-tree-id2914 . -2) (undo-tree-id2915 . -2) (undo-tree-id2916 . -2) (undo-tree-id2917 . -2) (undo-tree-id2918 . -2) (undo-tree-id2919 . -2) (undo-tree-id2920 . -2) (undo-tree-id2921 . -2) (undo-tree-id2922 . -2) (undo-tree-id2923 . -2) (undo-tree-id2924 . -2) (undo-tree-id2925 . -2) (undo-tree-id2926 . -2) (undo-tree-id2927 . -2) (undo-tree-id2928 . -2) (undo-tree-id2929 . -2) (undo-tree-id2930 . -2) (undo-tree-id2931 . -2) (undo-tree-id2932 . -2) (undo-tree-id2933 . -2) (undo-tree-id2934 . -2) (undo-tree-id2935 . -2) 1097 (1095 . 1097)) nil (26361 8291 493639 59000) 0 nil])
([nil nil ((1186 . 1196) (#("cu" 0 2 (fontified nil)) . 1186) (1186 . 1188) (#("currentqol" 0 10 (fontified nil)) . -1186) (undo-tree-id2645 . -10) (1186 . 1196) (#("cu" 0 1 (fontified t) 1 2 (fontified t)) . -1186) (undo-tree-id2646 . -2) (undo-tree-id2647 . -2) (undo-tree-id2648 . -2) (undo-tree-id2649 . -2) (undo-tree-id2650 . -2) (undo-tree-id2651 . -2) (undo-tree-id2652 . -2) (undo-tree-id2653 . -2) (undo-tree-id2654 . -2) (undo-tree-id2655 . -2) (undo-tree-id2656 . -2) (undo-tree-id2657 . -2) (undo-tree-id2658 . -2) (undo-tree-id2659 . -2) (undo-tree-id2660 . -2) (undo-tree-id2661 . -2) (undo-tree-id2662 . -2) (undo-tree-id2663 . -2) (undo-tree-id2664 . -2) (undo-tree-id2665 . -2) (undo-tree-id2666 . -2) (undo-tree-id2667 . -2) (undo-tree-id2668 . -2) (undo-tree-id2669 . -2) (undo-tree-id2670 . -2) (undo-tree-id2671 . -2) (undo-tree-id2672 . -2) (undo-tree-id2673 . -2) (undo-tree-id2674 . -2) (undo-tree-id2675 . -2) (undo-tree-id2676 . -2) (undo-tree-id2677 . -2) (undo-tree-id2678 . -2) (undo-tree-id2679 . -2) (undo-tree-id2680 . -2) (undo-tree-id2681 . -2) (undo-tree-id2682 . -2) (undo-tree-id2683 . -2) (undo-tree-id2684 . -2) (undo-tree-id2685 . -2) (undo-tree-id2686 . -2) (undo-tree-id2687 . -2) (undo-tree-id2688 . -2) (undo-tree-id2689 . -2) (undo-tree-id2690 . -2) (undo-tree-id2691 . -2) (undo-tree-id2692 . -2) 1188 (1186 . 1188)) nil (26361 8291 493505 640000) 0 nil])
([nil nil ((2906 . 2911) (2905 . 2906) (2884 . 2905) (2882 . 2884) (2877 . 2882) (#(" " 0 1 (fontified t)) . -2877) (undo-tree-id3173 . -1) 2878 (2877 . 2878) (t 26361 8291 534454 473000)) nil (26361 8583 527695 133000) 0 nil])
([nil nil ((#("    
" 0 4 (c-in-sws t c-is-sws t fontified t) 4 5 (c-is-sws t fontified t)) . 2907) (undo-tree-id3169 . -4) (undo-tree-id3170 . 1) (undo-tree-id3171 . 1) (undo-tree-id3172 . -3) 2910) nil (26361 8583 527693 598000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3173) (undo-tree-id3016 . -4) (undo-tree-id3017 . -4) (undo-tree-id3018 . -4) (undo-tree-id3019 . -4) (undo-tree-id3020 . -4) (undo-tree-id3021 . -4) (undo-tree-id3022 . -4) (undo-tree-id3023 . -4) (undo-tree-id3024 . -4) (undo-tree-id3025 . -4) (undo-tree-id3026 . -4) (undo-tree-id3027 . -4) (undo-tree-id3028 . -4) (undo-tree-id3029 . -4) (undo-tree-id3030 . -4) (undo-tree-id3031 . -4) (undo-tree-id3032 . -4) (undo-tree-id3033 . -4) (undo-tree-id3034 . -4) (undo-tree-id3035 . -4) (undo-tree-id3036 . -4) (undo-tree-id3037 . -4) (undo-tree-id3038 . -4) (undo-tree-id3039 . -4) (undo-tree-id3040 . -4) (undo-tree-id3041 . -4) (undo-tree-id3042 . -4) (undo-tree-id3043 . -4) (undo-tree-id3044 . -4) (undo-tree-id3045 . -4) (undo-tree-id3046 . -4) (undo-tree-id3047 . -4) (undo-tree-id3048 . -4) (undo-tree-id3049 . -4) (undo-tree-id3050 . -4) (undo-tree-id3051 . -4) (undo-tree-id3052 . -4) (undo-tree-id3053 . -4) (undo-tree-id3054 . -4) (undo-tree-id3055 . -4) (undo-tree-id3056 . -4) (undo-tree-id3057 . -4) (undo-tree-id3058 . -4) (undo-tree-id3059 . -4) (undo-tree-id3060 . -4) (undo-tree-id3061 . -4) (undo-tree-id3062 . -4) (undo-tree-id3063 . -4) (undo-tree-id3064 . -4) (undo-tree-id3065 . -4) (undo-tree-id3066 . -4) (undo-tree-id3067 . -4) (undo-tree-id3068 . -4) (undo-tree-id3069 . -4) (undo-tree-id3070 . -4) (undo-tree-id3071 . -4) (undo-tree-id3072 . -4) (undo-tree-id3073 . -4) (undo-tree-id3074 . -4) (undo-tree-id3075 . -4) (undo-tree-id3076 . -4) (undo-tree-id3077 . -4) (undo-tree-id3078 . -4) (undo-tree-id3079 . -4) (undo-tree-id3080 . -4) (undo-tree-id3081 . -4) (undo-tree-id3082 . -4) (undo-tree-id3083 . -4) (undo-tree-id3084 . -4) (undo-tree-id3085 . -4) (undo-tree-id3086 . -4) (undo-tree-id3087 . -4) (undo-tree-id3088 . -4) (undo-tree-id3089 . -4) (undo-tree-id3090 . -4) (undo-tree-id3091 . -4) (undo-tree-id3092 . -4) (undo-tree-id3093 . -4) (undo-tree-id3094 . -4) (undo-tree-id3095 . -4) 3177 (3173 . 3177) (#("    " 0 4 (fontified nil)) . 3172) (undo-tree-id3096 . -4) (undo-tree-id3097 . -4) (undo-tree-id3098 . -4) (undo-tree-id3099 . -4) (undo-tree-id3100 . -4) (undo-tree-id3101 . -4) (undo-tree-id3102 . -4) (undo-tree-id3103 . -4) (undo-tree-id3104 . -4) (undo-tree-id3105 . -4) (undo-tree-id3106 . -4) (undo-tree-id3107 . -4) (undo-tree-id3108 . -4) (undo-tree-id3109 . -4) (undo-tree-id3110 . -4) (undo-tree-id3111 . -4) (undo-tree-id3112 . -4) (undo-tree-id3113 . -4) (undo-tree-id3114 . -4) (undo-tree-id3115 . -4) (undo-tree-id3116 . -4) (undo-tree-id3117 . -4) (undo-tree-id3118 . -4) (undo-tree-id3119 . -4) (undo-tree-id3120 . -4) (undo-tree-id3121 . -4) (undo-tree-id3122 . -4) (undo-tree-id3123 . -4) (undo-tree-id3124 . -4) (undo-tree-id3125 . -4) (undo-tree-id3126 . -4) (undo-tree-id3127 . -4) (undo-tree-id3128 . -4) (undo-tree-id3129 . -4) (undo-tree-id3130 . -4) (undo-tree-id3131 . -4) (undo-tree-id3132 . -4) (undo-tree-id3133 . -4) (undo-tree-id3134 . -4) (undo-tree-id3135 . -4) (undo-tree-id3136 . -4) (undo-tree-id3137 . -4) (undo-tree-id3138 . -4) (undo-tree-id3139 . -4) (undo-tree-id3140 . -4) (undo-tree-id3141 . -4) (undo-tree-id3142 . -4) (undo-tree-id3143 . -4) (undo-tree-id3144 . -4) (undo-tree-id3145 . -4) (undo-tree-id3146 . -4) (undo-tree-id3147 . -4) (undo-tree-id3148 . -4) (undo-tree-id3149 . -4) (undo-tree-id3150 . -4) (undo-tree-id3151 . -4) (undo-tree-id3152 . -4) (undo-tree-id3153 . -4) (undo-tree-id3154 . -4) (undo-tree-id3155 . -4) (undo-tree-id3156 . -4) (undo-tree-id3157 . -4) (undo-tree-id3158 . -4) (undo-tree-id3159 . -4) (undo-tree-id3160 . -4) (undo-tree-id3161 . -4) (undo-tree-id3162 . -4) (undo-tree-id3163 . -4) (undo-tree-id3164 . -4) (undo-tree-id3165 . -4) (undo-tree-id3166 . -4) (undo-tree-id3167 . -4) (undo-tree-id3168 . -4) (3171 . 3177)) nil (26361 8583 527689 228000) 0 nil])
([nil nil ((3200 . 3203) (3179 . 3200) (3177 . 3179) (3173 . 3177) (#("    " 0 4 (fontified nil)) . 3172) (undo-tree-id3015 . -4) (3176 . 3177) (3172 . 3176)) nil (26361 8583 527516 267000) 0 nil])
([nil nil ((3346 . 3347) (3332 . 3346) (3330 . 3332) (3329 . 3330) (#("," 0 1 (fontified t)) . -3329) (undo-tree-id2950 . -1) (#(" " 0 1 (fontified t)) . -3330) (undo-tree-id2951 . -1) (#("," 0 1 (fontified t)) . -3331) (undo-tree-id2952 . -1) (#(" " 0 1 (fontified t)) . -3332) (undo-tree-id2953 . -1) (#("," 0 1 (fontified t)) . -3333) (undo-tree-id2954 . -1) (#(" " 0 1 (fontified t)) . -3334) (undo-tree-id2955 . -1) (#("," 0 1 (fontified t)) . -3335) (undo-tree-id2956 . -1) (#(" " 0 1 (fontified t)) . -3336) (undo-tree-id2957 . -1) (#(">" 0 1 (face (rainbow-delimiters-depth-3-face) c-type c-decl-id-start fontified t)) . -3337) (undo-tree-id2958 . -1) 3338 (apply yas--snippet-revive 3291 3338 #s(yas--snippet nil (#s(yas--field 1 3304 3329 nil nil nil t #s(yas--field 2 3331 3331 nil nil nil t #s(yas--field 3 3333 3333 nil nil nil t #s(yas--field 4 3335 3335 nil nil nil t #s(yas--field 5 3337 3337 nil nil nil t nil))))) #s(yas--field 2 3331 3331 nil nil nil t #s(yas--field 3 3333 3333 nil nil nil t #s(yas--field 4 3335 3335 nil nil nil t #s(yas--field 5 3337 3337 nil nil nil t nil)))) #s(yas--field 3 3333 3333 nil nil nil t #s(yas--field 4 3335 3335 nil nil nil t #s(yas--field 5 3337 3337 nil nil nil t nil))) #s(yas--field 4 3335 3335 nil nil nil t #s(yas--field 5 3337 3337 nil nil nil t nil)) #s(yas--field 5 3337 3337 nil nil nil t nil)) nil 13 nil #s(yas--field 5 3337 3337 nil nil nil t nil) nil nil)) (#("typename MessageMemoryStrategyT" 0 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 31 (face font-lock-type-face fontified t)) . 3337) (#("typename ROSMessageT" 0 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 20 (face font-lock-type-face fontified t)) . 3335) (#("typename SubscribedT" 0 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 20 (face font-lock-type-face fontified t)) . 3333) (#("typename AllocatorT" 0 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 19 (face font-lock-type-face fontified t)) . 3331) (#(">" 0 1 (face (rainbow-delimiters-depth-3-face) c-type c-decl-id-start fontified t)) . -3329) (undo-tree-id2959 . -1) 3330 (apply yas--snippet-revive 3324 3330 #s(yas--snippet nil (#s(yas--field 1 3329 3329 nil nil nil t nil)) nil 14 nil #s(yas--field 1 3329 3329 nil nil nil t nil) #s(yas--field 1 3304 3329 nil nil nil t #s(yas--field 2 3331 3331 nil nil nil t #s(yas--field 3 3333 3333 nil nil nil t #s(yas--field 4 3335 3335 nil nil nil t #s(yas--field 5 3337 3337 nil nil nil t nil))))) nil)) (#("_" 0 1 (fontified t)) . -3329) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (#("<" 0 1 (face (rainbow-delimiters-depth-4-face) c-<>-c-types-set t fontified t)) . -3330) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) 3331 (#("class ContainerAllocator" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 24 (face font-lock-type-face fontified t)) . 3331) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3329 3329 nil nil nil t nil)) nil 14 nil #s(yas--field 1 3329 3329 nil nil nil t nil) #s(yas--field 1 3304 3329 nil nil nil t #s(yas--field 2 3331 3331 nil nil nil t #s(yas--field 3 3333 3333 nil nil nil t #s(yas--field 4 3335 3335 nil nil nil t #s(yas--field 5 3337 3337 nil nil nil t nil))))) nil)) (3324 . 3356) (#("Twist_<${1:class ContainerAllocator}>" 0 37 (fontified nil)) . 3324) (3324 . 3361) (#("Twist_<class ContainerAllocator>" 0 6 (fontified nil) 6 7 (fontified nil c-<>-c-types-set t category c-<-as-paren-syntax) 7 31 (fontified nil) 31 32 (fontified nil category c->-as-paren-syntax)) . -3324) (undo-tree-id2966 . -32) (3324 . 3356) (#("T" 0 1 (fontified t)) . -3324) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) 3325 (3324 . 3325) (3322 . 3324) (3319 . 3322) (#("msg" 0 3 (fontified nil)) . -3319) (undo-tree-id2969 . -3) (3319 . 3322) (3317 . 3319) (nil c-<>-c-types-set t 3304 . 3317) (nil face (rainbow-delimiters-depth-3-face) 3304 . 3317) (nil fontified nil 3304 . 3317) (3304 . 3317) (#("geo" 0 3 (fontified nil)) . 3304) (nil c-<>-c-types-set t 3304 . 3307) (nil face (rainbow-delimiters-depth-3-face) 3304 . 3307) (nil fontified nil 3304 . 3307) (3304 . 3307) (#("geometry_msgs" 0 13 (fontified nil)) . -3304) (undo-tree-id2970 . -13) (nil c-<>-c-types-set t 3304 . 3317) (nil face (rainbow-delimiters-depth-3-face) 3304 . 3317) (nil fontified nil 3304 . 3317) (3304 . 3317) (#("geo" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -3304) (undo-tree-id2971 . -3) (undo-tree-id2972 . -3) 3307 (3306 . 3307) (3304 . 3306) (#("s" 0 1 (fontified t)) . -3304) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (#("t" 0 1 (fontified t)) . -3305) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (#("d" 0 1 (fontified t)) . -3306) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) 3307 (3306 . 3307) (3305 . 3306) (#("typename MessageT" 0 8 (face font-lock-keyword-face fontified nil) 8 9 (fontified nil) 9 17 (face font-lock-type-face fontified nil)) . 3305) (3304 . 3305) (230 . 265) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3304 3329 nil nil nil t #s(yas--field 2 3331 3331 nil nil nil t #s(yas--field 3 3333 3333 nil nil nil t #s(yas--field 4 3335 3335 nil nil nil t #s(yas--field 5 3337 3337 nil nil nil t nil))))) #s(yas--field 2 3331 3331 nil nil nil t #s(yas--field 3 3333 3333 nil nil nil t #s(yas--field 4 3335 3335 nil nil nil t #s(yas--field 5 3337 3337 nil nil nil t nil)))) #s(yas--field 3 3333 3333 nil nil nil t #s(yas--field 4 3335 3335 nil nil nil t #s(yas--field 5 3337 3337 nil nil nil t nil))) #s(yas--field 4 3335 3335 nil nil nil t #s(yas--field 5 3337 3337 nil nil nil t nil)) #s(yas--field 5 3337 3337 nil nil nil t nil)) nil 13 nil #s(yas--field 5 3337 3337 nil nil nil t nil) nil nil)) (3256 . 3385) (#("Subscription<${1:typename MessageT}, ${2:typename AllocatorT}, ${3:typename SubscribedT}, ${4:typename ROSMessageT}, ${5:typename MessageMemoryStrategyT}>" 0 154 (fontified nil)) . 3256) (3256 . 3410) (#("S" 0 1 (fontified nil)) . 3256) (3256 . 3257) (#("Subscription<typename MessageT, typename AllocatorT, typename SubscribedT, typename ROSMessageT, typename MessageMemoryStrategyT>" 0 12 (fontified nil) 12 13 (fontified nil c-<>-c-types-set t category c-<-as-paren-syntax) 13 30 (fontified nil) 30 31 (fontified nil c-type c-<>-arg-sep) 31 51 (fontified nil) 51 52 (fontified nil c-type c-<>-arg-sep) 52 73 (fontified nil) 73 74 (fontified nil c-type c-<>-arg-sep) 74 95 (fontified nil) 95 96 (fontified nil c-type c-<>-arg-sep) 96 128 (fontified nil) 128 129 (fontified nil category c->-as-paren-syntax)) . -3256) (undo-tree-id2979 . -129) (3256 . 3385) (#("Sub" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -3256) (undo-tree-id2980 . -3) (undo-tree-id2981 . -3) 3259 (3257 . 3259) (#("u" 0 1 (fontified t)) . -3257) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) 3258 (#("b" 0 1 (fontified t)) . -3258) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) 3259 (#("e" 0 1 (fontified t)) . -3259) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (#("s" 0 1 (fontified t)) . -3260) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) 3261 (3259 . 3261) (#("s" 0 1 (fontified t)) . -3259) (undo-tree-id2990 . -1) (#("c" 0 1 (fontified t)) . -3260) (undo-tree-id2991 . -1) (#("r" 0 1 (fontified t)) . -3261) (undo-tree-id2992 . -1) (#("i" 0 1 (fontified t)) . -3262) (undo-tree-id2993 . -1) (#("p" 0 1 (fontified t)) . -3263) (undo-tree-id2994 . -1) (#("t" 0 1 (fontified t)) . -3264) (undo-tree-id2995 . -1) (#("i" 0 1 (fontified t)) . -3265) (undo-tree-id2996 . -1) (#("o" 0 1 (fontified t)) . -3266) (undo-tree-id2997 . -1) (#("n" 0 1 (fontified t)) . -3267) (undo-tree-id2998 . -1) (#("B" 0 1 (fontified t)) . -3268) (undo-tree-id2999 . -1) (#("a" 0 1 (fontified t)) . -3269) (undo-tree-id3000 . -1) (#("s" 0 1 (fontified t)) . -3270) (undo-tree-id3001 . -1) (#("e" 0 1 (fontified t)) . -3271) (undo-tree-id3002 . -1) (#("
" 0 1 (fontified t)) . -3272) (undo-tree-id3003 . -1) (#(" " 0 1 (fontified t)) . -3273) (undo-tree-id3004 . -1) (#(" " 0 1 (fontified t)) . -3274) (undo-tree-id3005 . -1) (#(" " 0 1 (fontified t)) . -3275) (undo-tree-id3006 . -1) (#(" " 0 1 (fontified t)) . -3276) (undo-tree-id3007 . -1) 3277 (3272 . 3277) (230 . 270) (3216 . 3216) (3216 . 3232) (#("S" 0 1 (fontified nil)) . 3216) (3216 . 3217) (#("SubscriptionBase" 0 16 (fontified nil)) . -3216) (undo-tree-id3008 . -16) (3216 . 3232) (#("Sub" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -3216) (undo-tree-id3009 . -3) (undo-tree-id3010 . -3) 3219 (3216 . 3219) (3204 . 3208) (#("  " 0 2 (c-in-sws t c-is-sws t fontified nil)) . 3204) (3213 . 3214) (3204 . 3206) (#("    " 0 4 (c-in-sws t c-is-sws t fontified nil)) . 3204) (undo-tree-id3011 . -4) (3214 . 3215) (3208 . 3214) (#("rcl" 0 1 (fontified nil c-is-sws t) 1 3 (fontified nil)) . 3208) (3208 . 3211) (#("rclcpp" 0 1 (fontified nil c-is-sws t) 1 6 (fontified nil)) . -3208) (undo-tree-id3012 . -6) (3208 . 3214) (#("rcl" 0 1 (c-is-sws t fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -3208) (undo-tree-id3013 . -3) (undo-tree-id3014 . -3) 3211 (3210 . 3211) (3209 . 3210) (3208 . 3209) (3203 . 3208)) nil (26361 8583 527503 858000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3418 . 3419) (nil fontified nil 3393 . 3419) (nil fontified nil 3392 . 3393) (nil category c->-as-paren-syntax 3392 . 3393) (nil fontified nil 3371 . 3392) (nil fontified nil 3370 . 3371) (nil category c-<-as-paren-syntax 3370 . 3371) (nil fontified nil 3348 . 3370) (3348 . 3419) (t 26361 8583 542566 844000)) nil (26361 8610 541715 222000) 0 nil])
([nil nil ((#("    rclcpp::Subscription<geometry_msgs::msg::Twist>::SharedPtr sub1;
" 0 4 (fontified t c-in-sws t c-is-sws t) 4 5 (face font-lock-constant-face fontified t c-is-sws t) 5 10 (face font-lock-constant-face fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 24 (face font-lock-constant-face fontified t) 24 25 (face (rainbow-delimiters-depth-3-face) c-<>-c-types-set t category c-<-as-paren-syntax fontified t) 25 38 (face font-lock-constant-face fontified t) 38 39 (fontified t) 39 40 (fontified t) 40 43 (face font-lock-constant-face fontified t) 43 44 (fontified t) 44 45 (fontified t) 45 50 (face font-lock-type-face fontified t) 50 51 (face (rainbow-delimiters-depth-3-face) category c->-as-paren-syntax fontified t) 51 52 (fontified t) 52 53 (fontified t) 53 54 (face font-lock-type-face fontified t) 54 55 (face font-lock-type-face fontified t) 55 56 (face font-lock-type-face fontified t) 56 57 (face font-lock-type-face fontified t) 57 58 (face font-lock-type-face fontified t) 58 59 (face font-lock-type-face fontified t) 59 60 (face font-lock-type-face fontified t) 60 61 (face font-lock-type-face fontified t) 61 62 (face font-lock-type-face c-type c-decl-id-start fontified t) 62 63 (fontified t) 63 64 (face font-lock-variable-name-face fontified t) 64 65 (face font-lock-variable-name-face fontified t) 65 66 (face font-lock-variable-name-face fontified t) 66 67 (face font-lock-variable-name-face fontified t) 67 68 (fontified t) 68 69 (fontified t)) . 3279) (undo-tree-id3188 . -69) (undo-tree-id3189 . -68) (undo-tree-id3190 . 1) (undo-tree-id3191 . -50) (undo-tree-id3192 . -67) (undo-tree-id3193 . -67) 3346) nil (26361 8610 541714 488000) 0 nil])
([nil nil ((3279 . 3283) (#("  " 0 1 (c-is-sws t fontified t) 1 2 (c-is-sws t fontified t)) . 3279) (undo-tree-id3187 . 2) 3346) nil (26361 8610 541711 207000) 0 nil])
([nil nil ((#("std" 0 3 (face font-lock-constant-face fontified t)) . 3304) (undo-tree-id3186 . -2)) nil (26361 8610 541709 640000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-constant-face fontified t)) . 3304)) nil (26361 8610 541708 446000) 0 nil])
([nil nil ((#("msgs" 0 4 (face font-lock-constant-face fontified t)) . 3304) (undo-tree-id3185 . -3)) nil (26361 8610 541707 505000) 0 nil])
([nil nil ((#("::" 0 2 (fontified t)) . 3304) (undo-tree-id3184 . -1)) nil (26361 8610 541705 502000) 0 nil])
([nil nil ((#("msg" 0 3 (face font-lock-constant-face fontified t)) . 3304) (undo-tree-id3183 . -2)) nil (26361 8610 541704 91000) 0 nil])
([nil nil ((#("::" 0 2 (fontified t)) . 3304) (undo-tree-id3182 . -1)) nil (26361 8610 541702 383000) 0 nil])
([nil nil ((#("String" 0 6 (fontified t)) . 3304) (undo-tree-id3181 . -5)) nil (26361 8610 541701 138000) 0 nil])
([nil nil ((3324 . 3329) (#("Twist" 0 5 (fontified nil)) . -3324) (undo-tree-id3174 . -5) (3324 . 3329) (3322 . 3324) (3319 . 3322) (#("msg" 0 3 (fontified nil)) . -3319) (undo-tree-id3175 . -3) (3319 . 3322) (#("ms" 0 1 (fontified t) 1 2 (fontified t)) . -3319) (undo-tree-id3176 . -2) (undo-tree-id3177 . -2) 3321 (3319 . 3321) (3317 . 3319) (nil c-<>-c-types-set t 3304 . 3317) (nil fontified nil 3304 . 3317) (nil face (rainbow-delimiters-depth-3-face) 3304 . 3317) (3304 . 3317) (#("geo" 0 3 (fontified nil)) . 3304) (nil c-<>-c-types-set t 3304 . 3307) (nil fontified nil 3304 . 3307) (nil face (rainbow-delimiters-depth-3-face) 3304 . 3307) (3304 . 3307) (#("geometry_msgs" 0 13 (fontified nil)) . -3304) (undo-tree-id3178 . -13) (nil c-<>-c-types-set t 3304 . 3317) (nil fontified nil 3304 . 3317) (nil face (rainbow-delimiters-depth-3-face) 3304 . 3317) (3304 . 3317) (#("geo" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -3304) (undo-tree-id3179 . -3) (undo-tree-id3180 . -3) 3307 (3304 . 3307)) nil (26361 8610 541696 278000) 0 nil])
([nil nil ((nil rear-nonsticky nil 424 . 425) (#("
" 0 1 (fontified nil c-in-sws t)) . -463) (424 . 464) 396 (t 26361 8610 555978 738000)) nil (26361 8636 228314 312000) 0 nil])
([nil nil ((#("twist" 0 5 (face font-lock-string-face c-in-sws t fontified t)) . 453) (undo-tree-id3426 . -4) (undo-tree-id3427 . -5)) nil (26361 8636 228313 782000) 0 nil])
([nil nil ((#("." 0 1 (face font-lock-string-face c-in-sws t fontified t)) . 453) (undo-tree-id3425 . -1)) nil (26361 8636 228312 761000) 0 nil])
([nil nil ((#("hpp" 0 3 (face font-lock-string-face c-in-sws t fontified t)) . 453) (undo-tree-id3423 . -2) (undo-tree-id3424 . -3)) nil (26361 8636 228311 689000) 0 nil])
([nil nil ((453 . 465) (#("v" 0 1 (fontified nil)) . 453) (453 . 454) (#("vector3.hpp\"" 0 12 (fontified nil c-in-sws t)) . -453) (undo-tree-id3194 . -12) (undo-tree-id3195 . -12) (453 . 465) (#("v" 0 1 (face font-lock-string-face fontified t)) . -453) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1) (undo-tree-id3212 . -1) (undo-tree-id3213 . -1) (undo-tree-id3214 . -1) (undo-tree-id3215 . -1) (undo-tree-id3216 . -1) (undo-tree-id3217 . -1) (undo-tree-id3218 . -1) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (undo-tree-id3222 . -1) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (undo-tree-id3227 . -1) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) (undo-tree-id3230 . -1) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (undo-tree-id3243 . -1) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) (undo-tree-id3248 . -1) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (undo-tree-id3272 . -1) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (undo-tree-id3302 . -1) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) (undo-tree-id3322 . -1) (undo-tree-id3323 . -1) (undo-tree-id3324 . -1) (undo-tree-id3325 . -1) (undo-tree-id3326 . -1) (undo-tree-id3327 . -1) (undo-tree-id3328 . -1) (undo-tree-id3329 . -1) (undo-tree-id3330 . -1) (undo-tree-id3331 . -1) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (undo-tree-id3338 . -1) (undo-tree-id3339 . -1) (undo-tree-id3340 . -1) (undo-tree-id3341 . -1) (undo-tree-id3342 . -1) (undo-tree-id3343 . -1) (undo-tree-id3344 . -1) (undo-tree-id3345 . -1) (undo-tree-id3346 . -1) (undo-tree-id3347 . -1) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) (undo-tree-id3350 . -1) (undo-tree-id3351 . -1) (undo-tree-id3352 . -1) (undo-tree-id3353 . -1) (undo-tree-id3354 . -1) (undo-tree-id3355 . -1) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) (undo-tree-id3358 . -1) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) (undo-tree-id3362 . -1) (undo-tree-id3363 . -1) (undo-tree-id3364 . -1) (undo-tree-id3365 . -1) (undo-tree-id3366 . -1) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (undo-tree-id3370 . -1) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3374 . -1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (undo-tree-id3377 . -1) (undo-tree-id3378 . -1) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) (undo-tree-id3382 . -1) (undo-tree-id3383 . -1) (undo-tree-id3384 . -1) (undo-tree-id3385 . -1) (undo-tree-id3386 . -1) (undo-tree-id3387 . -1) (undo-tree-id3388 . -1) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (undo-tree-id3391 . -1) (undo-tree-id3392 . -1) (undo-tree-id3393 . -1) (undo-tree-id3394 . -1) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1) 454 (453 . 454) (#("V" 0 1 (face font-lock-string-face fontified t)) . -453) (undo-tree-id3402 . -1) 454 (453 . 454) (449 . 453) (#("m\"" 0 1 (fontified nil c-in-sws t) 1 2 (c-in-sws t face font-lock-string-face fontified nil)) . 449) (undo-tree-id3403 . -2) (undo-tree-id3404 . 1) (449 . 450) (#("msg/" 0 4 (fontified nil c-in-sws t)) . -449) (undo-tree-id3405 . -4) (449 . 453) (#("m" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -449) (undo-tree-id3406 . -1) (undo-tree-id3407 . -1) 450 (449 . 450) (#("/" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -449) (undo-tree-id3408 . -1) (undo-tree-id3409 . -1) 450 (449 . 450) (#("m" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -449) (undo-tree-id3410 . -1) (undo-tree-id3411 . -1) (undo-tree-id3412 . -1) (#("s" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -450) (undo-tree-id3413 . -1) (undo-tree-id3414 . -1) (undo-tree-id3415 . -1) (#("g" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -451) (undo-tree-id3416 . -1) (undo-tree-id3417 . -1) (undo-tree-id3418 . -1) (#("/" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -452) (undo-tree-id3419 . -1) (undo-tree-id3420 . -1) (undo-tree-id3421 . -1) (#("b" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -453) (undo-tree-id3422 . -1) 454 (453 . 454)) nil (26361 8636 228305 721000) 0 nil])
([nil nil ((465 . 466)) nil (26361 8636 228081 303000) 0 nil])
([nil nil ((#("Twist" 0 5 (face font-lock-type-face fontified t)) . 3133) (undo-tree-id3449 . -4) (undo-tree-id3450 . -5) (undo-tree-id3451 . -5) (undo-tree-id3452 . -5) (undo-tree-id3453 . -5) (undo-tree-id3454 . -5) (undo-tree-id3455 . -5) (undo-tree-id3456 . -5) (undo-tree-id3457 . -5) (undo-tree-id3458 . -5) (undo-tree-id3459 . -5) (undo-tree-id3460 . -5) (undo-tree-id3461 . -5) (undo-tree-id3462 . -5) (undo-tree-id3463 . -5) (undo-tree-id3464 . -5) (undo-tree-id3465 . -5) (undo-tree-id3466 . -5) (undo-tree-id3467 . -5) (undo-tree-id3468 . -5) (undo-tree-id3469 . -5) (undo-tree-id3470 . -5) (undo-tree-id3471 . -5) (undo-tree-id3472 . -5) (undo-tree-id3473 . -5) (undo-tree-id3474 . -5) (undo-tree-id3475 . -5) (undo-tree-id3476 . -5) (undo-tree-id3477 . -5) (undo-tree-id3478 . -5) (undo-tree-id3479 . -5) (undo-tree-id3480 . -5) (undo-tree-id3481 . -5) (undo-tree-id3482 . -5) (undo-tree-id3483 . -5) (undo-tree-id3484 . -5) (undo-tree-id3485 . -5) (t 26361 8636 233362 676000)) nil (26361 8650 857891 828000) 0 nil])
([nil nil ((3133 . 3140) (#("V" 0 1 (fontified nil)) . 3133) (3133 . 3134) (#("Vector3" 0 7 (fontified nil)) . -3133) (undo-tree-id3428 . -7) (3133 . 3140) (#("V" 0 1 (fontified t)) . -3133) (undo-tree-id3429 . -1) (undo-tree-id3430 . -1) (undo-tree-id3431 . -1) 3134 (3133 . 3134) (#("B" 0 1 (fontified t)) . -3133) (undo-tree-id3432 . -1) (undo-tree-id3433 . -1) (undo-tree-id3434 . -1) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) 3134 (3133 . 3134)) nil (26361 8650 857870 179000) 0 nil])
([nil nil ((#("Twist " 0 4 (face font-lock-type-face fontified t) 4 5 (face font-lock-type-face c-type c-decl-id-start fontified t) 5 6 (fontified t)) . 2036) (undo-tree-id3493 . -5) (undo-tree-id3494 . -6) (undo-tree-id3495 . -6) (undo-tree-id3496 . -6) (undo-tree-id3497 . -6) (undo-tree-id3498 . -6) (undo-tree-id3499 . -6) (undo-tree-id3500 . -6) (undo-tree-id3501 . -6) (undo-tree-id3502 . -6) (undo-tree-id3503 . -6) (undo-tree-id3504 . -6) (undo-tree-id3505 . -6) (undo-tree-id3506 . -6) (undo-tree-id3507 . -6) (undo-tree-id3508 . -6) (undo-tree-id3509 . -6) (undo-tree-id3510 . -6) (undo-tree-id3511 . -6) (undo-tree-id3512 . -6) (undo-tree-id3513 . -6) (undo-tree-id3514 . -6) (undo-tree-id3515 . -6) (t 26361 8650 898578 787000)) nil (26361 8665 177003 299000) 0 nil])
([nil nil ((2043 . 2044) (2036 . 2043) (#("V" 0 1 (fontified nil)) . 2036) (2036 . 2037) (#("Vector3" 0 7 (fontified nil)) . -2036) (undo-tree-id3486 . -7) (2036 . 2043) (#("Ve" 0 1 (fontified t) 1 2 (fontified t)) . -2036) (undo-tree-id3487 . -2) (undo-tree-id3488 . -2) 2038 (2037 . 2038) (#("w" 0 1 (fontified t)) . -2037) (undo-tree-id3489 . -1) 2038 (2037 . 2038) (#("n" 0 1 (fontified t)) . -2037) (undo-tree-id3490 . -1) (undo-tree-id3491 . -1) 2038 (2036 . 2038) (#("B" 0 1 (fontified t)) . -2036) (undo-tree-id3492 . -1) 2037 (2036 . 2037)) nil (26361 8665 176988 842000) 0 nil])
([nil nil ((apply -9 2361 2500 undo--wrap-and-run-primitive-undo 2361 2500 ((2438 . 2441) (2403 . 2406) (2368 . 2371) 2361))) nil (26361 8701 703949 486000) 0 nil])
([nil nil ((#("      " 0 1 (c-is-sws t fontified t) 1 6 (c-is-sws t c-in-sws t fontified t)) . -2467) (undo-tree-id3534 . -6) 2473 (2466 . 2473)) nil (26361 8701 703948 985000) 0 nil])
([nil nil ((2467 . 2473)) nil (26361 8701 703948 350000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2490 2508 nil nil nil nil nil)) nil 15 nil #s(yas--field 1 2490 2508 nil nil nil nil nil) nil nil)) (2483 . 2509) (#("set__x(${1:const double &_arg})" 0 31 (fontified nil)) . 2483) (2483 . 2514) (#("set__x(const double &_arg)" 0 26 (fontified nil)) . -2483) (undo-tree-id3529 . -26) (2483 . 2509) (2482 . 2483) (2474 . 2482) (#("me" 0 1 (fontified nil c-is-sws t) 1 2 (fontified nil)) . 2474) (2474 . 2476) (#("message2" 0 1 (fontified nil c-is-sws t) 1 8 (fontified nil)) . -2474) (undo-tree-id3530 . -8) (2474 . 2482) (#("me" 0 1 (c-is-sws t fontified t) 1 2 (fontified t)) . -2474) (undo-tree-id3531 . -2) (undo-tree-id3532 . -2) 2476 (2475 . 2476) (2474 . 2475) (2468 . 2474) (#("      " 0 6 (c-in-sws t c-is-sws t fontified nil)) . 2467) (undo-tree-id3533 . -6) (2473 . 2474) (2467 . 2473) (#("      " 0 6 (c-in-sws t c-is-sws t fontified t)) . 2467)) nil (26361 8701 703946 561000) 0 nil])
([nil nil ((apply yas--snippet-revive 2483 2509 #s(yas--snippet nil (#s(yas--field 1 2490 2508 nil nil nil nil nil)) nil 15 nil #s(yas--field 1 2490 2508 nil nil nil nil nil) nil nil))) nil (26361 8701 703943 530000) 0 nil])
([nil nil ((#("set__x(const double &_arg)" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t) 7 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 19 (face font-lock-type-face fontified t) 19 21 (fontified t) 21 25 (face font-lock-variable-name-face fontified t) 25 26 (face (rainbow-delimiters-depth-4-face) fontified t)) . 2483) (undo-tree-id3526 . 19) (undo-tree-id3527 . -7) (undo-tree-id3528 . -7)) nil (26361 8701 703942 987000) 0 nil])
([nil nil ((2484 . 2487) (2483 . 2484) (#("x" 0 1 (fontified nil)) . -2483) (undo-tree-id3522 . -1) (2483 . 2484) (2482 . 2483) (#("." 0 1 (fontified t)) . -2482) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) 2483) nil (26361 8701 703940 295000) 0 nil])
([nil nil ((#("      message2.x = 

" 0 6 (c-is-sws t c-in-sws t fontified t) 6 7 (fontified t c-is-sws t) 7 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t c-is-sws t)) . 2468) (undo-tree-id3516 . -20) (undo-tree-id3517 . -20) (undo-tree-id3518 . 2) (undo-tree-id3519 . -20) (undo-tree-id3520 . -14) (undo-tree-id3521 . -15)) nil (26361 8701 703936 52000) 0 nil])
([nil nil ((apply 9 2361 2459 undo--wrap-and-run-primitive-undo 2361 2459 ((#("// " 0 1 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 1 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -2432) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -2400) (#("// " 0 1 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 1 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -2368) 2468))) nil (26361 8701 707565 682000) 0 nil])
([nil nil ((#(".linear" 0 1 (fontified t) 1 7 (fontified t)) . 2426) (undo-tree-id3536 . -6) (undo-tree-id3537 . -6) (undo-tree-id3538 . -6) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -1) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1) (undo-tree-id3564 . -1) (undo-tree-id3565 . -1) (undo-tree-id3566 . -1) (undo-tree-id3567 . -1) (undo-tree-id3568 . -1) (undo-tree-id3569 . -1) (undo-tree-id3570 . -1) (undo-tree-id3571 . -1) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) (undo-tree-id3574 . -2) (undo-tree-id3575 . -2) (undo-tree-id3576 . -2) (undo-tree-id3577 . -2) (undo-tree-id3578 . -2) (undo-tree-id3579 . -2) (undo-tree-id3580 . -2) (undo-tree-id3581 . -2) (undo-tree-id3582 . -2) (undo-tree-id3583 . -2) (undo-tree-id3584 . -2) (undo-tree-id3585 . -2) (undo-tree-id3586 . -2) (undo-tree-id3587 . -2) (undo-tree-id3588 . -2) (undo-tree-id3589 . -2) (undo-tree-id3590 . -2) (undo-tree-id3591 . -2) (undo-tree-id3592 . -2) (undo-tree-id3593 . -2) (undo-tree-id3594 . -2) (undo-tree-id3595 . -2) (undo-tree-id3596 . -2) (undo-tree-id3597 . -2) (undo-tree-id3598 . -2) (undo-tree-id3599 . -2) (undo-tree-id3600 . -2) (undo-tree-id3601 . -2) (undo-tree-id3602 . -2) (undo-tree-id3603 . -2) (undo-tree-id3604 . -2) (undo-tree-id3605 . -2) (undo-tree-id3606 . -2) (undo-tree-id3607 . -2) (undo-tree-id3608 . -2) (undo-tree-id3609 . -3) (undo-tree-id3610 . -3) (undo-tree-id3611 . -3) (undo-tree-id3612 . -3) (undo-tree-id3613 . -3) (undo-tree-id3614 . -3) (undo-tree-id3615 . -3) (undo-tree-id3616 . -3) (undo-tree-id3617 . -3) (undo-tree-id3618 . -3) (undo-tree-id3619 . -3) (undo-tree-id3620 . -3) (undo-tree-id3621 . -3) (undo-tree-id3622 . -3) (undo-tree-id3623 . -3) (undo-tree-id3624 . -3) (undo-tree-id3625 . -3) (undo-tree-id3626 . -3) (undo-tree-id3627 . -3) (undo-tree-id3628 . -3) (undo-tree-id3629 . -3) (undo-tree-id3630 . -3) (undo-tree-id3631 . -3) (undo-tree-id3632 . -3) (undo-tree-id3633 . -3) (undo-tree-id3634 . -3) (undo-tree-id3635 . -3) (undo-tree-id3636 . -3) (undo-tree-id3637 . -3) (undo-tree-id3638 . -3) (undo-tree-id3639 . -3) (undo-tree-id3640 . -3) (undo-tree-id3641 . -3) (undo-tree-id3642 . -3) (undo-tree-id3643 . -3) (undo-tree-id3644 . -4) (undo-tree-id3645 . -4) (undo-tree-id3646 . -4) (undo-tree-id3647 . -4) (undo-tree-id3648 . -4) (undo-tree-id3649 . -4) (undo-tree-id3650 . -4) (undo-tree-id3651 . -4) (undo-tree-id3652 . -4) (undo-tree-id3653 . -4) (undo-tree-id3654 . -4) (undo-tree-id3655 . -4) (undo-tree-id3656 . -4) (undo-tree-id3657 . -4) (undo-tree-id3658 . -4) (undo-tree-id3659 . -4) (undo-tree-id3660 . -4) (undo-tree-id3661 . -4) (undo-tree-id3662 . -4) (undo-tree-id3663 . -4) (undo-tree-id3664 . -4) (undo-tree-id3665 . -4) (undo-tree-id3666 . -4) (undo-tree-id3667 . -4) (undo-tree-id3668 . -4) (undo-tree-id3669 . -4) (undo-tree-id3670 . -4) (undo-tree-id3671 . -4) (undo-tree-id3672 . -4) (undo-tree-id3673 . -4) (undo-tree-id3674 . -4) (undo-tree-id3675 . -4) (undo-tree-id3676 . -4) (undo-tree-id3677 . -4) (undo-tree-id3678 . -4) (undo-tree-id3679 . -5) (undo-tree-id3680 . -5) (undo-tree-id3681 . -5) (undo-tree-id3682 . -5) (undo-tree-id3683 . -5) (undo-tree-id3684 . -5) (undo-tree-id3685 . -5) (undo-tree-id3686 . -5) (undo-tree-id3687 . -5) (undo-tree-id3688 . -5) (undo-tree-id3689 . -5) (undo-tree-id3690 . -5) (undo-tree-id3691 . -5) (undo-tree-id3692 . -5) (undo-tree-id3693 . -5) (undo-tree-id3694 . -5) (undo-tree-id3695 . -5) (undo-tree-id3696 . -5) (undo-tree-id3697 . -5) (undo-tree-id3698 . -5) (undo-tree-id3699 . -5) (undo-tree-id3700 . -5) (undo-tree-id3701 . -5) (undo-tree-id3702 . -5) (undo-tree-id3703 . -5) (undo-tree-id3704 . -5) (undo-tree-id3705 . -5) (undo-tree-id3706 . -5) (undo-tree-id3707 . -5) (undo-tree-id3708 . -5) (undo-tree-id3709 . -5) (undo-tree-id3710 . -5) (undo-tree-id3711 . -5) (undo-tree-id3712 . -5) (undo-tree-id3713 . -5) (undo-tree-id3714 . -6) (undo-tree-id3715 . -6) (undo-tree-id3716 . -6) (undo-tree-id3717 . -6) (undo-tree-id3718 . -6) (undo-tree-id3719 . -6) (undo-tree-id3720 . -6) (undo-tree-id3721 . -6) (undo-tree-id3722 . -6) (undo-tree-id3723 . -6) (undo-tree-id3724 . -6) (undo-tree-id3725 . -6) (undo-tree-id3726 . -6) (undo-tree-id3727 . -6) (undo-tree-id3728 . -6) (undo-tree-id3729 . -6) (undo-tree-id3730 . -6) (undo-tree-id3731 . -6) (undo-tree-id3732 . -6) (undo-tree-id3733 . -6) (undo-tree-id3734 . -6) (undo-tree-id3735 . -6) (undo-tree-id3736 . -6) (undo-tree-id3737 . -6) (undo-tree-id3738 . -6) (undo-tree-id3739 . -6) (undo-tree-id3740 . -6) (undo-tree-id3741 . -6) (undo-tree-id3742 . -6) (undo-tree-id3743 . -6) (undo-tree-id3744 . -6) (undo-tree-id3745 . -6) (undo-tree-id3746 . -6) (undo-tree-id3747 . -6) (undo-tree-id3748 . -6) (undo-tree-id3749 . -6) (undo-tree-id3750 . -6) (undo-tree-id3751 . -6) (undo-tree-id3752 . -6) (undo-tree-id3753 . -6) (undo-tree-id3754 . -6) (undo-tree-id3755 . -6) (undo-tree-id3756 . -6) (undo-tree-id3757 . -6) (undo-tree-id3758 . -7) (undo-tree-id3759 . -7) (#(".linear" 0 1 (fontified t) 1 7 (fontified t)) . 2401) (#(".linear" 0 1 (fontified t) 1 7 (fontified t)) . 2376) 2446) nil (26361 8707 521175 156000) 0 nil] [nil nil ((2378 . 2388) (2377 . 2377) (2377 . 2378)) ((#("
" 0 1 (fontified nil)) . 2377) (undo-tree-id3535 . -1) (#("          " 0 10 (fontified t)) . 2378)) (26361 8701 703921 241000) 0 nil])
([nil nil ((#("Twist" 0 5 (fontified t)) . 2075) (undo-tree-id3825 . -4) (undo-tree-id3826 . -5) (t 26361 8707 562393 441000)) nil (26361 8720 154152 460000) 0 nil])
nil
([nil nil ((2075 . 2082) (#("V" 0 1 (fontified nil)) . 2075) (2075 . 2076) (#("Vector3" 0 7 (fontified nil)) . -2075) (undo-tree-id3760 . -7) (2075 . 2082) (#("V" 0 1 (fontified t)) . -2075) (undo-tree-id3761 . -1) (undo-tree-id3762 . -1) (undo-tree-id3763 . -1) (undo-tree-id3764 . -1) (undo-tree-id3765 . -1) (undo-tree-id3766 . -1) (undo-tree-id3767 . -1) (undo-tree-id3768 . -1) (undo-tree-id3769 . -1) (undo-tree-id3770 . -1) (undo-tree-id3771 . -1) (undo-tree-id3772 . -1) (undo-tree-id3773 . -1) (undo-tree-id3774 . -1) (undo-tree-id3775 . -1) (undo-tree-id3776 . -1) (undo-tree-id3777 . -1) (undo-tree-id3778 . -1) (undo-tree-id3779 . -1) (undo-tree-id3780 . -1) (undo-tree-id3781 . -1) (undo-tree-id3782 . -1) (undo-tree-id3783 . -1) (undo-tree-id3784 . -1) (undo-tree-id3785 . -1) (undo-tree-id3786 . -1) (undo-tree-id3787 . -1) (undo-tree-id3788 . -1) (undo-tree-id3789 . -1) (undo-tree-id3790 . -1) (undo-tree-id3791 . -1) (undo-tree-id3792 . -1) (undo-tree-id3793 . -1) (undo-tree-id3794 . -1) (undo-tree-id3795 . -1) (undo-tree-id3796 . -1) (undo-tree-id3797 . -1) (undo-tree-id3798 . -1) (undo-tree-id3799 . -1) (undo-tree-id3800 . -1) (undo-tree-id3801 . -1) (undo-tree-id3802 . -1) (undo-tree-id3803 . -1) (undo-tree-id3804 . -1) (undo-tree-id3805 . -1) (undo-tree-id3806 . -1) (undo-tree-id3807 . -1) (undo-tree-id3808 . -1) (undo-tree-id3809 . -1) (undo-tree-id3810 . -1) (undo-tree-id3811 . -1) (undo-tree-id3812 . -1) (undo-tree-id3813 . -1) (undo-tree-id3814 . -1) (undo-tree-id3815 . -1) (undo-tree-id3816 . -1) (undo-tree-id3817 . -1) (undo-tree-id3818 . -1) (undo-tree-id3819 . -1) (undo-tree-id3820 . -1) (undo-tree-id3821 . -1) (undo-tree-id3822 . -1) (undo-tree-id3823 . -1) (undo-tree-id3824 . -1) 2076 (2075 . 2076)) nil (26361 8720 154147 981000) 0 nil])
([nil nil ((#("Twist" 0 5 (face font-lock-type-face fontified t)) . 1110) (undo-tree-id3933 . -4) (t 26361 8720 195570 897000)) nil (26361 8729 330276 210000) 0 nil])
([nil nil ((1110 . 1117) (#("V" 0 1 (fontified nil)) . 1110) (1110 . 1111) (#("Vector3" 0 7 (fontified nil)) . -1110) (undo-tree-id3827 . -7) (1110 . 1117) (#("V" 0 1 (fontified t)) . -1110) (undo-tree-id3828 . -1) (undo-tree-id3829 . -1) (undo-tree-id3830 . -1) (undo-tree-id3831 . -1) (undo-tree-id3832 . -1) (undo-tree-id3833 . -1) (undo-tree-id3834 . -1) (undo-tree-id3835 . -1) (undo-tree-id3836 . -1) (undo-tree-id3837 . -1) (undo-tree-id3838 . -1) (undo-tree-id3839 . -1) (undo-tree-id3840 . -1) (undo-tree-id3841 . -1) (undo-tree-id3842 . -1) (undo-tree-id3843 . -1) (undo-tree-id3844 . -1) (undo-tree-id3845 . -1) (undo-tree-id3846 . -1) (undo-tree-id3847 . -1) (undo-tree-id3848 . -1) (undo-tree-id3849 . -1) (undo-tree-id3850 . -1) (undo-tree-id3851 . -1) (undo-tree-id3852 . -1) (undo-tree-id3853 . -1) (undo-tree-id3854 . -1) (undo-tree-id3855 . -1) (undo-tree-id3856 . -1) (undo-tree-id3857 . -1) (undo-tree-id3858 . -1) (undo-tree-id3859 . -1) (undo-tree-id3860 . -1) (undo-tree-id3861 . -1) (undo-tree-id3862 . -1) (undo-tree-id3863 . -1) (undo-tree-id3864 . -1) (undo-tree-id3865 . -1) (undo-tree-id3866 . -1) (undo-tree-id3867 . -1) (undo-tree-id3868 . -1) (undo-tree-id3869 . -1) (undo-tree-id3870 . -1) (undo-tree-id3871 . -1) (undo-tree-id3872 . -1) (undo-tree-id3873 . -1) (undo-tree-id3874 . -1) (undo-tree-id3875 . -1) (undo-tree-id3876 . -1) (undo-tree-id3877 . -1) (undo-tree-id3878 . -1) (undo-tree-id3879 . -1) (undo-tree-id3880 . -1) (undo-tree-id3881 . -1) (undo-tree-id3882 . -1) (undo-tree-id3883 . -1) (undo-tree-id3884 . -1) (undo-tree-id3885 . -1) (undo-tree-id3886 . -1) (undo-tree-id3887 . -1) (undo-tree-id3888 . -1) (undo-tree-id3889 . -1) (undo-tree-id3890 . -1) (undo-tree-id3891 . -1) (undo-tree-id3892 . -1) (undo-tree-id3893 . -1) (undo-tree-id3894 . -1) (undo-tree-id3895 . -1) (undo-tree-id3896 . -1) (undo-tree-id3897 . -1) (undo-tree-id3898 . -1) (undo-tree-id3899 . -1) (undo-tree-id3900 . -1) (undo-tree-id3901 . -1) (undo-tree-id3902 . -1) (undo-tree-id3903 . -1) (undo-tree-id3904 . -1) (undo-tree-id3905 . -1) (undo-tree-id3906 . -1) (undo-tree-id3907 . -1) (undo-tree-id3908 . -1) (undo-tree-id3909 . -1) (undo-tree-id3910 . -1) (undo-tree-id3911 . -1) (undo-tree-id3912 . -1) (undo-tree-id3913 . -1) (undo-tree-id3914 . -1) (undo-tree-id3915 . -1) (undo-tree-id3916 . -1) (undo-tree-id3917 . -1) (undo-tree-id3918 . -1) (undo-tree-id3919 . -1) (undo-tree-id3920 . -1) (undo-tree-id3921 . -1) (undo-tree-id3922 . -1) (undo-tree-id3923 . -1) (undo-tree-id3924 . -1) (undo-tree-id3925 . -1) (undo-tree-id3926 . -1) (undo-tree-id3927 . -1) (undo-tree-id3928 . -1) (undo-tree-id3929 . -1) (undo-tree-id3930 . -1) (undo-tree-id3931 . -1) 1111 (1110 . 1111) (#("B" 0 1 (fontified t)) . -1110) (undo-tree-id3932 . -1) 1111 (1110 . 1111)) nil (26361 8729 330271 626000) 0 nil])
([nil nil ((#(";" 0 1 (c-in-sws t fontified t)) . -465) (undo-tree-id3934 . -1) (undo-tree-id3935 . -1) (undo-tree-id3936 . -1) (undo-tree-id3937 . -1) (undo-tree-id3938 . -1) (undo-tree-id3939 . -1) (undo-tree-id3940 . -1) (undo-tree-id3941 . -1) (undo-tree-id3942 . -1) (undo-tree-id3943 . -1) (undo-tree-id3944 . -1) (undo-tree-id3945 . -1) (undo-tree-id3946 . -1) (undo-tree-id3947 . -1) (undo-tree-id3948 . -1) (undo-tree-id3949 . -1) (undo-tree-id3950 . -1) (undo-tree-id3951 . -1) (undo-tree-id3952 . -1) (undo-tree-id3953 . -1) (undo-tree-id3954 . -1) (undo-tree-id3955 . -1) (undo-tree-id3956 . -1) (undo-tree-id3957 . -1) (undo-tree-id3958 . -1) (undo-tree-id3959 . -1) 466 (t 26361 8729 345698 522000)) nil (26361 8742 970605 680000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3388 . 3389) (#("
" 0 1 (fontified nil)) . -3462) (3384 . 3463) 3346 (t 26361 8742 986887 420000)) nil (26361 8774 76042 478000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3466 . 3467) (#("
" 0 1 (fontified nil)) . -3540) (3462 . 3541) 3389) nil (26361 8774 76041 491000) 0 nil])
([nil nil ((#("Twist" 0 5 (face font-lock-type-face fontified t)) . 3430) (undo-tree-id3963 . -4)) nil (26361 8774 76040 984000) 0 nil])
([nil nil ((3430 . 3437) (#("V" 0 1 (fontified nil)) . 3430) (3430 . 3431) (#("Vector3" 0 7 (fontified nil)) . -3430) (undo-tree-id3960 . -7) (3430 . 3437) (#("V" 0 1 (fontified t)) . -3430) (undo-tree-id3961 . -1) (undo-tree-id3962 . -1) 3431 (3430 . 3431)) nil (26361 8774 76038 313000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-variable-name-face fontified t)) . 3462)) nil (26361 8774 76031 354000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-variable-name-face fontified t)) . 3382)) nil (26361 8774 76031 36000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-variable-name-face fontified t)) . 3538)) nil (26361 8774 76030 444000) 0 nil])
([nil nil ((3382 . 3383)) nil (26361 8774 76030 9000) 0 nil])
([nil nil ((3462 . 3463)) nil (26361 8774 76028 949000) 0 nil])
([nil nil ((3540 . 3541)) nil (26361 8774 76024 551000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3544) (undo-tree-id4110 . -4) 3548 (3544 . 3548) (#("    " 0 4 (fontified nil)) . 3543) (undo-tree-id4111 . -4) (3542 . 3548) (t 26361 8774 117312 538000)) nil (26361 8782 142420 396000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3544 . 3545) (nil fontified nil 3544 . 3545) (3544 . 3545)) nil (26361 8782 142418 791000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -3620) (3542 . 3621) 3465) nil (26361 8782 142417 452000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3543) (undo-tree-id4037 . -4) (undo-tree-id4038 . -4) (undo-tree-id4039 . -4) (undo-tree-id4040 . -4) (undo-tree-id4041 . -4) (undo-tree-id4042 . -4) (undo-tree-id4043 . -4) (undo-tree-id4044 . -4) (undo-tree-id4045 . -4) (undo-tree-id4046 . -4) (undo-tree-id4047 . -4) (undo-tree-id4048 . -4) (undo-tree-id4049 . -4) (undo-tree-id4050 . -4) (undo-tree-id4051 . -4) (undo-tree-id4052 . -4) (undo-tree-id4053 . -4) (undo-tree-id4054 . -4) (undo-tree-id4055 . -4) (undo-tree-id4056 . -4) (undo-tree-id4057 . -4) (undo-tree-id4058 . -4) (undo-tree-id4059 . -4) (undo-tree-id4060 . -4) (undo-tree-id4061 . -4) (undo-tree-id4062 . -4) (undo-tree-id4063 . -4) (undo-tree-id4064 . -4) (undo-tree-id4065 . -4) (undo-tree-id4066 . -4) (undo-tree-id4067 . -4) (undo-tree-id4068 . -4) (undo-tree-id4069 . -4) (undo-tree-id4070 . -4) (undo-tree-id4071 . -4) (undo-tree-id4072 . -4) (undo-tree-id4073 . -4) (undo-tree-id4074 . -4) (undo-tree-id4075 . -4) (undo-tree-id4076 . -4) (undo-tree-id4077 . -4) (undo-tree-id4078 . -4) (undo-tree-id4079 . -4) (undo-tree-id4080 . -4) (undo-tree-id4081 . -4) (undo-tree-id4082 . -4) (undo-tree-id4083 . -4) (undo-tree-id4084 . -4) (undo-tree-id4085 . -4) (undo-tree-id4086 . -4) (undo-tree-id4087 . -4) (undo-tree-id4088 . -4) (undo-tree-id4089 . -4) (undo-tree-id4090 . -4) (undo-tree-id4091 . -4) (undo-tree-id4092 . -4) (undo-tree-id4093 . -4) (undo-tree-id4094 . -4) (undo-tree-id4095 . -4) (undo-tree-id4096 . -4) (undo-tree-id4097 . -4) (undo-tree-id4098 . -4) (undo-tree-id4099 . -4) (undo-tree-id4100 . -4) (undo-tree-id4101 . -4) (undo-tree-id4102 . -4) (undo-tree-id4103 . -4) (undo-tree-id4104 . -4) (undo-tree-id4105 . -4) (undo-tree-id4106 . -4) (undo-tree-id4107 . -4) (undo-tree-id4108 . -4) (undo-tree-id4109 . -4) 3547 (3542 . 3547)) nil (26361 8782 142415 584000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3211) (undo-tree-id3964 . -4) (undo-tree-id3965 . -4) (undo-tree-id3966 . -4) (undo-tree-id3967 . -4) (undo-tree-id3968 . -4) (undo-tree-id3969 . -4) (undo-tree-id3970 . -4) (undo-tree-id3971 . -4) (undo-tree-id3972 . -4) (undo-tree-id3973 . -4) (undo-tree-id3974 . -4) (undo-tree-id3975 . -4) (undo-tree-id3976 . -4) (undo-tree-id3977 . -4) (undo-tree-id3978 . -4) (undo-tree-id3979 . -4) (undo-tree-id3980 . -4) (undo-tree-id3981 . -4) (undo-tree-id3982 . -4) (undo-tree-id3983 . -4) (undo-tree-id3984 . -4) (undo-tree-id3985 . -4) (undo-tree-id3986 . -4) (undo-tree-id3987 . -4) (undo-tree-id3988 . -4) (undo-tree-id3989 . -4) (undo-tree-id3990 . -4) (undo-tree-id3991 . -4) (undo-tree-id3992 . -4) (undo-tree-id3993 . -4) (undo-tree-id3994 . -4) (undo-tree-id3995 . -4) (undo-tree-id3996 . -4) (undo-tree-id3997 . -4) (undo-tree-id3998 . -4) (undo-tree-id3999 . -4) (undo-tree-id4000 . -4) (undo-tree-id4001 . -4) (undo-tree-id4002 . -4) (undo-tree-id4003 . -4) (undo-tree-id4004 . -4) (undo-tree-id4005 . -4) (undo-tree-id4006 . -4) (undo-tree-id4007 . -4) (undo-tree-id4008 . -4) (undo-tree-id4009 . -4) (undo-tree-id4010 . -4) (undo-tree-id4011 . -4) (undo-tree-id4012 . -4) (undo-tree-id4013 . -4) (undo-tree-id4014 . -4) (undo-tree-id4015 . -4) (undo-tree-id4016 . -4) (undo-tree-id4017 . -4) (undo-tree-id4018 . -4) (undo-tree-id4019 . -4) (undo-tree-id4020 . -4) (undo-tree-id4021 . -4) (undo-tree-id4022 . -4) (undo-tree-id4023 . -4) (undo-tree-id4024 . -4) (undo-tree-id4025 . -4) (undo-tree-id4026 . -4) (undo-tree-id4027 . -4) (undo-tree-id4028 . -4) (undo-tree-id4029 . -4) (undo-tree-id4030 . -4) (undo-tree-id4031 . -4) (undo-tree-id4032 . -4) (undo-tree-id4033 . -4) (undo-tree-id4034 . -4) (undo-tree-id4035 . -4) (undo-tree-id4036 . -4) 3215 (3210 . 3215)) nil (26361 8782 142358 161000) 0 nil])
([nil nil ((#("_
" 0 1 (face font-lock-type-face fontified t rear-nonsticky t) 1 2 (fontified t)) . 3624) (undo-tree-id4112 . -1) (undo-tree-id4113 . -2) (t 26361 8782 185421 410000)) nil (26361 8784 122055 782000) 0 nil])
([nil nil ((#("geometry_msgs::msg::Twist" 0 13 (face font-lock-constant-face fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 18 (face font-lock-constant-face fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 25 (face font-lock-type-face fontified t)) . 3570) (undo-tree-id4148 . -24) (undo-tree-id4149 . -24) (undo-tree-id4150 . -24) (undo-tree-id4151 . -2) (undo-tree-id4152 . -24) 3594 (t 26361 8784 136447 659000)) nil (26361 8802 72992 168000) 0 nil])
([nil nil ((3585 . 3589) (#("Bool" 0 4 (fontified nil)) . -3585) (undo-tree-id4139 . -4) (3585 . 3589) (#("B" 0 1 (fontified t)) . -3585) (undo-tree-id4140 . -1) (undo-tree-id4141 . -1) 3586 (3585 . 3586) (3583 . 3585) (3580 . 3583) (#("ms" 0 2 (fontified nil)) . 3580) (3580 . 3582) (#("msg" 0 3 (fontified nil)) . -3580) (undo-tree-id4142 . -3) (3580 . 3583) (#("ms" 0 1 (fontified t) 1 2 (fontified t)) . -3580) (undo-tree-id4143 . -2) (undo-tree-id4144 . -2) 3582 (3580 . 3582) (3578 . 3580) (nil c-<>-c-types-set t 3570 . 3578) (nil fontified nil 3570 . 3578) (nil face (rainbow-delimiters-depth-3-face) 3570 . 3578) (3570 . 3578) (#("st" 0 2 (fontified nil)) . 3570) (nil c-<>-c-types-set t 3570 . 3572) (nil fontified nil 3570 . 3572) (nil face (rainbow-delimiters-depth-3-face) 3570 . 3572) (3570 . 3572) (#("std_msgs" 0 8 (fontified nil)) . -3570) (undo-tree-id4145 . -8) (nil c-<>-c-types-set t 3570 . 3578) (nil fontified nil 3570 . 3578) (nil face (rainbow-delimiters-depth-3-face) 3570 . 3578) (3570 . 3578) (#("st" 0 1 (fontified t) 1 2 (fontified t)) . -3570) (undo-tree-id4146 . -2) (undo-tree-id4147 . -2) 3572 (3570 . 3572)) nil (26361 8802 72987 404000) 0 nil])
([nil nil ((#("subscription3" 0 12 (face font-lock-variable-name-face fontified t) 12 13 (face font-lock-variable-name-face fontified t)) . 3602) (undo-tree-id4116 . -12) (undo-tree-id4117 . -13) (undo-tree-id4118 . -13) (undo-tree-id4119 . -13) (undo-tree-id4120 . -13) (undo-tree-id4121 . -13) (undo-tree-id4122 . -13) (undo-tree-id4123 . -13) (undo-tree-id4124 . -13) (undo-tree-id4125 . -13) (undo-tree-id4126 . -13) (undo-tree-id4127 . -13) (undo-tree-id4128 . -13) (undo-tree-id4129 . -13) (undo-tree-id4130 . -13) (undo-tree-id4131 . -13) (undo-tree-id4132 . -13) (undo-tree-id4133 . -13) (undo-tree-id4134 . -13) (undo-tree-id4135 . -13) (undo-tree-id4136 . -13) (undo-tree-id4137 . -13) (undo-tree-id4138 . -13)) nil (26361 8802 72981 404000) 0 nil])
([nil nil ((3602 . 3609) (#("v" 0 1 (face font-lock-variable-name-face fontified t)) . -3602) (undo-tree-id4114 . -1) (undo-tree-id4115 . -1) 3603 (3602 . 3603)) nil (26361 8802 72963 922000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -1322) (undo-tree-id4153 . -6) 1328 (1322 . 1328) (#("      " 0 6 (fontified nil)) . 1321) (undo-tree-id4154 . -6) (1321 . 1328) (#("      " 0 6 (fontified nil)) . 1320) (undo-tree-id4155 . -6) (1320 . 1327) (#("      " 0 6 (fontified nil)) . 1319) (undo-tree-id4156 . -6) (1319 . 1326) (#("      " 0 6 (fontified nil)) . 1318) (undo-tree-id4157 . -6) (1318 . 1325) (#("      " 0 6 (fontified nil)) . 1317) (undo-tree-id4158 . -6) (1316 . 1324) (t 26361 8802 114688 124000)) nil (26361 8814 569728 442000) 0 nil])
([nil nil ((2969 . 2971) (2957 . 2969) (2953 . 2957) (#("    " 0 4 (fontified nil)) . 2952) (undo-tree-id4165 . -4) (2951 . 2957) (t 26361 8814 583853 439000)) nil (26361 8858 832538 209000) 0 nil])
([nil nil ((2974 . 2980) (2973 . 2979) (2972 . 2974) (2971 . 2972)) nil (26361 8858 832536 691000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2988) (undo-tree-id4163 . -4) 2992 (2988 . 2992) (#("    " 0 4 (fontified nil)) . 2987) (undo-tree-id4164 . -4) (2986 . 2992)) nil (26361 8858 832535 793000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3022 . 3023) (nil fontified nil 2988 . 3023) (2988 . 3023)) nil (26361 8858 832534 247000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3057 . 3058) (nil fontified nil 3023 . 3058) (3023 . 3058)) nil (26361 8858 832533 904000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3092 . 3093) (nil fontified nil 3058 . 3093) (3058 . 3093)) nil (26361 8858 832533 471000) 0 nil])
([nil nil ((#("sub1fun" 0 7 (face font-lock-function-name-face fontified t)) . 3067) (undo-tree-id4162 . -6)) nil (26361 8858 832532 881000) 0 nil])
([nil nil ((3067 . 3078) (#("b" 0 1 (face font-lock-function-name-face fontified t)) . -3067) (undo-tree-id4160 . -1) (#("o" 0 1 (face font-lock-function-name-face fontified t)) . -3068) (undo-tree-id4161 . -1) 3069 (3067 . 3069)) nil (26361 8858 832530 368000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-function-name-face fontified t)) . 3075)) nil (26361 8858 832527 476000) 0 nil])
([nil nil ((3035 . 3036) (#("1" 0 1 (face font-lock-function-name-face fontified t)) . 3035)) nil (26361 8858 832526 529000) 0 nil])
([nil nil ((3000 . 3001) (#("1" 0 1 (face font-lock-function-name-face fontified t)) . 3000) (undo-tree-id4159 . -1)) nil (26361 8858 832523 726000) 0 nil])
([nil nil ((3768 . 3770) (3766 . 3768) (3762 . 3766) (t 26361 8858 847431 37000)) nil (26361 8892 430034 470000) 0 nil])
([nil nil ((#("k" 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . 3769)) nil (26361 8892 430019 537000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3762) (undo-tree-id4170 . -4) 3766 (3761 . 3766)) nil (26361 8892 430018 999000) 0 nil])
([nil nil ((3775 . 3776) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -3775) (undo-tree-id4167 . -1) (undo-tree-id4168 . -1) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -3776) (undo-tree-id4169 . -1) 3777 (3770 . 3777)) nil (26361 8892 430017 670000) 0 nil])
([nil nil ((3824 . 3835) (3822 . 3824) (3818 . 3822) (#("    " 0 4 (fontified nil)) . 3817) (undo-tree-id4166 . -4) (3816 . 3822)) nil (26361 8892 430011 844000) 0 nil])
([nil nil ((#("s" 0 1 (c-in-sws t face font-lock-comment-face fontified t)) . 3775)) nil (26361 8892 430003 159000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3838 . 3839) (#("
" 0 1 (fontified nil)) . -3874) (3834 . 3875) 3828) nil (26361 8892 430002 133000) 0 nil])
([nil nil ((3868 . 3872)) nil (26361 8892 429995 990000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -1393) (undo-tree-id4218 . -1) (undo-tree-id4219 . -1) (undo-tree-id4220 . -1) (#("<" 0 1 (face (rainbow-delimiters-depth-5-face) c-<>-c-types-set t fontified t)) . -1394) (undo-tree-id4221 . -1) (undo-tree-id4222 . -1) (undo-tree-id4223 . -1) 1395 (#("class ContainerAllocator" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 24 (face font-lock-type-face fontified t)) . 1395) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1393 1393 nil nil nil t nil)) nil 17 nil #s(yas--field 1 1393 1393 nil nil nil t nil) #s(yas--field 1 1368 1393 nil nil nil t #s(yas--field 2 1395 1395 nil nil nil t #s(yas--field 3 1397 1397 nil nil nil t #s(yas--field 4 1399 1421 nil nil nil nil #s(yas--field 5 1423 1443 nil nil nil nil nil))))) nil)) (1388 . 1420) (#("Twist_<${1:class ContainerAllocator}>" 0 37 (fontified nil)) . 1388) (1388 . 1425) (#("Twist_<class ContainerAllocator>" 0 6 (fontified nil) 6 7 (fontified nil c-<>-c-types-set t category c-<-as-paren-syntax) 7 31 (fontified nil) 31 32 (fontified nil category c->-as-paren-syntax)) . -1388) (undo-tree-id4224 . -32) (1388 . 1420) (#("T" 0 1 (fontified t)) . -1388) (undo-tree-id4225 . -1) (undo-tree-id4226 . -1) 1389 (1388 . 1389) (1386 . 1388) (1383 . 1386) (#("ms" 0 2 (fontified nil)) . 1383) (1383 . 1385) (#("msg" 0 3 (fontified nil)) . -1383) (undo-tree-id4227 . -3) (1383 . 1386) (#("ms" 0 1 (fontified t) 1 2 (fontified t)) . -1383) (undo-tree-id4228 . -2) (undo-tree-id4229 . -2) 1385 (1383 . 1385) (1381 . 1383) (nil c-<>-c-types-set t 1368 . 1381) (nil face (rainbow-delimiters-depth-4-face) 1368 . 1381) (nil fontified nil 1368 . 1381) (1368 . 1381) (#("geo" 0 3 (fontified nil)) . 1368) (nil c-<>-c-types-set t 1368 . 1371) (nil face (rainbow-delimiters-depth-4-face) 1368 . 1371) (nil fontified nil 1368 . 1371) (1368 . 1371) (#("geometry_msgs" 0 13 (fontified nil)) . -1368) (undo-tree-id4230 . -13) (nil c-<>-c-types-set t 1368 . 1381) (nil face (rainbow-delimiters-depth-4-face) 1368 . 1381) (nil fontified nil 1368 . 1381) (1368 . 1381) (#("geo" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1368) (undo-tree-id4231 . -3) (undo-tree-id4232 . -3) 1371 (1368 . 1371) (#("s" 0 1 (fontified t)) . -1368) (undo-tree-id4233 . -1) (undo-tree-id4234 . -1) 1369 (#("t" 0 1 (fontified t)) . -1369) (undo-tree-id4235 . -1) (undo-tree-id4236 . -1) (#("d" 0 1 (fontified t)) . -1370) (undo-tree-id4237 . -1) (undo-tree-id4238 . -1) 1371 (1369 . 1371) (#("typename MessageT" 0 8 (face font-lock-keyword-face fontified nil) 8 9 (fontified nil) 9 17 (face font-lock-type-face fontified nil)) . 1369) (1368 . 1369) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1368 1393 nil nil nil t #s(yas--field 2 1395 1395 nil nil nil t #s(yas--field 3 1397 1397 nil nil nil t #s(yas--field 4 1399 1421 nil nil nil nil #s(yas--field 5 1423 1443 nil nil nil nil nil))))) #s(yas--field 2 1395 1395 nil nil nil t #s(yas--field 3 1397 1397 nil nil nil t #s(yas--field 4 1399 1421 nil nil nil nil #s(yas--field 5 1423 1443 nil nil nil nil nil)))) #s(yas--field 3 1397 1397 nil nil nil t #s(yas--field 4 1399 1421 nil nil nil nil #s(yas--field 5 1423 1443 nil nil nil nil nil))) #s(yas--field 4 1399 1421 nil nil nil nil #s(yas--field 5 1423 1443 nil nil nil nil nil)) #s(yas--field 5 1423 1443 nil nil nil nil nil)) nil 16 nil #s(yas--field 4 1399 1421 nil nil nil nil #s(yas--field 5 1423 1443 nil nil nil nil nil)) nil nil)) (1348 . 1483) (#("create_subscription<${1:typename MessageT}, ${2:typename CallbackT}>(${3:const std::string &topic_name}, ${4:const rclcpp::QoS &qos}, ${5:CallbackT &&callback})" 0 160 (fontified nil)) . 1348) (1348 . 1508) (#("create_subscription<typename MessageT, typename CallbackT, typename AllocatorT, typename SubscriptionT>(const std::string &topic_name, const rclcpp::QoS &qos, CallbackT &&callback, const SubscriptionOptionsWithAllocator<AllocatorT> &options = SubscriptionOptionsWithAllocator<AllocatorT>(), typename MessageMemoryStrategyT::SharedPtr msg_mem_strat = (
      MessageMemoryStrategyT::create_default()
    ))" 0 19 (fontified nil) 19 20 (fontified nil c-<>-c-types-set t category c-<-as-paren-syntax) 20 37 (fontified nil) 37 38 (fontified nil c-type c-<>-arg-sep) 38 57 (fontified nil) 57 58 (fontified nil c-type c-<>-arg-sep) 58 78 (fontified nil) 78 79 (fontified nil c-type c-<>-arg-sep) 79 102 (fontified nil) 102 103 (fontified nil category c->-as-paren-syntax) 103 219 (fontified nil) 219 220 (fontified nil c-<>-c-types-set t category c-<-as-paren-syntax) 220 230 (fontified nil) 230 231 (fontified nil category c->-as-paren-syntax) 231 275 (fontified nil) 275 276 (fontified nil c-<>-c-types-set t category c-<-as-paren-syntax) 276 286 (fontified nil) 286 287 (fontified nil category c->-as-paren-syntax) 287 405 (fontified nil)) . -1348) (undo-tree-id4239 . -405) (1348 . 1753) (#("create_s" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . -1348) (undo-tree-id4240 . -8) (undo-tree-id4241 . -8) 1356 (1352 . 1356) (#("a" 0 1 (fontified t)) . -1352) (undo-tree-id4242 . -1) (undo-tree-id4243 . -1) (#("t" 0 1 (fontified t)) . -1353) (undo-tree-id4244 . -1) (undo-tree-id4245 . -1) (#("e" 0 1 (fontified t)) . -1354) (undo-tree-id4246 . -1) (undo-tree-id4247 . -1) 1355 (1352 . 1355) (1348 . 1352) (#("v" 0 1 (fontified t)) . -1348) (undo-tree-id4248 . -1) (undo-tree-id4249 . -1) 1349 (1348 . 1349) (1347 . 1348) (1346 . 1347) (1342 . 1346) (#("th" 0 2 (fontified nil)) . 1342) (1342 . 1344) (#("this" 0 4 (fontified nil)) . -1342) (undo-tree-id4250 . -4) (1342 . 1346) (#("thi" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1342) (undo-tree-id4251 . -3) (undo-tree-id4252 . -3) 1345 (1339 . 1345) (1326 . 1339) (#("su" 0 2 (fontified nil)) . 1326) (1326 . 1328) (#("subscription1" 0 13 (fontified nil)) . -1326) (undo-tree-id4253 . -13) (1326 . 1339) (#("su" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -1326) (undo-tree-id4254 . -2) (undo-tree-id4255 . -2) 1328 (1326 . 1328) (1320 . 1326) (t 26361 8892 470860 701000)) nil (26361 9069 134087 124000) 0 nil])
([nil nil ((apply yas--snippet-revive 1388 1394 #s(yas--snippet nil (#s(yas--field 1 1393 1393 nil nil nil t nil)) nil 17 nil #s(yas--field 1 1393 1393 nil nil nil t nil) #s(yas--field 1 1368 1393 nil nil nil t #s(yas--field 2 1395 1395 nil nil nil t #s(yas--field 3 1397 1397 nil nil nil t #s(yas--field 4 1399 1421 nil nil nil nil #s(yas--field 5 1423 1443 nil nil nil nil nil))))) nil))) nil (26361 9069 134071 148000) 0 nil])
([nil nil ((#(">" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . 1393) (undo-tree-id4217 . 1)) nil (26361 9069 134070 802000) 0 nil])
([nil nil ((#("const std::string &topic_name" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 9 (face font-lock-constant-face fontified t) 9 11 (fontified t) 11 16 (face font-lock-type-face fontified t) 16 17 (face font-lock-type-face c-type c-decl-id-start fontified t) 17 19 (fontified t) 19 29 (face font-lock-variable-name-face fontified t)) . 1397) (#("typename CallbackT" 0 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 18 (face font-lock-type-face fontified t)) . 1395)) nil (26361 9069 134070 36000) 0 nil])
([nil nil ((apply yas--snippet-revive 1348 1444 #s(yas--snippet nil (#s(yas--field 1 1368 1393 nil nil nil t #s(yas--field 2 1395 1395 nil nil nil t #s(yas--field 3 1397 1397 nil nil nil t #s(yas--field 4 1399 1421 nil nil nil nil #s(yas--field 5 1423 1443 nil nil nil nil nil))))) #s(yas--field 2 1395 1395 nil nil nil t #s(yas--field 3 1397 1397 nil nil nil t #s(yas--field 4 1399 1421 nil nil nil nil #s(yas--field 5 1423 1443 nil nil nil nil nil)))) #s(yas--field 3 1397 1397 nil nil nil t #s(yas--field 4 1399 1421 nil nil nil nil #s(yas--field 5 1423 1443 nil nil nil nil nil))) #s(yas--field 4 1399 1421 nil nil nil nil #s(yas--field 5 1423 1443 nil nil nil nil nil)) #s(yas--field 5 1423 1443 nil nil nil nil nil)) nil 16 nil #s(yas--field 4 1399 1421 nil nil nil nil #s(yas--field 5 1423 1443 nil nil nil nil nil)) nil nil))) nil (26361 9069 134069 745000) 0 nil])
([nil nil ((#("," 0 1 (c-type c-<>-arg-sep fontified t)) . 1393)) nil (26361 9069 134069 279000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1393) (undo-tree-id4216 . -1)) nil (26361 9069 134068 958000) 0 nil])
([nil nil ((1396 . 1400) (#("s" 0 1 (face font-lock-string-face fontified t)) . -1396) (undo-tree-id4199 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1397) (undo-tree-id4200 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1398) (undo-tree-id4201 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -1399) (undo-tree-id4202 . -1) (#("_" 0 1 (face font-lock-string-face fontified t)) . -1400) (undo-tree-id4203 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -1401) (undo-tree-id4204 . -1) (#("u" 0 1 (face font-lock-string-face fontified t)) . -1402) (undo-tree-id4205 . -1) 1403 (1396 . 1403) (1395 . 1397) (#("\"" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -1395) (1395 . 1396) (#("s" 0 1 (fontified t)) . -1395) (undo-tree-id4206 . -1) (undo-tree-id4207 . -1) 1396 (1395 . 1396) (#("s" 0 1 (fontified t)) . -1395) (undo-tree-id4208 . -1) (undo-tree-id4209 . -1) (#("e" 0 1 (fontified t)) . -1396) (undo-tree-id4210 . -1) (undo-tree-id4211 . -1) (#("n" 0 1 (fontified t)) . -1397) (undo-tree-id4212 . -1) (undo-tree-id4213 . -1) (#("d" 0 1 (fontified t)) . -1398) (undo-tree-id4214 . -1) (undo-tree-id4215 . -1) 1399 (1395 . 1399)) nil (26361 9069 134065 266000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1402)) nil (26361 9069 134055 40000) 0 nil])
([nil nil ((#("const " 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t)) . 1402) (undo-tree-id4198 . -5)) nil (26361 9069 134054 647000) 0 nil])
([nil nil ((#("rclcpp" 0 6 (face font-lock-constant-face fontified t)) . 1402) (undo-tree-id4197 . -5)) nil (26361 9069 134053 551000) 0 nil])
([nil nil ((#("::" 0 2 (fontified t)) . 1402) (undo-tree-id4196 . -1)) nil (26361 9069 134052 845000) 0 nil])
([nil nil ((#("QoS " 0 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (fontified t)) . 1402) (undo-tree-id4195 . -3)) nil (26361 9069 134052 74000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t)) . 1402)) nil (26361 9069 134051 252000) 0 nil])
([nil nil ((#("qos" 0 3 (fontified t)) . 1402) (undo-tree-id4194 . -2)) nil (26361 9069 134050 770000) 0 nil])
([nil nil ((1402 . 1403)) nil (26361 9069 134050 84000) 0 nil])
([nil nil ((#("      currentqol.best_effort();
" 0 6 (fontified t) 6 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-4-face) fontified t) 29 30 (face (rainbow-delimiters-depth-4-face) fontified t) 30 31 (fontified t) 31 32 (fontified t)) . 897) (undo-tree-id4191 . -31) (undo-tree-id4192 . -32) (undo-tree-id4193 . -5) 902) nil (26361 9069 134049 533000) 0 nil])
([nil nil ((apply yas--snippet-revive 896 909 #s(yas--snippet nil nil nil 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 18 nil nil nil nil)) (896 . 909) (#("best_effort()" 0 13 (fontified nil)) . 896) (896 . 909) (#("best_effort()" 0 13 (fontified nil)) . -896) (undo-tree-id4188 . -13) (896 . 909) (#("bes" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -896) (undo-tree-id4189 . -3) (undo-tree-id4190 . -3) 899 (895 . 899)) nil (26361 9069 134046 788000) 0 nil])
([nil nil ((855 . 861)) nil (26361 9069 134045 186000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1391) (undo-tree-id4184 . -1) (undo-tree-id4185 . -1) (#("u" 0 1 (fontified t)) . -1392) (undo-tree-id4186 . -1) (undo-tree-id4187 . -1) 1393 (1390 . 1393)) nil (26361 9069 134044 655000) 0 nil])
([nil nil ((1392 . 1402) (#("currentqol" 0 10 (fontified nil)) . 1392) (1392 . 1402) (#("currentqol" 0 10 (fontified t)) . -1392) (undo-tree-id4179 . -10) (undo-tree-id4180 . -10) 1402 (1392 . 1402) (#("cu" 0 2 (fontified nil)) . 1392) (1392 . 1394) (#("currentqol" 0 10 (fontified nil)) . -1392) (undo-tree-id4181 . -10) (1392 . 1402) (#("cu" 0 1 (fontified t) 1 2 (fontified t)) . -1392) (undo-tree-id4182 . -2) (undo-tree-id4183 . -2) 1394 (1392 . 1394)) nil (26361 9069 134040 832000) 0 nil])
([nil nil ((#("CallbackT " 0 9 (face font-lock-type-face fontified t) 9 10 (fontified t)) . 1404) (undo-tree-id4178 . -9)) nil (26361 9069 134037 417000) 0 nil])
([nil nil ((#("&&" 0 2 (fontified t)) . 1404) (undo-tree-id4177 . -1)) nil (26361 9069 134035 923000) 0 nil])
([nil nil ((#("callback" 0 8 (fontified t)) . 1404) (undo-tree-id4176 . -7)) nil (26361 9069 134034 734000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -1411) (undo-tree-id4171 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . 1412) (#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -1412) (undo-tree-id4172 . -1) 1413 (apply yas--snippet-revive 1404 1413 #s(yas--snippet nil nil nil 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 19 nil nil nil nil)) (1404 . 1413) (#("sub1fun()" 0 9 (fontified nil)) . 1404) (1404 . 1413) (#("su" 0 2 (fontified nil)) . 1404) (1404 . 1406) (#("sub1fun()" 0 9 (fontified nil)) . -1404) (undo-tree-id4173 . -9) (1404 . 1413) (#("su" 0 1 (fontified t) 1 2 (fontified t)) . -1404) (undo-tree-id4174 . -2) (undo-tree-id4175 . -2) 1406 (1404 . 1406)) nil (26361 9069 134032 19000) 0 nil])
([nil nil ((1411 . 1412) (#(")" 0 1 (face font-lock-type-face fontified nil)) . -1411) (1411 . 1412)) nil (26361 9069 134022 459000) 0 nil])
([nil nil ((1412 . 1413)) nil (26361 9069 134018 427000) 0 nil])
([nil nil ((1404 . 1405) (t 26361 9069 149008 837000)) nil (26361 9075 868188 95000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t)) . 1404) (undo-tree-id4256 . -1) (undo-tree-id4257 . -1) (t 26361 9075 909087 855000)) nil (26361 9077 229174 270000) 0 nil])
([nil nil ((3078 . 3079) (3076 . 3078) (3073 . 3076) (#("msg" 0 3 (fontified nil)) . -3073) (undo-tree-id4588 . -3) (3073 . 3076) (#("ms" 0 1 (fontified t) 1 2 (fontified t)) . -3073) (undo-tree-id4589 . -2) (undo-tree-id4590 . -2) 3075 (3073 . 3075) (3071 . 3073) (nil fontified nil 3063 . 3071) (nil face (rainbow-delimiters-depth-3-face) 3063 . 3071) (3063 . 3071) (#("st" 0 2 (fontified nil)) . 3063) (nil fontified nil 3063 . 3065) (nil face (rainbow-delimiters-depth-3-face) 3063 . 3065) (3063 . 3065) (#("std_msgs" 0 8 (fontified nil)) . -3063) (undo-tree-id4591 . -8) (nil fontified nil 3063 . 3071) (nil face (rainbow-delimiters-depth-3-face) 3063 . 3071) (3063 . 3071) (#("st" 0 1 (fontified t) 1 2 (fontified t)) . -3063) (undo-tree-id4592 . -2) (undo-tree-id4593 . -2) 3065 (3063 . 3065) (t 26361 9077 244103 436000)) nil (26361 9205 646844 707000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-constant-face fontified t)) . 3067) (undo-tree-id4586 . -1) (undo-tree-id4587 . -1)) nil (26361 9205 646840 222000) 0 nil])
([nil nil ((#("std_sgs::msg::T" 0 4 (face font-lock-constant-face fontified t) 4 7 (face font-lock-constant-face fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 12 (face font-lock-constant-face fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t)) . 3063) (undo-tree-id4268 . -14) (undo-tree-id4269 . -14) (undo-tree-id4270 . 11) (undo-tree-id4271 . -14) (undo-tree-id4272 . -4) (undo-tree-id4273 . -4) (undo-tree-id4274 . -4) (undo-tree-id4275 . -4) (undo-tree-id4276 . -4) (undo-tree-id4277 . -4) (undo-tree-id4278 . -4) (undo-tree-id4279 . -4) (undo-tree-id4280 . -4) (undo-tree-id4281 . -4) (undo-tree-id4282 . -4) (undo-tree-id4283 . -4) (undo-tree-id4284 . -4) (undo-tree-id4285 . -4) (undo-tree-id4286 . -4) (undo-tree-id4287 . -4) (undo-tree-id4288 . -4) (undo-tree-id4289 . -4) (undo-tree-id4290 . -4) (undo-tree-id4291 . -4) (undo-tree-id4292 . -4) (undo-tree-id4293 . -4) (undo-tree-id4294 . -4) (undo-tree-id4295 . -4) (undo-tree-id4296 . -4) (undo-tree-id4297 . -4) (undo-tree-id4298 . -4) (undo-tree-id4299 . -4) (undo-tree-id4300 . -4) (undo-tree-id4301 . -4) (undo-tree-id4302 . -4) (undo-tree-id4303 . -4) (undo-tree-id4304 . -4) (undo-tree-id4305 . -4) (undo-tree-id4306 . -4) (undo-tree-id4307 . -4) (undo-tree-id4308 . -4) (undo-tree-id4309 . -4) (undo-tree-id4310 . -4) (undo-tree-id4311 . -4) (undo-tree-id4312 . -4) (undo-tree-id4313 . -4) (undo-tree-id4314 . -4) (undo-tree-id4315 . -4) (undo-tree-id4316 . -4) (undo-tree-id4317 . -4) (undo-tree-id4318 . -4) (undo-tree-id4319 . -4) (undo-tree-id4320 . -4) (undo-tree-id4321 . -4) (undo-tree-id4322 . -4) (undo-tree-id4323 . -4) (undo-tree-id4324 . -4) (undo-tree-id4325 . -4) (undo-tree-id4326 . -4) (undo-tree-id4327 . -4) (undo-tree-id4328 . -4) (undo-tree-id4329 . -4) (undo-tree-id4330 . -4) (undo-tree-id4331 . -4) (undo-tree-id4332 . -4) (undo-tree-id4333 . -4) (undo-tree-id4334 . -4) (undo-tree-id4335 . -4) (undo-tree-id4336 . -4) (undo-tree-id4337 . -4) (undo-tree-id4338 . -4) (undo-tree-id4339 . -4) (undo-tree-id4340 . -4) (undo-tree-id4341 . -4) (undo-tree-id4342 . -4) (undo-tree-id4343 . -4) (undo-tree-id4344 . -4) (undo-tree-id4345 . -4) (undo-tree-id4346 . -4) (undo-tree-id4347 . -4) (undo-tree-id4348 . -4) (undo-tree-id4349 . -4) (undo-tree-id4350 . -4) (undo-tree-id4351 . -4) (undo-tree-id4352 . -4) (undo-tree-id4353 . -4) (undo-tree-id4354 . -4) (undo-tree-id4355 . -4) (undo-tree-id4356 . -4) (undo-tree-id4357 . -4) (undo-tree-id4358 . -4) (undo-tree-id4359 . -4) (undo-tree-id4360 . -4) (undo-tree-id4361 . -4) (undo-tree-id4362 . -4) (undo-tree-id4363 . -4) (undo-tree-id4364 . -4) (undo-tree-id4365 . -4) (undo-tree-id4366 . -4) (undo-tree-id4367 . -4) (undo-tree-id4368 . -4) (undo-tree-id4369 . -4) (undo-tree-id4370 . -4) (undo-tree-id4371 . -4) (undo-tree-id4372 . -4) (undo-tree-id4373 . -4) (undo-tree-id4374 . -4) (undo-tree-id4375 . -4) (undo-tree-id4376 . -4) (undo-tree-id4377 . -4) (undo-tree-id4378 . -4) (undo-tree-id4379 . -4) (undo-tree-id4380 . -4) (undo-tree-id4381 . -4) (undo-tree-id4382 . -4) (undo-tree-id4383 . -4) (undo-tree-id4384 . -4) (undo-tree-id4385 . -4) (undo-tree-id4386 . -4) (undo-tree-id4387 . -4) (undo-tree-id4388 . -4) (undo-tree-id4389 . -4) (undo-tree-id4390 . -4) (undo-tree-id4391 . -4) (undo-tree-id4392 . -4) (undo-tree-id4393 . -4) (undo-tree-id4394 . -4) (undo-tree-id4395 . -4) (undo-tree-id4396 . -4) (undo-tree-id4397 . -4) (undo-tree-id4398 . -4) (undo-tree-id4399 . -4) (undo-tree-id4400 . -4) (undo-tree-id4401 . -4) (undo-tree-id4402 . -4) (undo-tree-id4403 . -4) (undo-tree-id4404 . -4) (undo-tree-id4405 . -4) (undo-tree-id4406 . -4) (undo-tree-id4407 . -4) (undo-tree-id4408 . -4) (undo-tree-id4409 . -4) (undo-tree-id4410 . -4) (undo-tree-id4411 . -4) (undo-tree-id4412 . -4) (undo-tree-id4413 . -4) (undo-tree-id4414 . -4) (undo-tree-id4415 . -4) (undo-tree-id4416 . -4) (undo-tree-id4417 . -4) (undo-tree-id4418 . -4) (undo-tree-id4419 . -4) (undo-tree-id4420 . -4) (undo-tree-id4421 . -4) (undo-tree-id4422 . -4) (undo-tree-id4423 . -4) (undo-tree-id4424 . -4) (undo-tree-id4425 . -4) (undo-tree-id4426 . -4) (undo-tree-id4427 . -4) (undo-tree-id4428 . -4) (undo-tree-id4429 . -4) (undo-tree-id4430 . -4) (undo-tree-id4431 . -4) (undo-tree-id4432 . -4) (undo-tree-id4433 . -4) (undo-tree-id4434 . -4) (undo-tree-id4435 . -4) (undo-tree-id4436 . -4) (undo-tree-id4437 . -4) (undo-tree-id4438 . -4) (undo-tree-id4439 . -4) (undo-tree-id4440 . -4) (undo-tree-id4441 . -4) (undo-tree-id4442 . -4) (undo-tree-id4443 . -4) (undo-tree-id4444 . -4) (undo-tree-id4445 . -4) (undo-tree-id4446 . -4) (undo-tree-id4447 . -4) (undo-tree-id4448 . -4) (undo-tree-id4449 . -4) (undo-tree-id4450 . -4) (undo-tree-id4451 . -4) (undo-tree-id4452 . -4) (undo-tree-id4453 . -4) (undo-tree-id4454 . -4) (undo-tree-id4455 . -4) (undo-tree-id4456 . -4) (undo-tree-id4457 . -4) (undo-tree-id4458 . -3) (undo-tree-id4459 . -3) (undo-tree-id4460 . -3) (undo-tree-id4461 . -3) (undo-tree-id4462 . -3) (undo-tree-id4463 . -3) (undo-tree-id4464 . -3) (undo-tree-id4465 . -3) (undo-tree-id4466 . -3) (undo-tree-id4467 . -3) (undo-tree-id4468 . -3) (undo-tree-id4469 . -3) (undo-tree-id4470 . -3) (undo-tree-id4471 . -3) (undo-tree-id4472 . -3) (undo-tree-id4473 . -3) (undo-tree-id4474 . -3) (undo-tree-id4475 . -3) (undo-tree-id4476 . -3) (undo-tree-id4477 . -3) (undo-tree-id4478 . -3) (undo-tree-id4479 . -3) (undo-tree-id4480 . -3) (undo-tree-id4481 . -3) (undo-tree-id4482 . -3) (undo-tree-id4483 . -3) (undo-tree-id4484 . -3) (undo-tree-id4485 . -3) (undo-tree-id4486 . -3) (undo-tree-id4487 . -3) (undo-tree-id4488 . -3) (undo-tree-id4489 . -3) (undo-tree-id4490 . -3) (undo-tree-id4491 . -3) (undo-tree-id4492 . -3) (undo-tree-id4493 . -3) (undo-tree-id4494 . -3) (undo-tree-id4495 . -3) (undo-tree-id4496 . -3) (undo-tree-id4497 . -3) (undo-tree-id4498 . -3) (undo-tree-id4499 . -3) (undo-tree-id4500 . -3) (undo-tree-id4501 . -3) (undo-tree-id4502 . -3) (undo-tree-id4503 . -3) (undo-tree-id4504 . -3) (undo-tree-id4505 . -3) (undo-tree-id4506 . -3) (undo-tree-id4507 . -3) (undo-tree-id4508 . -3) (undo-tree-id4509 . -3) (undo-tree-id4510 . -3) (undo-tree-id4511 . -3) (undo-tree-id4512 . -3) (undo-tree-id4513 . -3) (undo-tree-id4514 . -3) (undo-tree-id4515 . -3) (undo-tree-id4516 . -3) (undo-tree-id4517 . -3) (undo-tree-id4518 . -3) (undo-tree-id4519 . -3) (undo-tree-id4520 . -3) (undo-tree-id4521 . -3) (undo-tree-id4522 . -3) (undo-tree-id4523 . -3) (undo-tree-id4524 . -3) (undo-tree-id4525 . -3) (undo-tree-id4526 . -3) (undo-tree-id4527 . -3) (undo-tree-id4528 . -3) (undo-tree-id4529 . -3) (undo-tree-id4530 . -3) (undo-tree-id4531 . -3) (undo-tree-id4532 . -3) (undo-tree-id4533 . -3) (undo-tree-id4534 . -3) (undo-tree-id4535 . -3) (undo-tree-id4536 . -3) (undo-tree-id4537 . -3) (undo-tree-id4538 . -3) (undo-tree-id4539 . -3) (undo-tree-id4540 . -3) (undo-tree-id4541 . -3) (undo-tree-id4542 . -3) (undo-tree-id4543 . -3) (undo-tree-id4544 . -3) (undo-tree-id4545 . -3) (undo-tree-id4546 . -3) (undo-tree-id4547 . -3) (undo-tree-id4548 . -3) (undo-tree-id4549 . -3) (undo-tree-id4550 . -3) (undo-tree-id4551 . -3) (undo-tree-id4552 . -3) (undo-tree-id4553 . -14) (undo-tree-id4554 . -14) (undo-tree-id4555 . -14) (undo-tree-id4556 . -14) (undo-tree-id4557 . -14) (undo-tree-id4558 . -14) (undo-tree-id4559 . -14) (undo-tree-id4560 . -14) (undo-tree-id4561 . -14) (undo-tree-id4562 . -14) (undo-tree-id4563 . -14) (undo-tree-id4564 . -14) (undo-tree-id4565 . -14) (undo-tree-id4566 . -14) (undo-tree-id4567 . -14) (undo-tree-id4568 . -14) (undo-tree-id4569 . -14) (undo-tree-id4570 . -14) (undo-tree-id4571 . -14) (undo-tree-id4572 . -14) (undo-tree-id4573 . -14) (undo-tree-id4574 . -14) (undo-tree-id4575 . -14) (undo-tree-id4576 . -14) (undo-tree-id4577 . -4) (undo-tree-id4578 . -14) (undo-tree-id4579 . -14) (undo-tree-id4580 . -14) (undo-tree-id4581 . -14) (undo-tree-id4582 . -14) (undo-tree-id4583 . -14) (undo-tree-id4584 . -15) (undo-tree-id4585 . -15) 3077) nil (26361 9205 646833 991000) 0 nil])
([nil nil ((3094 . 3103) (3090 . 3094) (3088 . 3090) (#(" " 0 1 (fontified t)) . -3088) (undo-tree-id4258 . -1) 3089 (3088 . 3089) (3083 . 3088) (#("Twist" 0 5 (fontified nil)) . -3083) (undo-tree-id4259 . -5) (3083 . 3088) (#("T" 0 1 (fontified t)) . -3083) (undo-tree-id4260 . -1) (undo-tree-id4261 . -1) 3084 (3083 . 3084) (3081 . 3083) (3078 . 3081) (#("msg" 0 3 (fontified nil)) . -3078) (undo-tree-id4262 . -3) (3078 . 3081) (#("Ms" 0 1 (fontified t) 1 2 (fontified t)) . -3078) (undo-tree-id4263 . -2) (undo-tree-id4264 . -2) 3080 (3078 . 3080) (3076 . 3078) (nil fontified nil 3063 . 3076) (nil face (rainbow-delimiters-depth-3-face) 3063 . 3076) (3063 . 3076) (#("geo" 0 3 (fontified nil)) . 3063) (nil fontified nil 3063 . 3066) (nil face (rainbow-delimiters-depth-3-face) 3063 . 3066) (3063 . 3066) (#("geometry_msgs" 0 13 (fontified nil)) . -3063) (undo-tree-id4265 . -13) (nil fontified nil 3063 . 3076) (nil face (rainbow-delimiters-depth-3-face) 3063 . 3076) (3063 . 3076) (#("geo" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -3063) (undo-tree-id4266 . -3) (undo-tree-id4267 . -3) 3066 (3063 . 3066)) nil (26361 9205 646319 486000) 0 nil])
([nil nil ((#("sub1fun" 0 7 (fontified t)) . 1404) (undo-tree-id4610 . -6) (t 26361 9205 662567 614000)) nil (26361 9279 499033 226000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-6-face) fontified nil)) . -1451) (undo-tree-id4596 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-6-face) fontified t)) . 1452) (#("int msg" 0 3 (face font-lock-type-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-variable-name-face fontified t)) . 1452) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1451 1451 nil nil nil t nil)) nil 21 nil #s(yas--field 1 1451 1451 nil nil nil t nil) nil nil)) (1444 . 1460) (#("sub1fun(${1:int msg})" 0 21 (fontified nil)) . 1444) (1444 . 1465) (#("sub1fun(int msg)" 0 16 (fontified nil)) . -1444) (undo-tree-id4597 . -16) (1444 . 1460) (#("su" 0 1 (fontified t) 1 2 (fontified t)) . -1444) (undo-tree-id4598 . -2) (undo-tree-id4599 . -2) 1446 (1444 . 1446) (1443 . 1444) (1442 . 1443) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -1442) (undo-tree-id4600 . -1) (undo-tree-id4601 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . 1443) (#(":" 0 1 (face font-lock-string-face fontified t)) . -1443) (undo-tree-id4602 . -1) (undo-tree-id4603 . -1) 1444 (1443 . 1444) (1442 . 1444) (#("\"" 0 1 (fontified nil)) . -1442) (1442 . 1443) (1437 . 1442) (#("Sa" 0 2 (fontified nil)) . 1437) (1437 . 1439) (#("Sayer" 0 5 (fontified nil)) . -1437) (undo-tree-id4604 . -5) (1437 . 1442) (#("Sa" 0 1 (fontified t) 1 2 (fontified t)) . -1437) (undo-tree-id4605 . -2) (undo-tree-id4606 . -2) 1439 (1436 . 1439) (apply yas--snippet-revive 1431 1437 #s(yas--snippet nil nil #s(yas--exit 1436 nil) 20 nil nil nil nil)) (48 . 70) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1436 nil) 20 nil nil nil nil)) (1409 . 1415) (#("bind($0)" 0 8 (fontified nil)) . 1409) (1409 . 1417) (#("b" 0 1 (fontified nil)) . 1409) (1409 . 1410) (#("bind(…)" 0 7 (fontified nil)) . -1409) (undo-tree-id4607 . -7) (1409 . 1416) (#("bind" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -1409) (undo-tree-id4608 . -4) (undo-tree-id4609 . -4) 1413 (1409 . 1413) (1407 . 1409) (1404 . 1407)) nil (26361 9279 499029 112000) 0 nil])
([nil nil ((apply yas--snippet-revive 1444 1451 #s(yas--snippet nil (#s(yas--field 1 1451 1451 nil nil nil t nil)) nil 21 nil #s(yas--field 1 1451 1451 nil nil nil t nil) nil nil))) nil (26361 9279 499019 812000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . 1451) (undo-tree-id4595 . 1)) nil (26361 9279 499019 318000) 0 nil])
([nil nil ((1452 . 1457) (1451 . 1452) (#(" " 0 1 (fontified t)) . -1451) (undo-tree-id4594 . -1) 1452 (1451 . 1452)) nil (26361 9279 499016 721000) 0 nil])
([nil nil ((1458 . 1459) (#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -1458) (1458 . 1459)) nil (26361 9279 499005 142000) 0 nil])
([nil nil ((1478 . 1480) (#("_1" 0 2 (fontified nil)) . -1478) (undo-tree-id4611 . -2) (1478 . 1480) (1476 . 1478) (1464 . 1476) (#("p" 0 1 (fontified nil)) . 1464) (1464 . 1465) (#("placeholders" 0 12 (fontified nil)) . -1464) (undo-tree-id4612 . -12) (1464 . 1476) (#("pla" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1464) (undo-tree-id4613 . -3) (undo-tree-id4614 . -3) 1467 (1464 . 1467) (1462 . 1464) (1458 . 1462) (1457 . 1458) (#(" " 0 1 (fontified t)) . -1457) (undo-tree-id4615 . -1) 1458 (1457 . 1458) (t 26361 9279 541382 801000)) nil (26361 9399 731421 910000) 0 nil])
([nil nil ((#("void sub3fun() {
      
    }

    void sub2fun() {
      
    }

    void subboolfun() {
      
    }" 0 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face c-type c-decl-id-start fontified t) 4 5 (fontified t) 5 8 (face font-lock-function-name-face fontified t) 8 9 (face font-lock-function-name-face fontified t) 9 12 (face font-lock-function-name-face fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t) 13 14 (face (rainbow-delimiters-depth-3-face) fontified t) 14 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-3-face) fontified t) 16 17 (fontified t) 17 24 (fontified t) 24 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-3-face) fontified t) 29 30 (fontified t) 30 31 (fontified t rear-nonsticky t) 31 35 (fontified t) 35 38 (face font-lock-type-face fontified t) 38 39 (face font-lock-type-face c-type c-decl-id-start fontified t) 39 40 (fontified t) 40 43 (face font-lock-function-name-face fontified t) 43 44 (face font-lock-function-name-face fontified t) 44 47 (face font-lock-function-name-face fontified t) 47 48 (face (rainbow-delimiters-depth-3-face) fontified t) 48 49 (face (rainbow-delimiters-depth-3-face) fontified t) 49 50 (fontified t) 50 51 (face (rainbow-delimiters-depth-3-face) fontified t) 51 63 (fontified t) 63 64 (face (rainbow-delimiters-depth-3-face) fontified t) 64 65 (fontified t) 65 66 (fontified t rear-nonsticky t) 66 70 (fontified t) 70 73 (face font-lock-type-face fontified t) 73 74 (face font-lock-type-face c-type c-decl-id-start fontified t) 74 75 (fontified t) 75 76 (face font-lock-function-name-face fontified t) 76 77 (face font-lock-function-name-face fontified t) 77 78 (face font-lock-function-name-face fontified t) 78 79 (face font-lock-function-name-face fontified t) 79 80 (face font-lock-function-name-face fontified t) 80 81 (face font-lock-function-name-face fontified t) 81 82 (face font-lock-function-name-face fontified t) 82 83 (face font-lock-function-name-face fontified t) 83 84 (face font-lock-function-name-face fontified t) 84 85 (face font-lock-function-name-face fontified t) 85 86 (face (rainbow-delimiters-depth-3-face) fontified t) 86 87 (face (rainbow-delimiters-depth-3-face) fontified t) 87 88 (fontified t) 88 89 (face (rainbow-delimiters-depth-3-face) fontified t) 89 90 (fontified t) 90 101 (fontified t) 101 102 (face (rainbow-delimiters-depth-3-face) fontified t)) . 3195) (undo-tree-id4638 . -101) (undo-tree-id4639 . -101) (undo-tree-id4640 . -101) (undo-tree-id4641 . -31) (t 26361 9399 747263 242000)) nil (26361 9448 845337 272000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3264 . 3265) (nil fontified nil 3190 . 3265) (3190 . 3265)) nil (26361 9448 845335 341000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3339 . 3340) (nil fontified nil 3265 . 3340) (3265 . 3340)) nil (26361 9448 845334 601000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3413 . 3414) (nil fontified nil 3339 . 3414) (3339 . 3414)) nil (26361 9448 845333 922000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3339) (undo-tree-id4637 . -4) 3343 (3338 . 3343)) nil (26361 9448 845333 100000) 0 nil])
([nil nil ((#("geometry" 0 8 (face font-lock-constant-face fontified t)) . 3357) (undo-tree-id4636 . -7)) nil (26361 9448 845331 911000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-constant-face fontified t)) . 3357)) nil (26361 9448 845330 651000) 0 nil])
([nil nil ((#("msgs" 0 4 (face font-lock-constant-face fontified t)) . 3357) (undo-tree-id4635 . -3)) nil (26361 9448 845330 282000) 0 nil])
([nil nil ((#("::" 0 2 (fontified t)) . 3357) (undo-tree-id4634 . -1)) nil (26361 9448 845329 33000) 0 nil])
([nil nil ((#("msg" 0 3 (face font-lock-constant-face fontified t)) . 3357) (undo-tree-id4633 . -2)) nil (26361 9448 845327 889000) 0 nil])
([nil nil ((#("::" 0 2 (fontified t)) . 3357) (undo-tree-id4632 . -1)) nil (26361 9448 845327 176000) 0 nil])
([nil nil ((#("Twist" 0 5 (face font-lock-constant-face fontified t)) . 3357) (undo-tree-id4631 . -4)) nil (26361 9448 845326 347000) 0 nil])
([nil nil ((3357 . 3358)) nil (26361 9448 845325 632000) 0 nil])
([nil nil ((3372 . 3376) (#("Bool" 0 4 (fontified nil)) . -3372) (undo-tree-id4618 . -4) (3372 . 3376) (#("B" 0 1 (face font-lock-constant-face fontified t)) . -3372) (undo-tree-id4619 . -1) (undo-tree-id4620 . -1) 3373 (3372 . 3373) (3370 . 3372) (3367 . 3370) (#("msg" 0 3 (fontified nil)) . -3367) (undo-tree-id4621 . -3) (3367 . 3370) (#("ms" 0 1 (face font-lock-constant-face fontified t) 1 2 (face font-lock-constant-face fontified t)) . -3367) (undo-tree-id4622 . -2) (undo-tree-id4623 . -2) 3369 (3367 . 3369) (3365 . 3367) (nil face (rainbow-delimiters-depth-3-face) 3357 . 3365) (nil fontified nil 3357 . 3365) (3357 . 3365) (#("st" 0 2 (fontified nil)) . 3357) (nil face (rainbow-delimiters-depth-3-face) 3357 . 3359) (nil fontified nil 3357 . 3359) (3357 . 3359) (#("std_msgs" 0 8 (fontified nil)) . -3357) (undo-tree-id4624 . -8) (nil face (rainbow-delimiters-depth-3-face) 3357 . 3365) (nil fontified nil 3357 . 3365) (3357 . 3365) (#("std" 0 1 (face font-lock-constant-face fontified t) 1 2 (face font-lock-constant-face fontified t) 2 3 (face font-lock-constant-face fontified t)) . -3357) (undo-tree-id4625 . -3) (undo-tree-id4626 . -3) 3360 (3357 . 3360) (#("g" 0 1 (face font-lock-constant-face fontified t)) . -3357) (undo-tree-id4627 . -1) (undo-tree-id4628 . -1) 3358 (3357 . 3358) (#("b" 0 1 (face font-lock-constant-face fontified t)) . -3357) (undo-tree-id4629 . -1) (undo-tree-id4630 . -1) 3358 (3357 . 3358)) nil (26361 9448 845323 272000) 0 nil])
([nil nil ((#("l" 0 1 (face font-lock-constant-face fontified t)) . 3375)) nil (26361 9448 845315 274000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 3375) (undo-tree-id4617 . 1)) nil (26361 9448 845314 758000) 0 nil])
([nil nil ((3375 . 3376)) nil (26361 9448 845312 519000) 0 nil])
([nil nil ((3375 . 3376) (#(";" 0 1 (fontified t)) . -3375) (undo-tree-id4616 . -1) 3376) nil (26361 9448 845309 924000) 0 nil])
([nil nil ((#("Twist" 0 5 (face font-lock-constant-face fontified t)) . 3227) (undo-tree-id4645 . -4) (t 26361 9448 852143 174000)) nil (26361 9453 965198 293000) 0 nil])
([nil nil ((3227 . 3234) (#("V" 0 1 (fontified nil)) . 3227) (3227 . 3228) (#("Vector3" 0 7 (fontified nil)) . -3227) (undo-tree-id4642 . -7) (3227 . 3234) (#("V" 0 1 (face font-lock-constant-face fontified t)) . -3227) (undo-tree-id4643 . -1) (undo-tree-id4644 . -1) 3228 (3227 . 3228)) nil (26361 9453 965194 715000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3190) (undo-tree-id4646 . -4) 3194 (3189 . 3194) (t 26361 9454 7032 644000)) nil (26361 9457 417521 728000) 0 nil])
([nil nil ((3177 . 3183) (#("      " 0 6 (fontified t)) . 3177) (t 26361 9457 458959 358000)) nil (26361 9482 569042 136000) 0 nil])
([nil nil ((4235 . 4247) (4227 . 4235) (4217 . 4227) (4215 . 4217) (4210 . 4215) (4208 . 4210) (4204 . 4208) (#("    " 0 4 (fontified nil)) . 4203) (undo-tree-id4655 . -4) (4202 . 4208)) nil (26361 9482 569040 810000) 0 nil])
([nil nil ((4276 . 4277) (4269 . 4276) (4268 . 4269) (4251 . 4268) (#("Co" 0 1 (fontified nil c-is-sws t) 1 2 (fontified nil)) . 4251) (4251 . 4253) (#("CommunicationData" 0 1 (fontified nil c-is-sws t) 1 17 (fontified nil)) . -4251) (undo-tree-id4647 . -17) (4251 . 4268) (#("Co" 0 1 (c-is-sws t fontified t) 1 2 (fontified t)) . -4251) (undo-tree-id4648 . -2) (undo-tree-id4649 . -2) 4253 (4252 . 4253) (4251 . 4252) (#("c" 0 1 (c-is-sws t fontified t)) . -4251) (undo-tree-id4650 . -1) (undo-tree-id4651 . -1) 4252 (4251 . 4252) (#("c" 0 1 (c-is-sws t fontified t)) . -4251) (undo-tree-id4652 . -1) (undo-tree-id4653 . -1) 4252 (4251 . 4252) (4247 . 4251) (#(" " 0 1 (c-in-sws t face font-lock-comment-face fontified nil)) . 4246) (undo-tree-id4654 . -1) (4247 . 4248)) nil (26361 9482 569035 823000) 0 nil])
([nil nil ((3207 . 3208) (3206 . 3207) (#("z" 0 1 (fontified t)) . -3206) (undo-tree-id4782 . -1) 3207 (3206 . 3207) (3198 . 3206) (3195 . 3198) (#("ms" 0 2 (fontified nil)) . 3195) (3195 . 3197) (#("msg" 0 3 (fontified nil)) . -3195) (undo-tree-id4783 . -3) (3195 . 3198) (#("ms" 0 1 (fontified t) 1 2 (fontified t)) . -3195) (undo-tree-id4784 . -2) (undo-tree-id4785 . -2) 3197 (3195 . 3197) (#("g" 0 1 (fontified t)) . -3195) (undo-tree-id4786 . -1) (#("l" 0 1 (fontified t)) . -3196) (undo-tree-id4787 . -1) (#("o" 0 1 (fontified t)) . -3197) (undo-tree-id4788 . -1) (#("s" 0 1 (fontified t)) . -3198) (undo-tree-id4789 . -1) (#("e" 0 1 (fontified t)) . -3199) (undo-tree-id4790 . -1) (#("n" 0 1 (fontified t)) . -3200) (undo-tree-id4791 . -1) (#("d" 0 1 (fontified t)) . -3201) (undo-tree-id4792 . -1) 3202 (3195 . 3202) (#("g" 0 1 (fontified nil)) . 3195) (3195 . 3196) (#("glosend" 0 7 (fontified nil)) . -3195) (undo-tree-id4793 . -7) (3195 . 3202) (#("g" 0 1 (fontified t)) . -3195) (undo-tree-id4794 . -1) (undo-tree-id4795 . -1) 3196 (3195 . 3196) (3192 . 3195) (3191 . 3192) (#("x" 0 1 (fontified t)) . -3191) (undo-tree-id4796 . -1) (undo-tree-id4797 . -1) 3192 (3191 . 3192) (#("z" 0 1 (fontified t)) . -3191) (undo-tree-id4798 . -1) (undo-tree-id4799 . -1) 3192 (3191 . 3192) (#("a" 0 1 (fontified t)) . -3191) (undo-tree-id4800 . -1) (#("x" 0 1 (fontified t)) . -3192) (undo-tree-id4801 . -1) (#(" " 0 1 (fontified t)) . -3193) (undo-tree-id4802 . -1) 3194 (3193 . 3194) (3191 . 3193) (#("ax" 0 2 (fontified nil)) . -3191) (undo-tree-id4803 . -2) (3191 . 3193) (3190 . 3191) (3183 . 3190) (#("gl" 0 2 (fontified nil)) . 3183) (3183 . 3185) (#("glosend" 0 7 (fontified nil)) . -3183) (undo-tree-id4804 . -7) (3183 . 3190) (#("gl" 0 1 (fontified t) 1 2 (fontified t)) . -3183) (undo-tree-id4805 . -2) (undo-tree-id4806 . -2) 3185 (3183 . 3185) (#("m" 0 1 (fontified t)) . -3183) (undo-tree-id4807 . -1) (undo-tree-id4808 . -1) (#("s" 0 1 (fontified t)) . -3184) (undo-tree-id4809 . -1) (undo-tree-id4810 . -1) 3185 (3183 . 3185) (3177 . 3183) (#("     " 0 5 (fontified nil)) . -3177) (undo-tree-id4811 . -5) (#(" " 0 1 (fontified t)) . 3182) (t 26361 9482 611442 400000)) nil (26361 9603 406351 563000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3214 . 3215) (#("
" 0 1 (fontified nil)) . -3240) (3208 . 3241) 3207) nil (26361 9603 406338 209000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3246 . 3247) (#("
" 0 1 (fontified nil)) . -3272) (3240 . 3273) 3215) nil (26361 9603 406337 774000) 0 nil])
([nil nil ((3223 . 3224) (#("x" 0 1 (fontified t)) . -3223) (undo-tree-id4781 . -1) 3224) nil (26361 9603 406336 506000) 0 nil])
([nil nil ((3255 . 3260) (#("t" 0 1 (fontified nil)) . 3255) (3255 . 3256) (#("theta" 0 5 (fontified nil)) . -3255) (undo-tree-id4775 . -5) (3255 . 3260) (#("th" 0 1 (fontified t) 1 2 (fontified t)) . -3255) (undo-tree-id4776 . -2) (undo-tree-id4777 . -2) 3257 (3256 . 3257) (#("e" 0 1 (fontified t)) . -3256) (undo-tree-id4778 . -1) (undo-tree-id4779 . -1) 3257 (3255 . 3257) (#("x" 0 1 (fontified t)) . -3255) (undo-tree-id4780 . -1) 3256) nil (26361 9603 406333 85000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -3274) (undo-tree-id4774 . -1) 3275) nil (26361 9603 406321 514000) 0 nil])
([nil nil ((3238 . 3239) (#("x" 0 1 (fontified t)) . -3238) (undo-tree-id4772 . -1) (#("=" 0 1 (fontified t)) . -3239) (undo-tree-id4773 . -1) 3240 (3239 . 3240)) nil (26361 9603 406320 483000) 0 nil])
([nil nil ((#("linear" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . 3267) (undo-tree-id4656 . -5) (undo-tree-id4657 . -3) (undo-tree-id4658 . -3) (undo-tree-id4659 . -3) (undo-tree-id4660 . -3) (undo-tree-id4661 . -3) (undo-tree-id4662 . -3) (undo-tree-id4663 . -3) (undo-tree-id4664 . -3) (undo-tree-id4665 . -3) (undo-tree-id4666 . -3) (undo-tree-id4667 . -3) (undo-tree-id4668 . -3) (undo-tree-id4669 . -3) (undo-tree-id4670 . -3) (undo-tree-id4671 . -3) (undo-tree-id4672 . -3) (undo-tree-id4673 . -3) (undo-tree-id4674 . -3) (undo-tree-id4675 . -3) (undo-tree-id4676 . -3) (undo-tree-id4677 . -3) (undo-tree-id4678 . -3) (undo-tree-id4679 . -3) (undo-tree-id4680 . -3) (undo-tree-id4681 . -3) (undo-tree-id4682 . -3) (undo-tree-id4683 . -3) (undo-tree-id4684 . -3) (undo-tree-id4685 . -3) (undo-tree-id4686 . -3) (undo-tree-id4687 . -3) (undo-tree-id4688 . -3) (undo-tree-id4689 . -3) (undo-tree-id4690 . -3) (undo-tree-id4691 . -3) (undo-tree-id4692 . -3) (undo-tree-id4693 . -3) (undo-tree-id4694 . -3) (undo-tree-id4695 . -3) (undo-tree-id4696 . -3) (undo-tree-id4697 . -3) (undo-tree-id4698 . -3) (undo-tree-id4699 . -3) (undo-tree-id4700 . -3) (undo-tree-id4701 . -3) (undo-tree-id4702 . -3) (undo-tree-id4703 . -3) (undo-tree-id4704 . -3) (undo-tree-id4705 . -3) (undo-tree-id4706 . -3) (undo-tree-id4707 . -3) (undo-tree-id4708 . -3) (undo-tree-id4709 . -3) (undo-tree-id4710 . -3) (undo-tree-id4711 . -3) (undo-tree-id4712 . -3) (undo-tree-id4713 . -3) (undo-tree-id4714 . -3) (undo-tree-id4715 . -3) (undo-tree-id4716 . -3) (undo-tree-id4717 . -3) (undo-tree-id4718 . -3) (undo-tree-id4719 . -3) (undo-tree-id4720 . -3) (undo-tree-id4721 . -3) (undo-tree-id4722 . -3) (undo-tree-id4723 . -3) (undo-tree-id4724 . -3) (undo-tree-id4725 . -3) (undo-tree-id4726 . -3) (undo-tree-id4727 . -3) (undo-tree-id4728 . -3) (undo-tree-id4729 . -3) (undo-tree-id4730 . -3) (undo-tree-id4731 . -3) (undo-tree-id4732 . -3) (undo-tree-id4733 . -3) (undo-tree-id4734 . -3) (undo-tree-id4735 . -3) (undo-tree-id4736 . -3) (undo-tree-id4737 . -3) (undo-tree-id4738 . -3) (undo-tree-id4739 . -3) (undo-tree-id4740 . -3) (undo-tree-id4741 . -3) (undo-tree-id4742 . -3) (undo-tree-id4743 . -3) (undo-tree-id4744 . -3) (undo-tree-id4745 . -3) (undo-tree-id4746 . -3) (undo-tree-id4747 . -3) (undo-tree-id4748 . -3) (undo-tree-id4749 . -3) (undo-tree-id4750 . -3) (undo-tree-id4751 . -3) (undo-tree-id4752 . -3) (undo-tree-id4753 . -3) (undo-tree-id4754 . -3) (undo-tree-id4755 . -3) (undo-tree-id4756 . -3) (undo-tree-id4757 . -3) (undo-tree-id4758 . -3) (undo-tree-id4759 . -3) (undo-tree-id4760 . -3) (undo-tree-id4761 . -3) (undo-tree-id4762 . -3) (undo-tree-id4763 . -3) (undo-tree-id4764 . -3) (undo-tree-id4765 . -3) (undo-tree-id4766 . -3) (undo-tree-id4767 . -3) (undo-tree-id4768 . -3) (undo-tree-id4769 . -3) (undo-tree-id4770 . -3) (undo-tree-id4771 . -6)) nil (26361 9603 406317 580000) 0 nil])
([nil nil ((3267 . 3274)) nil (26361 9603 406059 861000) 0 nil])
([nil nil ((3275 . 3276)) nil (26361 9603 406055 859000) 0 nil])
([nil nil ((3203 . 3204) (3199 . 3203) (t 26361 9603 448339 663000)) nil (26361 9652 913842 515000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -3203) (undo-tree-id4822 . -1) 3204) nil (26361 9652 913841 697000) 0 nil])
([nil nil ((#("      glosend.x = msg.datalinear.x;
" 0 6 (fontified t) 6 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 21 (fontified t) 21 22 (fontified t) 22 23 (fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 29 (fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 36 (fontified t)) . 3177) (undo-tree-id4818 . -35) (undo-tree-id4819 . 10) (undo-tree-id4820 . 10) (undo-tree-id4821 . -25) 3202) nil (26361 9652 913840 363000) 0 nil])
([nil nil ((#("      glosend.theta = msg.angular.z;
" 0 5 (fontified t) 5 6 (fontified t rear-nonsticky t) 6 13 (fontified t) 13 14 (fontified t) 14 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 29 (fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 37 (fontified t)) . 3209) (undo-tree-id4812 . -34) (undo-tree-id4813 . -36) (undo-tree-id4814 . -34) (undo-tree-id4815 . -34) (undo-tree-id4816 . -34) (undo-tree-id4817 . -25) 3234) nil (26361 9652 913835 515000) 0 nil])
([nil nil ((3191 . 3192) (3190 . 3191) (#("." 0 1 (fontified t)) . -3190) (undo-tree-id4823 . -1) 3191 (t 26361 9652 930638 867000)) nil (26361 9699 121571 96000) 0 nil])
([nil nil ((#("    " 0 4 (c-in-sws t c-is-sws t fontified t)) . -4273) (undo-tree-id4926 . -4) (undo-tree-id4927 . -4) (undo-tree-id4928 . -4) (undo-tree-id4929 . -4) (undo-tree-id4930 . -4) (undo-tree-id4931 . -4) (undo-tree-id4932 . -4) (undo-tree-id4933 . -4) (undo-tree-id4934 . -4) (undo-tree-id4935 . -4) (undo-tree-id4936 . -4) (undo-tree-id4937 . -4) (undo-tree-id4938 . -4) (undo-tree-id4939 . -4) (undo-tree-id4940 . -4) (undo-tree-id4941 . -4) (undo-tree-id4942 . -4) (undo-tree-id4943 . -4) (undo-tree-id4944 . -4) (undo-tree-id4945 . -4) (undo-tree-id4946 . -4) (undo-tree-id4947 . -4) (undo-tree-id4948 . -4) (undo-tree-id4949 . -4) (undo-tree-id4950 . -4) (undo-tree-id4951 . -4) (undo-tree-id4952 . -4) (undo-tree-id4953 . -4) (undo-tree-id4954 . -4) (undo-tree-id4955 . -4) (undo-tree-id4956 . -4) (undo-tree-id4957 . -4) (undo-tree-id4958 . -4) (undo-tree-id4959 . -4) (undo-tree-id4960 . -4) (undo-tree-id4961 . -4) (undo-tree-id4962 . -4) (undo-tree-id4963 . -4) (undo-tree-id4964 . -4) (undo-tree-id4965 . -4) (undo-tree-id4966 . -4) (undo-tree-id4967 . -4) (undo-tree-id4968 . -4) (undo-tree-id4969 . -4) (undo-tree-id4970 . -4) (undo-tree-id4971 . -4) (undo-tree-id4972 . -4) (undo-tree-id4973 . -4) (undo-tree-id4974 . -4) (undo-tree-id4975 . -4) (undo-tree-id4976 . -4) (undo-tree-id4977 . -4) (undo-tree-id4978 . -4) (undo-tree-id4979 . -4) (undo-tree-id4980 . -4) (undo-tree-id4981 . -4) (undo-tree-id4982 . -4) (undo-tree-id4983 . -4) (undo-tree-id4984 . -4) (undo-tree-id4985 . -4) (undo-tree-id4986 . -4) (undo-tree-id4987 . -4) (undo-tree-id4988 . -4) (undo-tree-id4989 . -4) (undo-tree-id4990 . -4) (undo-tree-id4991 . -4) (undo-tree-id4992 . -4) (undo-tree-id4993 . -4) (undo-tree-id4994 . -4) (undo-tree-id4995 . -4) (undo-tree-id4996 . -4) (undo-tree-id4997 . -4) (undo-tree-id4998 . -4) (undo-tree-id4999 . -4) (undo-tree-id5000 . -4) (undo-tree-id5001 . -4) (undo-tree-id5002 . -4) (undo-tree-id5003 . -4) (undo-tree-id5004 . -4) (undo-tree-id5005 . -4) (undo-tree-id5006 . -4) (undo-tree-id5007 . -4) (undo-tree-id5008 . -4) (undo-tree-id5009 . -4) (undo-tree-id5010 . -4) (undo-tree-id5011 . -4) (undo-tree-id5012 . -4) (undo-tree-id5013 . -4) (undo-tree-id5014 . -4) (undo-tree-id5015 . -4) (undo-tree-id5016 . -4) (undo-tree-id5017 . -4) (undo-tree-id5018 . -4) (undo-tree-id5019 . -4) 4277 (4272 . 4277) (t 26361 9699 164057 39000)) nil (26361 9723 149479 809000) 0 nil])
([nil nil ((4287 . 4288) (4277 . 4287) (4273 . 4277)) nil (26361 9723 149346 451000) 0 nil])
([nil nil ((4291 . 4292) (4287 . 4291)) nil (26361 9723 149345 770000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -4291) (undo-tree-id4824 . -1) (undo-tree-id4825 . -1) (undo-tree-id4826 . -1) (undo-tree-id4827 . -1) (undo-tree-id4828 . -1) (undo-tree-id4829 . -1) (undo-tree-id4830 . -1) (undo-tree-id4831 . -1) (undo-tree-id4832 . -1) (undo-tree-id4833 . -1) (undo-tree-id4834 . -1) (undo-tree-id4835 . -1) (undo-tree-id4836 . -1) (undo-tree-id4837 . -1) (undo-tree-id4838 . -1) (undo-tree-id4839 . -1) (undo-tree-id4840 . -1) (undo-tree-id4841 . -1) (undo-tree-id4842 . -1) (undo-tree-id4843 . -1) (undo-tree-id4844 . -1) (undo-tree-id4845 . -1) (undo-tree-id4846 . -1) (undo-tree-id4847 . -1) (undo-tree-id4848 . -1) (undo-tree-id4849 . -1) (undo-tree-id4850 . -1) (undo-tree-id4851 . -1) (undo-tree-id4852 . -1) (undo-tree-id4853 . -1) (undo-tree-id4854 . -1) (undo-tree-id4855 . -1) (undo-tree-id4856 . -1) (undo-tree-id4857 . -1) (undo-tree-id4858 . -1) (undo-tree-id4859 . -1) (undo-tree-id4860 . -1) (undo-tree-id4861 . -1) (undo-tree-id4862 . -1) (undo-tree-id4863 . -1) (undo-tree-id4864 . -1) (undo-tree-id4865 . -1) (undo-tree-id4866 . -1) (undo-tree-id4867 . -1) (undo-tree-id4868 . -1) (undo-tree-id4869 . -1) (undo-tree-id4870 . -1) (undo-tree-id4871 . -1) (undo-tree-id4872 . -1) (undo-tree-id4873 . -1) (undo-tree-id4874 . -1) (undo-tree-id4875 . -1) (undo-tree-id4876 . -1) (undo-tree-id4877 . -1) (undo-tree-id4878 . -1) (undo-tree-id4879 . -1) (undo-tree-id4880 . -1) (undo-tree-id4881 . -1) (undo-tree-id4882 . -1) (undo-tree-id4883 . -1) (undo-tree-id4884 . -1) (undo-tree-id4885 . -1) (undo-tree-id4886 . -1) (undo-tree-id4887 . -1) (undo-tree-id4888 . -1) (undo-tree-id4889 . -1) (undo-tree-id4890 . -1) (undo-tree-id4891 . -1) (undo-tree-id4892 . -1) (undo-tree-id4893 . -1) (undo-tree-id4894 . -1) (undo-tree-id4895 . -1) (undo-tree-id4896 . -1) (undo-tree-id4897 . -1) (undo-tree-id4898 . -1) (undo-tree-id4899 . -1) (undo-tree-id4900 . -1) (undo-tree-id4901 . -1) (undo-tree-id4902 . -1) (undo-tree-id4903 . -1) (undo-tree-id4904 . -1) (undo-tree-id4905 . -1) (undo-tree-id4906 . -1) (undo-tree-id4907 . -1) (undo-tree-id4908 . -1) (undo-tree-id4909 . -1) (undo-tree-id4910 . -1) (undo-tree-id4911 . -1) (undo-tree-id4912 . -1) (undo-tree-id4913 . -1) (undo-tree-id4914 . -1) (undo-tree-id4915 . -1) (undo-tree-id4916 . -1) (undo-tree-id4917 . -1) (undo-tree-id4918 . -1) (undo-tree-id4919 . -1) (undo-tree-id4920 . -1) (undo-tree-id4921 . -1) (undo-tree-id4922 . -1) (undo-tree-id4923 . -1) (undo-tree-id4924 . -1) (undo-tree-id4925 . -1) 4292) nil (26361 9723 149339 922000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . 3190) (undo-tree-id5149 . -1) (undo-tree-id5150 . -1) (undo-tree-id5151 . -1) (undo-tree-id5152 . -1) (t 26361 9723 191780 389000)) nil (26361 9742 835429 413000) 0 nil])
([nil nil ((#(">" 0 1 (fontified t)) . 3190)) nil (26361 9742 835426 991000) 0 nil])
([nil nil ((3190 . 3191)) nil (26361 9742 835426 363000) 0 nil])
([nil nil ((3198 . 3200) (#("." 0 1 (fontified t)) . -3198) (undo-tree-id5144 . -1) (#("/" 0 1 (fontified t)) . -3199) (undo-tree-id5145 . -1) 3200 (3199 . 3200) (3198 . 3199) (#("." 0 1 (fontified t)) . -3198) (undo-tree-id5146 . -1) 3199 (3198 . 3199) (#("." 0 1 (fontified t)) . -3198) (undo-tree-id5147 . -1) 3199 (3198 . 3199) (#("." 0 1 (fontified t)) . -3198) (undo-tree-id5148 . -1) 3199) nil (26361 9742 835425 84000) 0 nil])
([nil nil ((3199 . 3200) (#("." 0 1 (fontified t)) . -3199) (undo-tree-id5142 . -1) 3200 (3199 . 3200) (#("?" 0 1 (fontified t)) . -3199) (undo-tree-id5143 . -1) 3200) nil (26361 9742 835421 765000) 0 nil])
([nil nil ((3207 . 3208) (3206 . 3207) (#("." 0 1 (fontified t)) . -3206) (undo-tree-id5020 . -1) (undo-tree-id5021 . -1) (undo-tree-id5022 . -1) (undo-tree-id5023 . -1) (undo-tree-id5024 . -1) (undo-tree-id5025 . -1) (undo-tree-id5026 . -1) (undo-tree-id5027 . -1) (undo-tree-id5028 . -1) (undo-tree-id5029 . -1) (undo-tree-id5030 . -1) (undo-tree-id5031 . -1) (undo-tree-id5032 . -1) (undo-tree-id5033 . -1) (undo-tree-id5034 . -1) (undo-tree-id5035 . -1) (undo-tree-id5036 . -1) (undo-tree-id5037 . -1) (undo-tree-id5038 . -1) (undo-tree-id5039 . -1) (undo-tree-id5040 . -1) (undo-tree-id5041 . -1) (undo-tree-id5042 . -1) (undo-tree-id5043 . -1) (undo-tree-id5044 . -1) (undo-tree-id5045 . -1) (undo-tree-id5046 . -1) (undo-tree-id5047 . -1) (undo-tree-id5048 . -1) (undo-tree-id5049 . -1) (undo-tree-id5050 . -1) (undo-tree-id5051 . -1) (undo-tree-id5052 . -1) (undo-tree-id5053 . -1) (undo-tree-id5054 . -1) (undo-tree-id5055 . -1) (undo-tree-id5056 . -1) (undo-tree-id5057 . -1) (undo-tree-id5058 . -1) (undo-tree-id5059 . -1) (undo-tree-id5060 . -1) (undo-tree-id5061 . -1) (undo-tree-id5062 . -1) (undo-tree-id5063 . -1) (undo-tree-id5064 . -1) (undo-tree-id5065 . -1) (undo-tree-id5066 . -1) (undo-tree-id5067 . -1) (undo-tree-id5068 . -1) (undo-tree-id5069 . -1) (undo-tree-id5070 . -1) (undo-tree-id5071 . -1) (undo-tree-id5072 . -1) (undo-tree-id5073 . -1) (undo-tree-id5074 . -1) (undo-tree-id5075 . -1) (undo-tree-id5076 . -1) (undo-tree-id5077 . -1) (undo-tree-id5078 . -1) (undo-tree-id5079 . -1) (undo-tree-id5080 . -1) (undo-tree-id5081 . -1) (undo-tree-id5082 . -1) (undo-tree-id5083 . -1) (undo-tree-id5084 . -1) (undo-tree-id5085 . -1) (undo-tree-id5086 . -1) (undo-tree-id5087 . -1) (undo-tree-id5088 . -1) (undo-tree-id5089 . -1) (undo-tree-id5090 . -1) (undo-tree-id5091 . -1) (undo-tree-id5092 . -1) (undo-tree-id5093 . -1) (undo-tree-id5094 . -1) (undo-tree-id5095 . -1) (undo-tree-id5096 . -1) (undo-tree-id5097 . -1) (undo-tree-id5098 . -1) (undo-tree-id5099 . -1) (undo-tree-id5100 . -1) (undo-tree-id5101 . -1) (undo-tree-id5102 . -1) (undo-tree-id5103 . -1) (undo-tree-id5104 . -1) (undo-tree-id5105 . -1) (undo-tree-id5106 . -1) (undo-tree-id5107 . -1) (undo-tree-id5108 . -1) (undo-tree-id5109 . -1) (undo-tree-id5110 . -1) (undo-tree-id5111 . -1) (undo-tree-id5112 . -1) (undo-tree-id5113 . -1) (undo-tree-id5114 . -1) (undo-tree-id5115 . -1) (undo-tree-id5116 . -1) (undo-tree-id5117 . -1) (undo-tree-id5118 . -1) (undo-tree-id5119 . -1) (undo-tree-id5120 . -1) (undo-tree-id5121 . -1) (undo-tree-id5122 . -1) (undo-tree-id5123 . -1) (undo-tree-id5124 . -1) (undo-tree-id5125 . -1) (undo-tree-id5126 . -1) (undo-tree-id5127 . -1) (undo-tree-id5128 . -1) (undo-tree-id5129 . -1) (undo-tree-id5130 . -1) (undo-tree-id5131 . -1) (undo-tree-id5132 . -1) (undo-tree-id5133 . -1) (undo-tree-id5134 . -1) (undo-tree-id5135 . -1) (undo-tree-id5136 . -1) (undo-tree-id5137 . -1) (undo-tree-id5138 . -1) (undo-tree-id5139 . -1) (undo-tree-id5140 . -1) (undo-tree-id5141 . -1) 3207) nil (26361 9742 835416 365000) 0 nil])
([nil nil ((3206 . 3207) (#("-" 0 1 (fontified t)) . -3206) (undo-tree-id5153 . -1) (undo-tree-id5154 . -1) (undo-tree-id5155 . -1) (undo-tree-id5156 . -1) (undo-tree-id5157 . -1) (undo-tree-id5158 . -1) (undo-tree-id5159 . -1) (undo-tree-id5160 . -1) (undo-tree-id5161 . -1) (undo-tree-id5162 . -1) (undo-tree-id5163 . -1) (undo-tree-id5164 . -1) (undo-tree-id5165 . -1) (undo-tree-id5166 . -1) (undo-tree-id5167 . -1) (undo-tree-id5168 . -1) (undo-tree-id5169 . -1) (undo-tree-id5170 . -1) (undo-tree-id5171 . -1) (undo-tree-id5172 . -1) (undo-tree-id5173 . -1) (undo-tree-id5174 . -1) (undo-tree-id5175 . -1) (undo-tree-id5176 . -1) (undo-tree-id5177 . -1) (undo-tree-id5178 . -1) (undo-tree-id5179 . -1) (undo-tree-id5180 . -1) (undo-tree-id5181 . -1) (undo-tree-id5182 . -1) (undo-tree-id5183 . -1) (undo-tree-id5184 . -1) (undo-tree-id5185 . -1) (undo-tree-id5186 . -1) (undo-tree-id5187 . -1) (undo-tree-id5188 . -1) (undo-tree-id5189 . -1) (undo-tree-id5190 . -1) (undo-tree-id5191 . -1) (undo-tree-id5192 . -1) (undo-tree-id5193 . -1) (undo-tree-id5194 . -1) (undo-tree-id5195 . -1) (undo-tree-id5196 . -1) (undo-tree-id5197 . -1) (#(">" 0 1 (fontified t)) . -3207) (undo-tree-id5198 . -1) (undo-tree-id5199 . -1) (undo-tree-id5200 . -1) (undo-tree-id5201 . -1) (undo-tree-id5202 . -1) (undo-tree-id5203 . -1) (undo-tree-id5204 . -1) (undo-tree-id5205 . -1) (undo-tree-id5206 . -1) (undo-tree-id5207 . -1) (undo-tree-id5208 . -1) (undo-tree-id5209 . -1) (undo-tree-id5210 . -1) (undo-tree-id5211 . -1) (undo-tree-id5212 . -1) (undo-tree-id5213 . -1) (undo-tree-id5214 . -1) (undo-tree-id5215 . -1) (undo-tree-id5216 . -1) (undo-tree-id5217 . -1) (undo-tree-id5218 . -1) (undo-tree-id5219 . -1) (undo-tree-id5220 . -1) (undo-tree-id5221 . -1) (undo-tree-id5222 . -1) 3208 (t 26361 9742 879566 75000)) nil (26361 9761 622885 791000) 0 nil])
([nil nil ((11 . 17) (12 . 37) (14 . 39) (15 . 21) (17 . 35) (21 . 33) (22 . 47) (24 . 55) (67 . 74) (68 . 79) (#("
#include \"std_msgs/msg/string.hpp\"
#include <memory>
#include \"geometry_msgs/msg/twist.hpp\"
#include \"geometry_msgs/msg/vector3.hpp\"
#include \"std_msgs/msg/bool.hpp\"" 0 1 (fontified t c-in-sws t) 1 2 (face font-lock-preprocessor-face fontified t c-is-sws t c-in-sws t) 2 9 (face font-lock-preprocessor-face fontified t c-in-sws t) 9 10 (fontified t c-in-sws t) 10 35 (face font-lock-string-face fontified t c-in-sws t) 35 36 (fontified t c-in-sws t) 36 37 (face font-lock-preprocessor-face fontified t c-is-sws t c-in-sws t) 37 44 (face font-lock-preprocessor-face fontified t c-in-sws t) 44 45 (fontified t c-in-sws t) 45 46 (face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t category c-<-as-paren-syntax c-in-sws t) 46 52 (face font-lock-string-face fontified t c-in-sws t) 52 53 (face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t category c->-as-paren-syntax c-in-sws t) 53 54 (fontified t c-in-sws t) 54 55 (face font-lock-preprocessor-face fontified t c-is-sws t c-in-sws t) 55 62 (face font-lock-preprocessor-face fontified t c-in-sws t) 62 63 (fontified t c-in-sws t) 63 92 (face font-lock-string-face fontified t c-in-sws t) 92 93 (fontified t c-in-sws t rear-nonsticky t) 93 94 (face font-lock-preprocessor-face fontified t c-in-sws t c-is-sws t) 94 101 (face font-lock-preprocessor-face fontified t c-in-sws t) 101 102 (fontified t c-in-sws t) 102 103 (face font-lock-string-face fontified t c-in-sws t) 103 116 (face font-lock-string-face fontified t c-in-sws t) 116 117 (face font-lock-string-face fontified t c-in-sws t) 117 121 (face font-lock-string-face fontified t c-in-sws t) 121 133 (face font-lock-string-face fontified t c-in-sws t) 133 134 (fontified t c-in-sws t) 134 135 (face font-lock-preprocessor-face fontified t c-in-sws t c-is-sws t) 135 142 (face font-lock-preprocessor-face fontified t c-in-sws t) 142 143 (fontified t c-in-sws t) 143 144 (face font-lock-string-face fontified t c-in-sws t) 144 153 (face font-lock-string-face fontified t c-in-sws t) 153 157 (face font-lock-string-face fontified t c-in-sws t) 157 166 (face font-lock-string-face fontified t c-in-sws t)) . 354) (undo-tree-id5223 . -166) (undo-tree-id5224 . -133) (undo-tree-id5225 . -132) (undo-tree-id5226 . -132) 1 (556 . 557) (#("
" 0 1 (fontified t c-in-sws t c-is-sws t)) . 603) 601 (#("  " 0 2 (fontified nil)) . 692) 691 (#("    " 0 4 (fontified t)) . 730) (#("  " 0 2 (fontified nil)) . 735) 729 (754 . 755) (#("    " 0 4 (fontified nil)) . 754) 753 (#("  " 0 2 (fontified nil)) . 768) 765 (#(" " 0 1 (fontified nil)) . 803) (812 . 819) (#("
  " 0 1 (fontified t) 1 3 (fontified nil)) . 870) (undo-tree-id5227 . -1) 868 (#("  " 0 1 (fontified nil c-is-sws t c-in-sws t) 1 2 (fontified nil c-in-sws t c-is-sws t)) . 944) 938 (#("  " 0 2 (fontified nil c-is-sws t c-in-sws t)) . 980) 974 (989 . 997) (#("  " 0 1 (fontified nil) 1 2 (fontified nil rear-nonsticky t)) . 1066) 1061 (1136 . 1200) (#("  " 0 1 (fontified nil) 1 2 (fontified nil rear-nonsticky t)) . 1154) 1149 (1163 . 1171) (#("  " 0 2 (fontified nil)) . 1240) 1235 (1313 . 1372) (#("

  " 0 1 (fontified t) 1 2 (fontified t) 2 4 (fontified nil)) . 1328) 1326 (1405 . 1414) (#(" " 0 1 (fontified nil)) . 1413) 1412 (1425 . 1433) (#("
  " 0 1 (fontified t) 1 3 (fontified nil)) . 1485) 1483 (1556 . 1586) (#("				" 0 4 (fontified nil)) . 1556) 1555 (#("
  " 0 1 (fontified t) 1 3 (fontified nil)) . 1602) 1601 (#("  " 0 2 (fontified nil)) . 1612) 1608 (#("  " 0 2 (fontified nil)) . 1636) 1631 (#("  " 0 2 (fontified nil)) . 1663) 1658 (1671 . 1677) (#("	" 0 1 (fontified nil)) . 1671) 1670 (#("  " 0 2 (fontified nil)) . 1710) 1705 (1730 . 1736) (#("	" 0 1 (fontified nil)) . 1730) 1729 (1744 . 1750) (#("	" 0 1 (fontified nil)) . 1744) 1743 (1754 . 1760) (#("	" 0 1 (fontified nil)) . 1754) 1753 (1820 . 1826) (#("	" 0 1 (fontified nil)) . 1820) 1819 (1831 . 1837) (#("	" 0 1 (fontified nil)) . 1831) 1829 (1841 . 1847) (#("	" 0 1 (fontified nil)) . 1841) 1840 (1900 . 1906) (#("	" 0 1 (fontified nil)) . 1900) 1899 (1911 . 1917) (#("	" 0 1 (fontified nil)) . 1911) 1909 (1921 . 1927) (#("	" 0 1 (fontified nil)) . 1921) 1920 (1994 . 2015) (1999 . 2001) (#("	" 0 1 (fontified nil)) . 1999) 1998 (2006 . 2012) (#("	" 0 1 (fontified nil)) . 2006) 2005 (#("  " 0 2 (fontified nil)) . 2019) 2014 (#("  " 0 2 (fontified nil)) . 2028) 2022 (#("    
    " 0 5 (fontified t) 5 9 (fontified nil)) . 2049) 2046 (#("  " 0 2 (fontified nil)) . 2063) 2059 (#(" " 0 1 (fontified t)) . 2106) (#("  " 0 2 (fontified nil)) . 2108) 2105 (#("  " 0 1 (fontified nil) 1 2 (fontified nil rear-nonsticky t)) . 2184) 2179 (#("  " 0 1 (fontified nil) 1 2 (fontified nil rear-nonsticky t)) . 2260) 2255 (#("  " 0 2 (fontified nil)) . 2332) 2327 (#("      
" 0 6 (fontified t) 6 7 (fontified t)) . 2387) (undo-tree-id5228 . -5) (#("  " 0 2 (fontified nil)) . 2395) 2386 (#("  " 0 2 (fontified nil)) . 2430) 2425 (#("  " 0 2 (fontified nil)) . 2461) 2456 (#("  " 0 2 (fontified nil c-is-sws t)) . 2538) 2532 (#("  " 0 1 (fontified nil) 1 2 (fontified nil rear-nonsticky t)) . 2563) 2558 (#("  " 0 1 (fontified nil) 1 2 (fontified nil rear-nonsticky t)) . 2588) 2583 (#("  " 0 1 (fontified nil c-in-sws t) 1 2 (fontified nil c-in-sws t)) . 2614) 2608 (#("  " 0 2 (fontified nil)) . 2646) 2641 (#("  " 0 2 (fontified nil c-in-sws t c-is-sws t)) . 2717) 2711 (2749 . 2750) (#(" " 0 1 (fontified nil)) . 2763) (#("

  " 0 1 (fontified t) 1 2 (fontified t c-is-sws t) 2 4 (fontified nil c-is-sws t c-in-sws t)) . 2767) 2765 (#("  " 0 2 (fontified nil c-in-sws t)) . 2822) 2817 (#("  " 0 2 (c-is-sws t fontified nil c-in-sws t)) . 2855) 2850 (#("  " 0 2 (fontified nil)) . 2870) 2865 (2891 . 2892) (2893 . 2899) (#("	" 0 1 (fontified nil)) . 2893) 2892 (2905 . 2911) (#("	" 0 1 (fontified nil)) . 2905) 2904 (#("  " 0 2 (fontified nil)) . 2966) 2961 (#("  " 0 2 (fontified nil)) . 2975) 2969 (#("  " 0 1 (fontified nil) 1 2 (fontified nil rear-nonsticky t)) . 3007) 3002 (#("  " 0 1 (fontified nil) 1 2 (fontified nil rear-nonsticky t)) . 3039) 3034 (#("  " 0 2 (fontified nil)) . 3072) 3066 (#("    
    " 0 4 (fontified t) 4 5 (fontified t) 5 9 (fontified nil)) . 3104) 3101 (#("  " 0 2 (fontified nil)) . 3118) 3114 (#("  " 0 1 (fontified nil) 1 2 (fontified nil rear-nonsticky t)) . 3181) 3176 (#("  " 0 2 (fontified nil)) . 3212) (undo-tree-id5229 . -2) (undo-tree-id5230 . -2) (undo-tree-id5231 . -2) 3209 (#("  " 0 2 (fontified nil)) . 3219) 3215 (#("
      
    " 0 1 (fontified t) 1 8 (fontified t) 8 12 (fontified nil)) . 3279) (#("  " 0 2 (fontified nil)) . 3296) 3292 (#("
      
    " 0 8 (fontified t) 8 12 (fontified nil)) . 3354) (#("  " 0 2 (fontified nil)) . 3371) 3367 (#("
      
    " 0 1 (fontified t) 1 8 (fontified t) 8 12 (fontified nil)) . 3423) (#("

    



    " 0 1 (fontified t rear-nonsticky t) 1 2 (fontified t) 2 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t rear-nonsticky t) 8 9 (fontified t) 9 10 (fontified t) 10 14 (fontified nil)) . 3438) (undo-tree-id5232 . 12) (undo-tree-id5233 . -9) (undo-tree-id5234 . -2) (undo-tree-id5235 . -6) 3436 (#("  " 0 2 (fontified nil)) . 3463) (undo-tree-id5236 . -2) 3460 (#("  " 0 2 (fontified nil c-is-sws t c-in-sws t)) . 3482) 3479 (#("  " 0 2 (fontified nil c-is-sws t)) . 3511) 3508 (#("  " 0 1 (fontified nil) 1 2 (fontified nil rear-nonsticky t)) . 3578) 3575 (#("  " 0 1 (fontified nil) 1 2 (fontified nil rear-nonsticky t)) . 3647) 3644 (#("  " 0 1 (fontified nil) 1 2 (fontified nil rear-nonsticky t)) . 3715) 3711 (#("  " 0 2 (fontified nil c-is-sws t c-in-sws t)) . 3780) 3776 (#("  " 0 2 (fontified nil c-in-sws t c-is-sws t)) . 3811) 3808 (#("  " 0 1 (fontified nil) 1 2 (fontified nil rear-nonsticky t)) . 3889) 3886 (#("  " 0 1 (fontified nil) 1 2 (fontified nil rear-nonsticky t)) . 3969) 3966 (#("  " 0 1 (fontified nil) 1 2 (fontified nil rear-nonsticky t)) . 4048) 4044 (#("  " 0 2 (fontified nil c-is-sws t c-in-sws t)) . 4115) 4111 (#("  " 0 2 (fontified nil c-in-sws t c-is-sws t)) . 4128) 4125 (#("  " 0 2 (fontified nil c-is-sws t c-in-sws t)) . 4169) 4165 (#("  " 0 1 (fontified nil c-in-sws t c-is-sws t) 1 2 (fontified nil c-is-sws t rear-nonsticky t)) . 4187) 4184 (#("  " 0 2 (fontified nil c-is-sws t c-in-sws t)) . 4232) 4228 (#("  " 0 2 (fontified nil c-in-sws t c-is-sws t)) . 4275) 4272 (#("  " 0 2 (fontified nil c-in-sws t c-is-sws t)) . 4295) 4292 (#("  " 0 1 (fontified nil c-is-sws t) 1 2 (fontified nil c-is-sws t)) . 4324) 4323 (#("  " 0 2 (fontified nil)) . 4330) 4328 (4354 . 4357) (#("No" 0 2 (face font-lock-comment-face fontified t c-in-sws t)) . 4354) (4357 . 4358) (4358 . 4367) (#("

" 0 1 (face font-lock-comment-face fontified t c-in-sws t) 1 2 (fontified t c-in-sws t)) . 4358) 4334 (#(" " 0 1 (fontified t)) . 4455) (#("
" 0 1 (fontified t)) . 4552) 4550 (#("  " 0 2 (fontified t)) . 4664) (t 26361 9761 640371 811000)) nil (26361 9845 457777 992000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . 3347) (t 26361 9845 502613 149000)) nil (26361 9898 905846 526000) 0 nil])
([nil nil ((#(">" 0 1 (fontified t)) . 3347)) nil (26361 9898 905845 947000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . 3347)) nil (26361 9898 905845 588000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 3347)) nil (26361 9898 905845 135000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 3347)) nil (26361 9898 905844 721000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 3347) (undo-tree-id5321 . -1) (undo-tree-id5322 . -1)) nil (26361 9898 905844 229000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 3347) (undo-tree-id5319 . -1) (undo-tree-id5320 . -1)) nil (26361 9898 905842 820000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 3347) (undo-tree-id5311 . -1) (undo-tree-id5312 . -1) (undo-tree-id5313 . -1) (undo-tree-id5314 . -1) (undo-tree-id5315 . -1) (undo-tree-id5316 . -1) (undo-tree-id5317 . -1) (undo-tree-id5318 . -1)) nil (26361 9898 905841 520000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 3347) (undo-tree-id5309 . -1) (undo-tree-id5310 . -1)) nil (26361 9898 905838 274000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . 3347) (undo-tree-id5306 . 1) (undo-tree-id5307 . -1) (undo-tree-id5308 . -1)) nil (26361 9898 905836 995000) 0 nil])
([nil nil ((3362 . 3363) (#("x" 0 1 (fontified nil)) . -3362) (undo-tree-id5238 . -1) (3362 . 3363) (3361 . 3362) (3355 . 3361) (#("linear" 0 6 (fontified nil)) . -3355) (undo-tree-id5239 . -6) (3355 . 3361) (#("l" 0 1 (fontified t)) . -3355) (undo-tree-id5240 . -1) (undo-tree-id5241 . -1) (undo-tree-id5242 . -1) (undo-tree-id5243 . -1) (undo-tree-id5244 . -1) (undo-tree-id5245 . -1) (undo-tree-id5246 . -1) (undo-tree-id5247 . -1) (undo-tree-id5248 . -1) (undo-tree-id5249 . -1) (undo-tree-id5250 . -1) (undo-tree-id5251 . -1) (undo-tree-id5252 . -1) (undo-tree-id5253 . -1) (undo-tree-id5254 . -1) (undo-tree-id5255 . -1) (undo-tree-id5256 . -1) (undo-tree-id5257 . -1) (undo-tree-id5258 . -1) (undo-tree-id5259 . -1) (undo-tree-id5260 . -1) (undo-tree-id5261 . -1) (undo-tree-id5262 . -1) (undo-tree-id5263 . -1) (undo-tree-id5264 . -1) (undo-tree-id5265 . -1) (undo-tree-id5266 . -1) (undo-tree-id5267 . -1) (undo-tree-id5268 . -1) (undo-tree-id5269 . -1) (undo-tree-id5270 . -1) (undo-tree-id5271 . -1) (undo-tree-id5272 . -1) (undo-tree-id5273 . -1) (undo-tree-id5274 . -1) (undo-tree-id5275 . -1) (undo-tree-id5276 . -1) (undo-tree-id5277 . -1) (undo-tree-id5278 . -1) (undo-tree-id5279 . -1) (undo-tree-id5280 . -1) (undo-tree-id5281 . -1) (undo-tree-id5282 . -1) (undo-tree-id5283 . -1) (undo-tree-id5284 . -1) (undo-tree-id5285 . -1) (undo-tree-id5286 . -1) (undo-tree-id5287 . -1) (undo-tree-id5288 . -1) (undo-tree-id5289 . -1) (undo-tree-id5290 . -1) (undo-tree-id5291 . -1) (undo-tree-id5292 . -1) (undo-tree-id5293 . -1) 3356 (3355 . 3356) (3354 . 3355) (3353 . 3354) (apply yas--snippet-revive 3348 3353 #s(yas--snippet nil nil nil 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 23 nil nil nil nil)) (3348 . 3353) (#("get()" 0 5 (fontified nil)) . 3348) (3348 . 3353) (#("get() const" 0 11 (fontified nil)) . -3348) (undo-tree-id5294 . -11) (3348 . 3359) (3347 . 3348) (#("." 0 1 (fontified t)) . -3347) (undo-tree-id5295 . -1) (undo-tree-id5296 . -1) (#("g" 0 1 (fontified t)) . -3348) (undo-tree-id5297 . -1) (#("e" 0 1 (fontified t)) . -3349) (undo-tree-id5298 . -1) (#("t" 0 1 (fontified t)) . -3350) (undo-tree-id5299 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -3351) (undo-tree-id5300 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -3352) (undo-tree-id5301 . -1) (#("-" 0 1 (fontified t)) . -3353) (undo-tree-id5302 . -1) (#("." 0 1 (fontified t)) . -3354) (undo-tree-id5303 . -1) 3355 (3353 . 3355) (#("." 0 1 (fontified t)) . -3353) (undo-tree-id5304 . -1) 3354 (3353 . 3354) (apply yas--snippet-revive 3348 3353 #s(yas--snippet nil nil nil 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 22 nil nil nil nil)) (3348 . 3353) (#("get()" 0 5 (fontified nil)) . 3348) (3348 . 3353) (#("get() const" 0 11 (fontified nil)) . -3348) (undo-tree-id5305 . -11) (3348 . 3359) (3347 . 3348)) nil (26361 9898 905831 513000) 0 nil])
([nil nil ((3362 . 3363) (#("x" 0 1 (fontified t)) . -3362) (undo-tree-id5237 . -1) 3363) nil (26361 9898 905792 105000) 0 nil])
([nil nil ((3284 . 3290) (t 26361 9898 949214 218000)) nil (26361 9987 782847 639000) 0 nil])
([nil nil ((#("    glosend.y = msg.get()->linear.y;
" 0 4 (fontified t) 4 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 19 (fontified t) 19 20 (fontified t) 20 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-4-face) fontified t) 24 25 (face (rainbow-delimiters-depth-4-face) fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 33 (fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 37 (fontified t)) . 3334) (undo-tree-id5323 . -34) (undo-tree-id5324 . -36) (undo-tree-id5325 . -34) (undo-tree-id5326 . -37) (undo-tree-id5327 . -37) (undo-tree-id5328 . -11) (undo-tree-id5329 . -11) (undo-tree-id5330 . -11) (undo-tree-id5331 . -19) (undo-tree-id5332 . -19) (undo-tree-id5333 . -19) (undo-tree-id5334 . -19) (undo-tree-id5335 . -19) (undo-tree-id5336 . -34) (undo-tree-id5337 . -20) (undo-tree-id5338 . -20) (undo-tree-id5339 . -20) (undo-tree-id5340 . -20) (undo-tree-id5341 . -20) (undo-tree-id5342 . -20) (undo-tree-id5343 . -20) (undo-tree-id5344 . -20) (undo-tree-id5345 . -20) (undo-tree-id5346 . -20) (undo-tree-id5347 . -20) (undo-tree-id5348 . -20) (undo-tree-id5349 . -20) (undo-tree-id5350 . -20) (undo-tree-id5351 . -20) (undo-tree-id5352 . -20) (undo-tree-id5353 . -20) (undo-tree-id5354 . -20) (undo-tree-id5355 . -20) (undo-tree-id5356 . -20) (undo-tree-id5357 . -20) (undo-tree-id5358 . -20) (undo-tree-id5359 . -20) (undo-tree-id5360 . -20) (undo-tree-id5361 . -20) (undo-tree-id5362 . -20) (undo-tree-id5363 . -20) (undo-tree-id5364 . -20) (undo-tree-id5365 . -20) (undo-tree-id5366 . -20) (undo-tree-id5367 . -20) (undo-tree-id5368 . -20) (undo-tree-id5369 . -20) (undo-tree-id5370 . -20) (undo-tree-id5371 . -20) (undo-tree-id5372 . -20) (undo-tree-id5373 . -20) (undo-tree-id5374 . -20) (undo-tree-id5375 . -20) (undo-tree-id5376 . -20) (undo-tree-id5377 . -20) (undo-tree-id5378 . -20) (undo-tree-id5379 . -20) (undo-tree-id5380 . -20) (undo-tree-id5381 . -20) (undo-tree-id5382 . -20) (undo-tree-id5383 . -37) 3354 (t 26361 9987 800676 778000)) nil (26361 9989 758160 459000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3334) (undo-tree-id5384 . -4) (undo-tree-id5385 . -4) (undo-tree-id5386 . -4) (undo-tree-id5387 . -4) (undo-tree-id5388 . -4) (undo-tree-id5389 . -4) (undo-tree-id5390 . -4) (undo-tree-id5391 . -4) (undo-tree-id5392 . -4) (undo-tree-id5393 . -4) (undo-tree-id5394 . -4) (undo-tree-id5395 . -4) (undo-tree-id5396 . -4) (undo-tree-id5397 . -4) (undo-tree-id5398 . -4) (undo-tree-id5399 . -4) (undo-tree-id5400 . -4) (undo-tree-id5401 . -4) (undo-tree-id5402 . -4) (undo-tree-id5403 . -4) (undo-tree-id5404 . -4) (undo-tree-id5405 . -4) (undo-tree-id5406 . -4) (undo-tree-id5407 . -4) (undo-tree-id5408 . -4) (undo-tree-id5409 . -4) (undo-tree-id5410 . -4) (undo-tree-id5411 . -4) (undo-tree-id5412 . -4) (undo-tree-id5413 . -4) (undo-tree-id5414 . -4) (undo-tree-id5415 . -4) (undo-tree-id5416 . -4) (undo-tree-id5417 . -4) (undo-tree-id5418 . -4) (undo-tree-id5419 . -4) (undo-tree-id5420 . -4) (undo-tree-id5421 . -4) (undo-tree-id5422 . -4) (undo-tree-id5423 . -4) (undo-tree-id5424 . -4) (undo-tree-id5425 . -4) (undo-tree-id5426 . -4) (undo-tree-id5427 . -4) (undo-tree-id5428 . -4) (undo-tree-id5429 . -4) (undo-tree-id5430 . -4) (undo-tree-id5431 . -4) (undo-tree-id5432 . -4) (undo-tree-id5433 . -4) (undo-tree-id5434 . -4) (undo-tree-id5435 . -4) (undo-tree-id5436 . -4) (undo-tree-id5437 . -4) (undo-tree-id5438 . -4) (undo-tree-id5439 . -4) (undo-tree-id5440 . -4) (undo-tree-id5441 . -4) (undo-tree-id5442 . -4) (undo-tree-id5443 . -4) (undo-tree-id5444 . -4) (undo-tree-id5445 . -4) (undo-tree-id5446 . -4) (undo-tree-id5447 . -4) (undo-tree-id5448 . -4) (undo-tree-id5449 . -4) (undo-tree-id5450 . -4) (undo-tree-id5451 . -4) (undo-tree-id5452 . -4) (undo-tree-id5453 . -4) (undo-tree-id5454 . -4) (undo-tree-id5455 . -4) (undo-tree-id5456 . -4) (undo-tree-id5457 . -4) (undo-tree-id5458 . -4) (undo-tree-id5459 . -4) (undo-tree-id5460 . -4) (undo-tree-id5461 . -4) (undo-tree-id5462 . -4) (undo-tree-id5463 . -4) (undo-tree-id5464 . -4) (undo-tree-id5465 . -4) (undo-tree-id5466 . -4) (undo-tree-id5467 . -4) (undo-tree-id5468 . -4) (undo-tree-id5469 . -4) (undo-tree-id5470 . -4) (undo-tree-id5471 . -4) (undo-tree-id5472 . -4) (undo-tree-id5473 . -4) (undo-tree-id5474 . -4) (undo-tree-id5475 . -4) (undo-tree-id5476 . -4) (undo-tree-id5477 . -4) 3338 (3333 . 3338) (t 26361 9989 776666 448000)) nil (26361 10010 725256 83000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3616 . 3617) (nil fontified nil 3334 . 3617) (3334 . 3617)) nil (26361 10010 725192 312000) 0 nil])
([nil nil ((#("  void sub1fun(geometry_msgs::msg::Vector3::UniquePtr msg) {}
" 0 2 (fontified t) 2 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face c-type c-decl-id-start fontified t) 6 7 (fontified t) 7 14 (face font-lock-function-name-face fontified t) 14 15 (face (rainbow-delimiters-depth-3-face) c-type c-decl-arg-start fontified t) 15 28 (face font-lock-constant-face fontified t) 28 30 (fontified t) 30 33 (face font-lock-constant-face fontified t) 33 35 (fontified t) 35 42 (face font-lock-constant-face fontified t) 42 44 (fontified t) 44 53 (face font-lock-type-face fontified t) 53 54 (fontified t) 54 57 (face font-lock-variable-name-face fontified t) 57 58 (face (rainbow-delimiters-depth-3-face) fontified t) 58 59 (fontified t) 59 60 (face (rainbow-delimiters-depth-3-face) fontified t) 60 61 (face (rainbow-delimiters-depth-3-face) fontified t) 61 62 (fontified t)) . 3623) (undo-tree-id5478 . -61) (undo-tree-id5479 . -60) (undo-tree-id5480 . -60) (undo-tree-id5481 . -60) (undo-tree-id5482 . -60) (undo-tree-id5483 . -60) (undo-tree-id5484 . -60) (undo-tree-id5485 . -60) (undo-tree-id5486 . -60) (undo-tree-id5487 . -60) (undo-tree-id5488 . -60) (undo-tree-id5489 . -60) (undo-tree-id5490 . -60) (undo-tree-id5491 . -60) (undo-tree-id5492 . -60) (undo-tree-id5493 . -60) (undo-tree-id5494 . -60) (undo-tree-id5495 . -60) (undo-tree-id5496 . -60) (undo-tree-id5497 . -60) (undo-tree-id5498 . -60) (undo-tree-id5499 . -60) (undo-tree-id5500 . -60) (undo-tree-id5501 . -60) (undo-tree-id5502 . -60) (undo-tree-id5503 . -60) (undo-tree-id5504 . -60) (undo-tree-id5505 . -60) (undo-tree-id5506 . -60) (undo-tree-id5507 . -60) (undo-tree-id5508 . -60) (undo-tree-id5509 . -60) (undo-tree-id5510 . -60) (undo-tree-id5511 . -60) (undo-tree-id5512 . -60) (undo-tree-id5513 . -60) (undo-tree-id5514 . -60) (undo-tree-id5515 . -60) (undo-tree-id5516 . -60) (undo-tree-id5517 . -60) (undo-tree-id5518 . -60) (undo-tree-id5519 . -60) (undo-tree-id5520 . -60) (undo-tree-id5521 . -60) (undo-tree-id5522 . -60) (undo-tree-id5523 . -60) (undo-tree-id5524 . -60) (undo-tree-id5525 . -60) (undo-tree-id5526 . -60) (undo-tree-id5527 . -60) (undo-tree-id5528 . -60) (undo-tree-id5529 . -60) (undo-tree-id5530 . -60) (undo-tree-id5531 . -60) (undo-tree-id5532 . -60) (undo-tree-id5533 . -60) (undo-tree-id5534 . -60) (undo-tree-id5535 . -60) (undo-tree-id5536 . -60) (undo-tree-id5537 . -60) (undo-tree-id5538 . -60) (undo-tree-id5539 . -60) (undo-tree-id5540 . -60) (undo-tree-id5541 . -60) (undo-tree-id5542 . -60) (undo-tree-id5543 . -60) (undo-tree-id5544 . -60) (undo-tree-id5545 . -60) (undo-tree-id5546 . -60) (undo-tree-id5547 . -60) (undo-tree-id5548 . -60) (undo-tree-id5549 . -60) (undo-tree-id5550 . -60) (undo-tree-id5551 . -60) (undo-tree-id5552 . -62) 3683 (t 26361 10010 743560 895000)) nil (26361 10051 359128 679000) 0 nil])
([nil nil ((3634 . 3635) (#("1" 0 1 (face font-lock-function-name-face fontified t)) . -3634) (undo-tree-id5554 . -1) 3635 (t 26361 10051 378376 518000)) nil (26361 10057 453714 885000) 0 nil])
([nil nil ((3695 . 3696) (#("1" 0 1 (face font-lock-function-name-face fontified t)) . -3695) (undo-tree-id5553 . -1) 3696) nil (26361 10057 453709 848000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3740 . 3741) (#("
" 0 1 (fontified nil)) . -3792) (3738 . 3793) 3695 (t 26361 10057 498350 956000)) nil (26361 10061 311374 342000) 0 nil])
([nil nil ((#("sub3fun" 0 3 (face font-lock-function-name-face fontified t) 3 4 (face font-lock-function-name-face fontified t) 4 7 (face font-lock-function-name-face fontified t)) . 3746) (undo-tree-id5556 . -6) (undo-tree-id5557 . -7) (undo-tree-id5558 . -7) (undo-tree-id5559 . -7) (undo-tree-id5560 . -7) (undo-tree-id5561 . -7) (undo-tree-id5562 . -7) (undo-tree-id5563 . -7) (undo-tree-id5564 . -7) (undo-tree-id5565 . -7) (undo-tree-id5566 . -7) (undo-tree-id5567 . -7) (undo-tree-id5568 . -7) (undo-tree-id5569 . -7) (undo-tree-id5570 . -7) (undo-tree-id5571 . -7) (undo-tree-id5572 . -7) (undo-tree-id5573 . -7) (undo-tree-id5574 . -7) (undo-tree-id5575 . -7) (undo-tree-id5576 . -7) (undo-tree-id5577 . -7) (undo-tree-id5578 . -7) (undo-tree-id5579 . -7) (undo-tree-id5580 . -7) (undo-tree-id5581 . -7) (undo-tree-id5582 . -7) (undo-tree-id5583 . -7) (undo-tree-id5584 . -7) (undo-tree-id5585 . -7) (undo-tree-id5586 . -7) (undo-tree-id5587 . -7) (undo-tree-id5588 . -7) (undo-tree-id5589 . -7) (undo-tree-id5590 . -7) (undo-tree-id5591 . -7) (undo-tree-id5592 . -7)) nil (26361 10061 314161 217000) 0 nil])
([nil nil ((3752 . 3757) (#("n" 0 1 (face font-lock-function-name-face fontified t)) . -3752) (undo-tree-id5665 . -1) (undo-tree-id5666 . -1) (undo-tree-id5667 . -1) (undo-tree-id5668 . -1) (undo-tree-id5669 . -1) (undo-tree-id5670 . -1) (undo-tree-id5671 . -1) (undo-tree-id5672 . -1) (undo-tree-id5673 . -1) (undo-tree-id5674 . -1) (undo-tree-id5675 . -1) (undo-tree-id5676 . -1) (undo-tree-id5677 . -1) (undo-tree-id5678 . -1) (undo-tree-id5679 . -1) (undo-tree-id5680 . -1) (undo-tree-id5681 . -1) (undo-tree-id5682 . -1) (undo-tree-id5683 . -1) (undo-tree-id5684 . -1) (undo-tree-id5685 . -1) (undo-tree-id5686 . -1) (undo-tree-id5687 . -1) (undo-tree-id5688 . -1) (undo-tree-id5689 . -1) (undo-tree-id5690 . -1) (undo-tree-id5691 . -1) (undo-tree-id5692 . -1) (undo-tree-id5693 . -1) (undo-tree-id5694 . -1) (undo-tree-id5695 . -1) (undo-tree-id5696 . -1) (undo-tree-id5697 . -1) (undo-tree-id5698 . -1) (undo-tree-id5699 . -1) (undo-tree-id5700 . -1) (undo-tree-id5701 . -1) (undo-tree-id5702 . -1) (undo-tree-id5703 . -1) (undo-tree-id5704 . -1) (undo-tree-id5705 . -1) (undo-tree-id5706 . -1) (undo-tree-id5707 . -1) (undo-tree-id5708 . -1) (undo-tree-id5709 . -1) (undo-tree-id5710 . -1) (undo-tree-id5711 . -1) (undo-tree-id5712 . -1) (undo-tree-id5713 . -1) (undo-tree-id5714 . -1) (undo-tree-id5715 . -1) (undo-tree-id5716 . -1) (undo-tree-id5717 . -1) (undo-tree-id5718 . -1) (undo-tree-id5719 . -1) (undo-tree-id5720 . -1) (undo-tree-id5721 . -1) (undo-tree-id5722 . -1) (undo-tree-id5723 . -1) (undo-tree-id5724 . -1) (undo-tree-id5725 . -1) 3753 (3746 . 3753)) nil (26361 10068 757779 807000) 0 nil] [nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . 3746) (undo-tree-id5555 . -1)) ((3746 . 3747)) (26361 10061 311274 963000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 3756) (undo-tree-id5593 . -1) (undo-tree-id5594 . -1) (undo-tree-id5595 . -1) (undo-tree-id5596 . -1) (undo-tree-id5597 . -1) (undo-tree-id5598 . -1) (undo-tree-id5599 . -1) (undo-tree-id5600 . -1) (undo-tree-id5601 . -1) (undo-tree-id5602 . -1) (undo-tree-id5603 . -1) (undo-tree-id5604 . -1) (undo-tree-id5605 . -1) (undo-tree-id5606 . -1) (undo-tree-id5607 . -1) (undo-tree-id5608 . -1) (undo-tree-id5609 . -1) (undo-tree-id5610 . -1) (undo-tree-id5611 . -1) (undo-tree-id5612 . -1) (undo-tree-id5613 . -1) (undo-tree-id5614 . -1) (undo-tree-id5615 . -1) (undo-tree-id5616 . -1) (undo-tree-id5617 . -1) (undo-tree-id5618 . -1) (undo-tree-id5619 . -1) (undo-tree-id5620 . -1) (undo-tree-id5621 . -1) (undo-tree-id5622 . -1) (undo-tree-id5623 . -1) (undo-tree-id5624 . -1) (undo-tree-id5625 . -1) (undo-tree-id5626 . -1) (undo-tree-id5627 . -1) (undo-tree-id5628 . -1) (undo-tree-id5629 . -1) (undo-tree-id5630 . -1) (undo-tree-id5631 . -1) (undo-tree-id5632 . -1) (undo-tree-id5633 . -1) (undo-tree-id5634 . -1) (undo-tree-id5635 . -1) (undo-tree-id5636 . -1) (undo-tree-id5637 . -1) (undo-tree-id5638 . -1) (undo-tree-id5639 . -1) (undo-tree-id5640 . -1) (undo-tree-id5641 . -1) (undo-tree-id5642 . -1) (undo-tree-id5643 . -1) (undo-tree-id5644 . -1) (undo-tree-id5645 . -1) (undo-tree-id5646 . -1) (undo-tree-id5647 . -1) (undo-tree-id5648 . -1) (undo-tree-id5649 . -1) (undo-tree-id5650 . -1) (undo-tree-id5651 . -1) (undo-tree-id5652 . -1) (undo-tree-id5653 . -1) (undo-tree-id5654 . -1) (undo-tree-id5655 . -1) (undo-tree-id5656 . -1) (undo-tree-id5657 . -1) (undo-tree-id5658 . -1) (undo-tree-id5659 . -1) (undo-tree-id5660 . -1) (undo-tree-id5661 . -1) (undo-tree-id5662 . -1) (undo-tree-id5663 . -1) (undo-tree-id5664 . -1)) nil (26361 10068 757732 408000) 0 nil])
nil
([nil nil ((#("        RCLCPP_INFO(this->get_logger(), \"Linear: x=%.2f, y=%.2f, z=%.2f\",
" 0 19 (fontified t) 19 20 (face (rainbow-delimiters-depth-4-face) fontified t) 20 24 (face font-lock-keyword-face fontified t) 24 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-5-face) fontified t) 37 38 (face (rainbow-delimiters-depth-5-face) fontified t) 38 40 (fontified t) 40 72 (face font-lock-string-face fontified t) 72 74 (fontified t)) . 3334) (undo-tree-id5828 . -73) (undo-tree-id5829 . -17) 3351 (t 26361 10068 802305 205000)) nil (26361 10121 184877 82000) 0 nil])
([nil nil ((#("                    msg->linear.x, msg->linear.y, msg->linear.z);
" 0 63 (fontified t) 63 64 (face (rainbow-delimiters-mismatched-face) fontified t) 64 65 (fontified t) 65 66 (fontified t)) . 3334) (undo-tree-id5826 . -65) (undo-tree-id5827 . -17) 3351) nil (26361 10121 184875 920000) 0 nil])
([nil nil ((#("        RCLCPP_INFO(this->get_logger(), \"Angular: x=%.2f, y=%.2f, z=%.2f\",
" 0 19 (fontified t) 19 20 (face (rainbow-delimiters-depth-4-face) fontified t) 20 24 (face font-lock-keyword-face fontified t) 24 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-5-face) fontified t) 37 38 (face (rainbow-delimiters-depth-5-face) fontified t) 38 40 (fontified t) 40 73 (face font-lock-string-face fontified t) 73 74 (fontified t) 74 75 (fontified t)) . 3334) (undo-tree-id5824 . -74) (undo-tree-id5825 . -17) 3351) nil (26361 10121 184874 166000) 0 nil])
([nil nil ((#("                    msg->angular.x, msg->angular.y, msg->angular.z);
" 0 66 (fontified t) 66 67 (face (rainbow-delimiters-mismatched-face) fontified t) 67 68 (rear-nonsticky t fontified t) 68 69 (fontified t)) . 3334) (undo-tree-id5808 . -68) (undo-tree-id5809 . -69) (undo-tree-id5810 . -69) (undo-tree-id5811 . -69) (undo-tree-id5812 . -69) (undo-tree-id5813 . -69) (undo-tree-id5814 . -69) (undo-tree-id5815 . -69) (undo-tree-id5816 . -69) (undo-tree-id5817 . -69) (undo-tree-id5818 . -69) (undo-tree-id5819 . -69) (undo-tree-id5820 . -69) (undo-tree-id5821 . -67) (undo-tree-id5822 . -67) (undo-tree-id5823 . -17) 3351) nil (26361 10121 184872 301000) 0 nil])
([nil nil ((3363 . 3364) (3361 . 3363) (3355 . 3361) (#("linear" 0 6 (fontified nil)) . -3355) (undo-tree-id5786 . -6) (3355 . 3361) (#("li" 0 1 (fontified t) 1 2 (fontified t)) . -3355) (undo-tree-id5787 . -2) (undo-tree-id5788 . -2) 3357 (3355 . 3357) (3354 . 3355) (3353 . 3354) (#("." 0 1 (fontified t)) . -3353) (undo-tree-id5789 . -1) (undo-tree-id5790 . -1) (#("l" 0 1 (fontified t)) . -3354) (undo-tree-id5791 . -1) (undo-tree-id5792 . -1) 3355 (3354 . 3355) (#("l" 0 1 (fontified t)) . -3354) (undo-tree-id5793 . -1) (undo-tree-id5794 . -1) (#("i" 0 1 (fontified t)) . -3355) (undo-tree-id5795 . -1) (undo-tree-id5796 . -1) 3356 (3353 . 3356) (3350 . 3353) (#("ms" 0 2 (fontified nil)) . 3350) (3350 . 3352) (#("msg" 0 3 (fontified nil)) . -3350) (undo-tree-id5797 . -3) (3350 . 3353) (#("ms" 0 1 (fontified t) 1 2 (fontified t)) . -3350) (undo-tree-id5798 . -2) (undo-tree-id5799 . -2) 3352 (3350 . 3352) (#("m" 0 1 (fontified t)) . -3350) (undo-tree-id5800 . -1) (undo-tree-id5801 . -1) (#("e" 0 1 (fontified t)) . -3351) (undo-tree-id5802 . -1) (undo-tree-id5803 . -1) 3352 (3349 . 3352) (3345 . 3349) (#(" " 0 1 (fontified t)) . -3345) (undo-tree-id5804 . -1) 3346 (3345 . 3346) (3338 . 3345) (#("g" 0 1 (fontified nil)) . 3338) (3338 . 3339) (#("glosend" 0 7 (fontified nil)) . -3338) (undo-tree-id5805 . -7) (3338 . 3345) (#("g" 0 1 (fontified t)) . -3338) (undo-tree-id5806 . -1) (undo-tree-id5807 . -1) 3339 (3338 . 3339) (3333 . 3338)) nil (26361 10121 184861 743000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3368 . 3369) (#("
" 0 1 (fontified nil)) . -3395) (3364 . 3396) 3363) nil (26361 10121 184849 158000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3399 . 3400) (#("
" 0 1 (fontified nil)) . -3426) (3395 . 3427) 3369) nil (26361 10121 184848 537000) 0 nil])
([nil nil ((3377 . 3378) (#("x" 0 1 (fontified t)) . 3377)) nil (26361 10121 184847 864000) 0 nil])
([nil nil ((3393 . 3394) (#("x" 0 1 (fontified t)) . -3393) (undo-tree-id5785 . -1) 3394) nil (26361 10121 184847 409000) 0 nil])
([nil nil ((#("glosend" 0 7 (fontified t)) . 3400) (undo-tree-id5784 . -6)) nil (26361 10121 184846 231000) 0 nil])
([nil nil ((3400 . 3407) (#("g" 0 1 (fontified nil)) . 3400) (3400 . 3401) (#("glosend" 0 7 (fontified nil)) . -3400) (undo-tree-id5777 . -7) (3400 . 3407) (#("g" 0 1 (fontified t)) . -3400) (undo-tree-id5778 . -1) (undo-tree-id5779 . -1) 3401 (3400 . 3401) (#("t" 0 1 (fontified t)) . -3400) (undo-tree-id5780 . -1) (undo-tree-id5781 . -1) (#("h" 0 1 (fontified t)) . -3401) (undo-tree-id5782 . -1) (undo-tree-id5783 . -1) 3402 (3400 . 3402)) nil (26361 10121 184844 297000) 0 nil])
([nil nil ((3408 . 3413) (#("theta" 0 5 (fontified nil)) . -3408) (undo-tree-id5771 . -5) (3408 . 3413) (#("th" 0 1 (fontified t) 1 2 (fontified t)) . -3408) (undo-tree-id5772 . -2) (undo-tree-id5773 . -2) 3410 (3408 . 3410) (#("z" 0 1 (fontified t)) . -3408) (undo-tree-id5774 . -1) (undo-tree-id5775 . -1) 3409 (3408 . 3409) (#("x" 0 1 (fontified t)) . -3408) (undo-tree-id5776 . -1) 3409) nil (26361 10121 184840 367000) 0 nil])
([nil nil ((#("linear" 0 6 (fontified t)) . 3421) (undo-tree-id5769 . -5) (undo-tree-id5770 . -6)) nil (26361 10121 184837 384000) 0 nil])
([nil nil ((3421 . 3428) (#("an" 0 2 (fontified nil)) . 3421) (3421 . 3423) (#("angular" 0 7 (fontified nil)) . -3421) (undo-tree-id5751 . -7) (3421 . 3428) (#("an" 0 1 (fontified t) 1 2 (fontified t)) . -3421) (undo-tree-id5752 . -2) (undo-tree-id5753 . -2) (undo-tree-id5754 . -2) (undo-tree-id5755 . -2) (undo-tree-id5756 . -2) (undo-tree-id5757 . -2) (undo-tree-id5758 . -2) (undo-tree-id5759 . -2) (undo-tree-id5760 . -2) (undo-tree-id5761 . -2) (undo-tree-id5762 . -2) (undo-tree-id5763 . -2) (undo-tree-id5764 . -2) (undo-tree-id5765 . -2) (undo-tree-id5766 . -2) (undo-tree-id5767 . -2) (undo-tree-id5768 . -2) 3423 (3421 . 3423)) nil (26361 10121 184835 41000) 0 nil])
([nil nil ((3429 . 3430) (#("x" 0 1 (fontified t)) . -3429) (undo-tree-id5726 . -1) (undo-tree-id5727 . -1) (undo-tree-id5728 . -1) (undo-tree-id5729 . -1) (undo-tree-id5730 . -1) (undo-tree-id5731 . -1) (undo-tree-id5732 . -1) (undo-tree-id5733 . -1) (undo-tree-id5734 . -1) (undo-tree-id5735 . -1) (undo-tree-id5736 . -1) (undo-tree-id5737 . -1) (undo-tree-id5738 . -1) (undo-tree-id5739 . -1) (undo-tree-id5740 . -1) (undo-tree-id5741 . -1) (undo-tree-id5742 . -1) (undo-tree-id5743 . -1) (undo-tree-id5744 . -1) (undo-tree-id5745 . -1) (undo-tree-id5746 . -1) (undo-tree-id5747 . -1) (undo-tree-id5748 . -1) (undo-tree-id5749 . -1) (undo-tree-id5750 . -1) 3430) nil (26361 10121 184822 891000) 0 nil])
([nil nil ((3448 . 3449) (3443 . 3448) (3437 . 3443) (#("ed" 0 2 (fontified nil)) . 3437) (3437 . 3439) (#("edited" 0 6 (fontified nil)) . -3437) (undo-tree-id5834 . -6) (3437 . 3443) (#("ed" 0 1 (fontified t) 1 2 (fontified t)) . -3437) (undo-tree-id5835 . -2) (undo-tree-id5836 . -2) 3439 (3437 . 3439) (#("d" 0 1 (fontified t)) . -3437) (undo-tree-id5837 . -1) (undo-tree-id5838 . -1) 3438 (3437 . 3438) (#("d" 0 1 (fontified t)) . -3437) (undo-tree-id5839 . -1) (undo-tree-id5840 . -1) 3438 (3437 . 3438) (3433 . 3437) (#("    " 0 4 (fontified nil)) . 3432) (undo-tree-id5841 . -4) (3436 . 3437) (3431 . 3436) (t 26361 10121 203116 828000)) nil (26361 10133 143419 809000) 0 nil])
([nil nil ((#("= " 0 1 (fontified t) 1 2 (fontified t)) . 3445) (undo-tree-id5833 . -1)) nil (26361 10133 143414 250000) 0 nil])
([nil nil ((#("+" 0 1 (fontified t)) . 3444)) nil (26361 10133 143412 547000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 3444)) nil (26361 10133 143411 497000) 0 nil])
([nil nil ((3443 . 3445)) nil (26361 10133 143411 94000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 3445) (undo-tree-id5830 . 1) (undo-tree-id5831 . -1) (undo-tree-id5832 . -1)) nil (26361 10133 143407 817000) 0 nil])
([nil nil ((3468 . 3474) (t 26361 10133 187078 964000)) nil (26361 10148 271388 958000) 0 nil])
([nil nil ((3535 . 3541)) nil (26361 10148 271387 621000) 0 nil])
([nil nil ((3598 . 3604)) nil (26361 10154 819534 977000) 0 nil])
([nil nil ((#("  void sub3fun(const std_msgs::msg::Bool::UniquePtr msg) {}
" 0 2 (fontified t) 2 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face c-type c-decl-id-start fontified t) 6 7 (fontified t) 7 10 (face font-lock-function-name-face fontified t) 10 11 (face font-lock-function-name-face fontified t) 11 14 (face font-lock-function-name-face fontified t) 14 15 (face (rainbow-delimiters-depth-3-face) c-type c-decl-arg-start fontified t) 15 16 (face font-lock-keyword-face fontified t) 16 17 (face font-lock-keyword-face fontified t) 17 18 (face font-lock-keyword-face fontified t) 18 19 (face font-lock-keyword-face fontified t) 19 20 (face font-lock-keyword-face fontified t) 20 21 (fontified t) 21 29 (face font-lock-constant-face fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 34 (face font-lock-constant-face fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 39 (face font-lock-constant-face fontified t) 39 40 (face font-lock-constant-face fontified t) 40 42 (fontified t) 42 51 (face font-lock-type-face fontified t) 51 52 (fontified t) 52 55 (face font-lock-variable-name-face fontified t) 55 56 (face (rainbow-delimiters-depth-3-face) fontified t) 56 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-3-face) fontified t) 58 59 (face (rainbow-delimiters-depth-3-face) fontified t) 59 60 (fontified t)) . 3520) (undo-tree-id5971 . -59) (undo-tree-id5972 . -23) (undo-tree-id5973 . -23) (undo-tree-id5974 . -23) (undo-tree-id5975 . -23) (undo-tree-id5976 . -23) (undo-tree-id5977 . -23) (undo-tree-id5978 . -23) (undo-tree-id5979 . -23) (undo-tree-id5980 . -23) (undo-tree-id5981 . -23) (undo-tree-id5982 . -23) (undo-tree-id5983 . -23) (undo-tree-id5984 . -23) (undo-tree-id5985 . -23) (undo-tree-id5986 . -23) (undo-tree-id5987 . -23) (undo-tree-id5988 . -23) (undo-tree-id5989 . -23) (undo-tree-id5990 . -23) (undo-tree-id5991 . -23) (undo-tree-id5992 . -23) (undo-tree-id5993 . -23) (undo-tree-id5994 . -23) (undo-tree-id5995 . -23) (undo-tree-id5996 . -23) (undo-tree-id5997 . -23) (undo-tree-id5998 . -23) (undo-tree-id5999 . -23) (undo-tree-id6000 . -23) (undo-tree-id6001 . -23) (undo-tree-id6002 . -23) (undo-tree-id6003 . -23) (undo-tree-id6004 . -23) (undo-tree-id6005 . -23) (undo-tree-id6006 . -23) (undo-tree-id6007 . -23) (undo-tree-id6008 . -23) (undo-tree-id6009 . -23) (undo-tree-id6010 . -23) (undo-tree-id6011 . -23) (undo-tree-id6012 . -23) (undo-tree-id6013 . -23) (undo-tree-id6014 . -23) (undo-tree-id6015 . -23) (undo-tree-id6016 . -23) (undo-tree-id6017 . -23) (undo-tree-id6018 . -23) (undo-tree-id6019 . -23) (undo-tree-id6020 . -23) (undo-tree-id6021 . -23) (undo-tree-id6022 . -23) (undo-tree-id6023 . -23) (undo-tree-id6024 . -23) (undo-tree-id6025 . -23) (undo-tree-id6026 . -23) (undo-tree-id6027 . -23) (undo-tree-id6028 . -23) (undo-tree-id6029 . -23) (undo-tree-id6030 . -23) (undo-tree-id6031 . -23) (undo-tree-id6032 . -23) (undo-tree-id6033 . -23) (undo-tree-id6034 . -23) (undo-tree-id6035 . -23) (undo-tree-id6036 . -23) (undo-tree-id6037 . -23) (undo-tree-id6038 . -23) (undo-tree-id6039 . -23) (undo-tree-id6040 . -23) (undo-tree-id6041 . -23) (undo-tree-id6042 . -23) (undo-tree-id6043 . -23) (undo-tree-id6044 . -23) (undo-tree-id6045 . -23) (undo-tree-id6046 . -23) (undo-tree-id6047 . -23) (undo-tree-id6048 . -23) (undo-tree-id6049 . -23) (undo-tree-id6050 . -23) (undo-tree-id6051 . -23) (undo-tree-id6052 . -23) (undo-tree-id6053 . -23) (undo-tree-id6054 . -23) (undo-tree-id6055 . -23) (undo-tree-id6056 . -23) (undo-tree-id6057 . -23) (undo-tree-id6058 . -23) (undo-tree-id6059 . -23) (undo-tree-id6060 . -23) (undo-tree-id6061 . -23) (undo-tree-id6062 . -23) (undo-tree-id6063 . -23) (undo-tree-id6064 . -23) (undo-tree-id6065 . -23) (undo-tree-id6066 . -23) (undo-tree-id6067 . -23) (undo-tree-id6068 . -23) (undo-tree-id6069 . -23) (undo-tree-id6070 . -23) (undo-tree-id6071 . -23) (undo-tree-id6072 . -23) (undo-tree-id6073 . -23) (undo-tree-id6074 . -23) (undo-tree-id6075 . -23) (undo-tree-id6076 . -23) (undo-tree-id6077 . -23) (undo-tree-id6078 . -23) (undo-tree-id6079 . -23) (undo-tree-id6080 . -23) (undo-tree-id6081 . -23) (undo-tree-id6082 . -23) (undo-tree-id6083 . -23) (undo-tree-id6084 . -23) (undo-tree-id6085 . -23) (undo-tree-id6086 . -23) (undo-tree-id6087 . -23) (undo-tree-id6088 . -23) (undo-tree-id6089 . -23) (undo-tree-id6090 . -23) (undo-tree-id6091 . -23) (undo-tree-id6092 . -23) (undo-tree-id6093 . -23) (undo-tree-id6094 . -23) (undo-tree-id6095 . -23) (undo-tree-id6096 . -23) (undo-tree-id6097 . -23) (undo-tree-id6098 . -23) (undo-tree-id6099 . -23) (undo-tree-id6100 . -23) (undo-tree-id6101 . -23) (undo-tree-id6102 . -23) (undo-tree-id6103 . -23) (undo-tree-id6104 . -23) (undo-tree-id6105 . -23) (undo-tree-id6106 . -23) (undo-tree-id6107 . -23) (undo-tree-id6108 . -23) (undo-tree-id6109 . -23) (undo-tree-id6110 . -23) (undo-tree-id6111 . -23) (undo-tree-id6112 . -60) 3543 (t 26361 10148 315033 793000)) nil (26361 10158 23879 810000) 0 nil] [nil nil ((#("  void sub3fun(const std_msgs::msg::Bool::UniquePtr msg) {}
  void boolsubfun(const std_msgs::msg::Bool::UniquePtr msg) {}
" 0 2 (fontified t) 2 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face c-type c-decl-id-start fontified t) 6 7 (fontified t) 7 10 (face font-lock-function-name-face fontified t) 10 11 (face font-lock-function-name-face fontified t) 11 14 (face font-lock-function-name-face fontified t) 14 15 (face (rainbow-delimiters-depth-3-face) c-type c-decl-arg-start fontified t) 15 16 (face font-lock-keyword-face fontified t) 16 17 (face font-lock-keyword-face fontified t) 17 18 (face font-lock-keyword-face fontified t) 18 19 (face font-lock-keyword-face fontified t) 19 20 (face font-lock-keyword-face fontified t) 20 21 (fontified t) 21 29 (face font-lock-constant-face fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 34 (face font-lock-constant-face fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 39 (face font-lock-constant-face fontified t) 39 40 (face font-lock-constant-face fontified t) 40 42 (fontified t) 42 51 (face font-lock-type-face fontified t) 51 52 (fontified t) 52 55 (face font-lock-variable-name-face fontified t) 55 56 (face (rainbow-delimiters-depth-3-face) fontified t) 56 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-3-face) fontified t) 58 59 (face (rainbow-delimiters-depth-3-face) fontified t) 59 60 (fontified t) 60 61 (fontified t) 61 62 (fontified t rear-nonsticky t) 62 65 (face font-lock-type-face fontified t) 65 66 (face font-lock-type-face c-type c-decl-id-start fontified t) 66 67 (fontified t) 67 68 (face font-lock-function-name-face fontified t) 68 69 (face font-lock-function-name-face fontified t) 69 70 (face font-lock-function-name-face fontified t) 70 71 (face font-lock-function-name-face fontified t) 71 72 (face font-lock-function-name-face fontified t) 72 73 (face font-lock-function-name-face fontified t) 73 74 (face font-lock-function-name-face fontified t) 74 75 (face font-lock-function-name-face fontified t) 75 76 (face font-lock-function-name-face fontified t) 76 77 (face font-lock-function-name-face fontified t) 77 78 (face (rainbow-delimiters-depth-3-face) c-type c-decl-arg-start fontified t) 78 79 (face font-lock-keyword-face fontified t) 79 80 (face font-lock-keyword-face fontified t) 80 81 (face font-lock-keyword-face fontified t) 81 82 (face font-lock-keyword-face fontified t) 82 83 (face font-lock-keyword-face fontified t) 83 84 (fontified t) 84 92 (face font-lock-constant-face fontified t) 92 93 (fontified t) 93 94 (fontified t) 94 97 (face font-lock-constant-face fontified t) 97 98 (fontified t) 98 99 (fontified t) 99 102 (face font-lock-constant-face fontified t) 102 103 (face font-lock-constant-face fontified t) 103 105 (fontified t) 105 114 (face font-lock-type-face fontified t) 114 115 (fontified t) 115 118 (face font-lock-variable-name-face fontified t) 118 119 (face (rainbow-delimiters-depth-3-face) fontified t) 119 120 (fontified t) 120 121 (face (rainbow-delimiters-depth-3-face) fontified t) 121 122 (face (rainbow-delimiters-depth-3-face) fontified t) 122 123 (fontified t)) . 3520) (undo-tree-id5842 . -122) (undo-tree-id5843 . 39) (undo-tree-id5844 . -77) (undo-tree-id5845 . -77) (undo-tree-id5846 . 39) (undo-tree-id5847 . -23) (undo-tree-id5848 . -23) (undo-tree-id5849 . -23) (undo-tree-id5850 . -23) (undo-tree-id5851 . -23) (undo-tree-id5852 . -23) (undo-tree-id5853 . -23) (undo-tree-id5854 . -23) (undo-tree-id5855 . -23) (undo-tree-id5856 . -23) (undo-tree-id5857 . -23) (undo-tree-id5858 . -23) (undo-tree-id5859 . -23) (undo-tree-id5860 . -23) (undo-tree-id5861 . -23) (undo-tree-id5862 . -23) (undo-tree-id5863 . -23) (undo-tree-id5864 . -23) (undo-tree-id5865 . -23) (undo-tree-id5866 . -60) (undo-tree-id5867 . -83) (undo-tree-id5868 . -83) (undo-tree-id5869 . -83) (undo-tree-id5870 . -83) (undo-tree-id5871 . -83) (undo-tree-id5872 . -83) (undo-tree-id5873 . -83) (undo-tree-id5874 . -83) (undo-tree-id5875 . -83) (undo-tree-id5876 . -83) (undo-tree-id5877 . -83) (undo-tree-id5878 . -83) (undo-tree-id5879 . -83) (undo-tree-id5880 . -83) (undo-tree-id5881 . -83) (undo-tree-id5882 . -83) (undo-tree-id5883 . -83) (undo-tree-id5884 . -83) (undo-tree-id5885 . -83) (undo-tree-id5886 . -83) (undo-tree-id5887 . -83) (undo-tree-id5888 . -83) (undo-tree-id5889 . -83) (undo-tree-id5890 . -83) (undo-tree-id5891 . -83) (undo-tree-id5892 . -83) (undo-tree-id5893 . -83) (undo-tree-id5894 . -83) (undo-tree-id5895 . -83) (undo-tree-id5896 . -83) (undo-tree-id5897 . -83) (undo-tree-id5898 . -83) (undo-tree-id5899 . -83) (undo-tree-id5900 . -83) (undo-tree-id5901 . -83) (undo-tree-id5902 . -83) (undo-tree-id5903 . -83) (undo-tree-id5904 . -83) (undo-tree-id5905 . -83) (undo-tree-id5906 . -83) (undo-tree-id5907 . -83) (undo-tree-id5908 . -83) (undo-tree-id5909 . -83) (undo-tree-id5910 . -83) (undo-tree-id5911 . -83) (undo-tree-id5912 . -83) (undo-tree-id5913 . -83) (undo-tree-id5914 . -83) (undo-tree-id5915 . -83) (undo-tree-id5916 . -83) (undo-tree-id5917 . -83) (undo-tree-id5918 . -83) (undo-tree-id5919 . -83) (undo-tree-id5920 . -83) (undo-tree-id5921 . -83) (undo-tree-id5922 . -83) (undo-tree-id5923 . -83) (undo-tree-id5924 . -83) (undo-tree-id5925 . -83) (undo-tree-id5926 . -83) (undo-tree-id5927 . -83) (undo-tree-id5928 . -83) (undo-tree-id5929 . -83) (undo-tree-id5930 . -83) (undo-tree-id5931 . -83) (undo-tree-id5932 . -83) (undo-tree-id5933 . -83) (undo-tree-id5934 . -83) (undo-tree-id5935 . -83) (undo-tree-id5936 . -83) (undo-tree-id5937 . -83) (undo-tree-id5938 . -83) (undo-tree-id5939 . -83) (undo-tree-id5940 . -83) (undo-tree-id5941 . -83) (undo-tree-id5942 . -83) (undo-tree-id5943 . -83) (undo-tree-id5944 . -83) (undo-tree-id5945 . -83) (undo-tree-id5946 . -83) (undo-tree-id5947 . -83) (undo-tree-id5948 . -83) (undo-tree-id5949 . -83) (undo-tree-id5950 . -83) (undo-tree-id5951 . -83) (undo-tree-id5952 . -83) (undo-tree-id5953 . -83) (undo-tree-id5954 . -83) (undo-tree-id5955 . -83) (undo-tree-id5956 . -83) (undo-tree-id5957 . -83) (undo-tree-id5958 . -83) (undo-tree-id5959 . -83) (undo-tree-id5960 . -83) (undo-tree-id5961 . -83) (undo-tree-id5962 . -83) (undo-tree-id5963 . -83) (undo-tree-id5964 . -83) (undo-tree-id5965 . -83) (undo-tree-id5966 . -83) (undo-tree-id5967 . -83) (undo-tree-id5968 . -83) (undo-tree-id5969 . -83) (undo-tree-id5970 . -123) 3603 (t 26361 10148 315033 793000)) ((3520 . 3643)) (26361 10154 816320 992000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3520 . 3521) (#("
" 0 1 (fontified nil)) . -3584) (3518 . 3585) 3476 (t 26361 10158 67006 193000)) nil (26361 10166 72256 675000) 0 nil])
nil
([nil nil ((#("Twist" 0 5 (face font-lock-constant-face fontified t)) . 3494) (undo-tree-id6222 . -4) (undo-tree-id6223 . -5) (undo-tree-id6224 . -5) (undo-tree-id6225 . -5) (undo-tree-id6226 . -5) (undo-tree-id6227 . -5) (undo-tree-id6228 . -5) (undo-tree-id6229 . -5) (undo-tree-id6230 . -5) (undo-tree-id6231 . -5) (undo-tree-id6232 . -5) (undo-tree-id6233 . -5) (undo-tree-id6234 . -5) (undo-tree-id6235 . -5) (undo-tree-id6236 . -5) (undo-tree-id6237 . -5) (undo-tree-id6238 . -5) (undo-tree-id6239 . -5) (undo-tree-id6240 . -5) (undo-tree-id6241 . -5) (undo-tree-id6242 . -5) (undo-tree-id6243 . -5) (undo-tree-id6244 . -5) (undo-tree-id6245 . -5) (undo-tree-id6246 . -5) (undo-tree-id6247 . -5) (undo-tree-id6248 . -5) (undo-tree-id6249 . -5) (undo-tree-id6250 . -5) (undo-tree-id6251 . -5) (undo-tree-id6252 . -5) (undo-tree-id6253 . -5) (undo-tree-id6254 . -5) (undo-tree-id6255 . -5) (undo-tree-id6256 . -5) (undo-tree-id6257 . -5) (undo-tree-id6258 . -5)) nil (26361 10166 72255 550000) 0 nil])
([nil nil ((3494 . 3501) (#("V" 0 1 (fontified nil)) . 3494) (3494 . 3495) (#("Vector3" 0 7 (fontified nil)) . -3494) (undo-tree-id6113 . -7) (3494 . 3501) (#("V" 0 1 (face font-lock-constant-face fontified t)) . -3494) (undo-tree-id6114 . -1) (undo-tree-id6115 . -1) (undo-tree-id6116 . -1) (undo-tree-id6117 . -1) (undo-tree-id6118 . -1) (undo-tree-id6119 . -1) (undo-tree-id6120 . -1) (undo-tree-id6121 . -1) (undo-tree-id6122 . -1) (undo-tree-id6123 . -1) (undo-tree-id6124 . -1) (undo-tree-id6125 . -1) 3495 (3494 . 3495) (#("B" 0 1 (face font-lock-constant-face fontified t)) . -3494) (undo-tree-id6126 . -1) (undo-tree-id6127 . -1) (undo-tree-id6128 . -1) (undo-tree-id6129 . -1) (undo-tree-id6130 . -1) (undo-tree-id6131 . -1) (undo-tree-id6132 . -1) (undo-tree-id6133 . -1) (undo-tree-id6134 . -1) (undo-tree-id6135 . -1) (undo-tree-id6136 . -1) (undo-tree-id6137 . -1) (undo-tree-id6138 . -1) (undo-tree-id6139 . -1) (undo-tree-id6140 . -1) (undo-tree-id6141 . -1) (undo-tree-id6142 . -1) (undo-tree-id6143 . -1) (undo-tree-id6144 . -1) (undo-tree-id6145 . -1) (undo-tree-id6146 . -1) (undo-tree-id6147 . -1) (undo-tree-id6148 . -1) (undo-tree-id6149 . -1) (undo-tree-id6150 . -1) (undo-tree-id6151 . -1) (undo-tree-id6152 . -1) (undo-tree-id6153 . -1) (undo-tree-id6154 . -1) (undo-tree-id6155 . -1) (undo-tree-id6156 . -1) (undo-tree-id6157 . -1) (undo-tree-id6158 . -1) (undo-tree-id6159 . -1) (undo-tree-id6160 . -1) (undo-tree-id6161 . -1) (undo-tree-id6162 . -1) (undo-tree-id6163 . -1) (undo-tree-id6164 . -1) (undo-tree-id6165 . -1) (undo-tree-id6166 . -1) (undo-tree-id6167 . -1) (undo-tree-id6168 . -1) (undo-tree-id6169 . -1) (undo-tree-id6170 . -1) (undo-tree-id6171 . -1) (undo-tree-id6172 . -1) (undo-tree-id6173 . -1) (undo-tree-id6174 . -1) (undo-tree-id6175 . -1) (undo-tree-id6176 . -1) (undo-tree-id6177 . -1) (undo-tree-id6178 . -1) (undo-tree-id6179 . -1) (undo-tree-id6180 . -1) (undo-tree-id6181 . -1) (undo-tree-id6182 . -1) (undo-tree-id6183 . -1) (undo-tree-id6184 . -1) (undo-tree-id6185 . -1) (undo-tree-id6186 . -1) (undo-tree-id6187 . -1) (undo-tree-id6188 . -1) (undo-tree-id6189 . -1) (undo-tree-id6190 . -1) (undo-tree-id6191 . -1) (undo-tree-id6192 . -1) (undo-tree-id6193 . -1) (undo-tree-id6194 . -1) (undo-tree-id6195 . -1) (undo-tree-id6196 . -1) (undo-tree-id6197 . -1) (undo-tree-id6198 . -1) (undo-tree-id6199 . -1) (undo-tree-id6200 . -1) (undo-tree-id6201 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -3495) (undo-tree-id6202 . -1) (undo-tree-id6203 . -1) (undo-tree-id6204 . -1) (undo-tree-id6205 . -1) (undo-tree-id6206 . -1) (undo-tree-id6207 . -1) (undo-tree-id6208 . -1) (undo-tree-id6209 . -1) (undo-tree-id6210 . -1) (undo-tree-id6211 . -1) (undo-tree-id6212 . -1) (undo-tree-id6213 . -1) (undo-tree-id6214 . -1) (undo-tree-id6215 . -1) (undo-tree-id6216 . -1) (undo-tree-id6217 . -1) (undo-tree-id6218 . -1) (undo-tree-id6219 . -1) (undo-tree-id6220 . -1) (undo-tree-id6221 . -1) 3496 (3494 . 3496)) nil (26361 10166 72234 544000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3521) (undo-tree-id6261 . -4) 3525 (3521 . 3525) (#("    " 0 4 (fontified nil)) . 3520) (undo-tree-id6262 . -4) (3520 . 3525) (3519 . 3523) (t 26361 10166 115984 294000)) nil (26361 10171 533171 45000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -3527) (undo-tree-id6259 . -2) 3529 (3527 . 3529) (#("  " 0 2 (fontified nil)) . 3526) (undo-tree-id6260 . -2) (3525 . 3529)) nil (26361 10171 533165 373000) 0 nil])
([nil nil ((3521 . 3525) (t 26361 10171 549969 952000)) nil (26361 10189 635460 554000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -3524) (undo-tree-id6264 . -1) (undo-tree-id6265 . -1) (#("l" 0 1 (fontified t)) . -3525) (undo-tree-id6266 . -1) (undo-tree-id6267 . -1) 3526 (3524 . 3526) (3520 . 3524)) nil (26361 10189 635460 24000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3601) (undo-tree-id6263 . -4) 3605 (3601 . 3605) (3600 . 3604)) nil (26361 10189 635456 784000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3713 . 3714) (nil fontified nil 3601 . 3714) (3601 . 3714)) nil (26361 10189 635447 299000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . 3613) (t 26361 10189 678924 625000)) nil (26361 10224 466172 342000) 0 nil])
([nil nil ((3613 . 3615)) nil (26361 10224 466171 517000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -3645) (undo-tree-id6276 . -1) 3646) nil (26361 10224 466171 47000) 0 nil])
([nil nil ((#("theta " 0 5 (fontified t) 5 6 (fontified t)) . 3408) (undo-tree-id6275 . -5)) nil (26361 10224 466169 355000) 0 nil])
([nil nil ((3413 . 3414) (3408 . 3413) (#("o" 0 1 (fontified nil)) . 3408) (3408 . 3409) (#("omega" 0 5 (fontified nil)) . -3408) (undo-tree-id6268 . -5) (3408 . 3413) (#("ome" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -3408) (undo-tree-id6269 . -3) (undo-tree-id6270 . -3) 3411 (3409 . 3411) (#("n" 0 1 (fontified t)) . -3409) (undo-tree-id6271 . -1) (undo-tree-id6272 . -1) (#("e" 0 1 (fontified t)) . -3410) (undo-tree-id6273 . -1) (undo-tree-id6274 . -1) 3411 (3408 . 3411)) nil (26361 10224 466164 190000) 0 nil])
([nil nil ((#("    glosend. = msg->linear.y;
" 0 12 (fontified t) 12 29 (fontified t) 29 30 (fontified t)) . 3633) (undo-tree-id6281 . -29) (undo-tree-id6282 . -12) 3645 (t 26361 10224 482848 103000)) nil (26361 10241 593426 236000) 0 nil])
([nil nil ((3630 . 3631) (#("x" 0 1 (fontified t)) . -3630) (undo-tree-id6277 . -1) (undo-tree-id6278 . -1) (undo-tree-id6279 . -1) 3631 (3630 . 3631) (#("x" 0 1 (fontified t)) . -3630) (undo-tree-id6280 . -1) 3631) nil (26361 10241 593421 498000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 3684) (t 26361 10241 636815 233000)) nil (26361 10271 840261 802000) 0 nil])
([nil nil ((3520 . 3524) (#("    " 0 4 (fontified t)) . 3520)) nil (26361 10271 840261 214000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3524 . 3525) (#("
" 0 1 (fontified nil)) . -3525) (3524 . 3526) 3523) nil (26361 10271 840260 81000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 3525) (undo-tree-id6288 . 1)) nil (26361 10271 840259 594000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3633 . 3634) (nil fontified nil 3521 . 3634) (3521 . 3634) 3520) nil (26361 10271 840258 399000) 0 nil])
([nil nil ((3520 . 3524) (#("     " 0 1 (fontified t) 1 5 (fontified t)) . 3520) (undo-tree-id6286 . -1) (undo-tree-id6287 . -1)) nil (26361 10271 840257 790000) 0 nil])
([nil nil ((#("linear" 0 6 (fontified t)) . 3541) (undo-tree-id6285 . -5)) nil (26361 10271 840255 462000) 0 nil])
([nil nil ((#("linear" 0 6 (fontified t)) . 3566) (undo-tree-id6284 . -5)) nil (26361 10271 840254 364000) 0 nil])
([nil nil ((#("angular" 0 7 (fontified t)) . 3595) (undo-tree-id6283 . -6)) nil (26361 10271 840252 573000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 3595)) nil (26361 10271 840246 422000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 3541)) nil (26361 10271 840245 963000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 3565)) nil (26361 10271 840241 693000) 0 nil])
([nil nil ((#("   
" 0 3 (fontified t) 3 4 (fontified t rear-nonsticky t)) . 3611) (undo-tree-id6293 . -3) (undo-tree-id6294 . -2) 3613 (t 26361 10271 883764 667000)) nil (26361 10282 265560 684000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 3611) (undo-tree-id6290 . -4) (undo-tree-id6291 . 5) (undo-tree-id6292 . -2) 3613) nil (26361 10282 265557 914000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3832) (undo-tree-id6289 . -4) 3836 (3832 . 3836) (3831 . 3835)) nil (26361 10282 265553 98000) 0 nil])
([nil nil ((3836 . 3837)) nil (26361 10282 265543 825000) 0 nil])
([nil nil ((3832 . 3836) (t 26361 10282 309749 348000)) nil (26361 10315 366142 937000) 0 nil])
([nil nil ((3862 . 3863) (3858 . 3862) (3857 . 3858) (3856 . 3857) (3853 . 3856) (#("ms" 0 2 (fontified nil)) . 3853) (3853 . 3855) (#("msg" 0 3 (fontified nil)) . -3853) (undo-tree-id6295 . -3) (3853 . 3856) (#("ms" 0 1 (fontified t) 1 2 (fontified t)) . -3853) (undo-tree-id6296 . -2) (undo-tree-id6297 . -2) 3855 (3853 . 3855) (3850 . 3853) (3844 . 3850) (#("on_off" 0 6 (fontified nil)) . -3844) (undo-tree-id6298 . -6) (3844 . 3850) (#("on" 0 1 (fontified t) 1 2 (fontified t)) . -3844) (undo-tree-id6299 . -2) (undo-tree-id6300 . -2) 3846 (3844 . 3846) (#("m" 0 1 (fontified t)) . -3844) (undo-tree-id6301 . -1) (undo-tree-id6302 . -1) (#("e" 0 1 (fontified t)) . -3845) (undo-tree-id6303 . -1) (undo-tree-id6304 . -1) 3846 (3844 . 3846) (#("g" 0 1 (fontified t)) . -3844) (undo-tree-id6305 . -1) (undo-tree-id6306 . -1) (#("e" 0 1 (fontified t)) . -3845) (undo-tree-id6307 . -1) (undo-tree-id6308 . -1) 3846 (3844 . 3846) (#("g" 0 1 (fontified t)) . -3844) (undo-tree-id6309 . -1) (undo-tree-id6310 . -1) (#("e" 0 1 (fontified t)) . -3845) (undo-tree-id6311 . -1) (undo-tree-id6312 . -1) 3846 (3844 . 3846) (#("g" 0 1 (fontified t)) . -3844) (undo-tree-id6313 . -1) (undo-tree-id6314 . -1) 3845 (3844 . 3845) (#("e" 0 1 (fontified t)) . -3844) (undo-tree-id6315 . -1) (undo-tree-id6316 . -1) 3845 (3843 . 3845) (3836 . 3843) (#("g" 0 1 (fontified nil)) . 3836) (3836 . 3837) (#("glosend" 0 7 (fontified nil)) . -3836) (undo-tree-id6317 . -7) (3836 . 3843) (#("g" 0 1 (fontified t)) . -3836) (undo-tree-id6318 . -1) (undo-tree-id6319 . -1) 3837 (3836 . 3837) (#("m" 0 1 (fontified t)) . -3836) (undo-tree-id6320 . -1) (#("s" 0 1 (fontified t)) . -3837) (undo-tree-id6321 . -1) (#("g" 0 1 (fontified t)) . -3838) (undo-tree-id6322 . -1) (#("." 0 1 (fontified t)) . -3839) (undo-tree-id6323 . -1) 3840 (3839 . 3840) (3836 . 3839) (#("ms" 0 2 (fontified nil)) . 3836) (3836 . 3838) (#("msg" 0 3 (fontified nil)) . -3836) (undo-tree-id6324 . -3) (3836 . 3839) (#("ms" 0 1 (fontified t) 1 2 (fontified t)) . -3836) (undo-tree-id6325 . -2) (undo-tree-id6326 . -2) 3838 (3836 . 3838) (#("v" 0 1 (fontified t)) . -3836) (undo-tree-id6327 . -1) (undo-tree-id6328 . -1) (#("o" 0 1 (fontified t)) . -3837) (undo-tree-id6329 . -1) (undo-tree-id6330 . -1) 3838 (3836 . 3838) (#("b" 0 1 (fontified t)) . -3836) (undo-tree-id6331 . -1) (undo-tree-id6332 . -1) 3837 (3836 . 3837) (3832 . 3836) (#("   " 0 3 (fontified nil)) . -3832) (undo-tree-id6333 . -3) (#(" " 0 1 (fontified t)) . 3835)) nil (26361 10315 366135 349000) 0 nil])
([nil nil ((3874 . 3876) (3868 . 3874) (#("ed" 0 2 (fontified nil)) . 3868) (3868 . 3870) (#("edited" 0 6 (fontified nil)) . -3868) (undo-tree-id6372 . -6) (3868 . 3874) (#("edite" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -3868) (undo-tree-id6373 . -5) (undo-tree-id6374 . -5) 3873 (3868 . 3873) (3863 . 3868) (t 26361 10315 374707 556000)) nil (26361 10321 658493 285000) 0 nil])
([nil nil ((3876 . 3877)) nil (26361 10321 658491 207000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3864) (undo-tree-id6334 . -4) (undo-tree-id6335 . -4) (undo-tree-id6336 . -4) (undo-tree-id6337 . -4) (undo-tree-id6338 . -4) (undo-tree-id6339 . -4) (undo-tree-id6340 . -4) (undo-tree-id6341 . -4) (undo-tree-id6342 . -4) (undo-tree-id6343 . -4) (undo-tree-id6344 . -4) (undo-tree-id6345 . -4) (undo-tree-id6346 . -4) (undo-tree-id6347 . -4) (undo-tree-id6348 . -4) (undo-tree-id6349 . -4) (undo-tree-id6350 . -4) (undo-tree-id6351 . -4) (undo-tree-id6352 . -4) (undo-tree-id6353 . -4) (undo-tree-id6354 . -4) (undo-tree-id6355 . -4) (undo-tree-id6356 . -4) (undo-tree-id6357 . -4) (undo-tree-id6358 . -4) (undo-tree-id6359 . -4) (undo-tree-id6360 . -4) (undo-tree-id6361 . -4) (undo-tree-id6362 . -4) (undo-tree-id6363 . -4) (undo-tree-id6364 . -4) (undo-tree-id6365 . -4) (undo-tree-id6366 . -4) (undo-tree-id6367 . -4) (undo-tree-id6368 . -4) (undo-tree-id6369 . -4) (undo-tree-id6370 . -4) (undo-tree-id6371 . -4) 3868 (3863 . 3868)) nil (26361 10321 658487 592000) 0 nil])
([nil nil ((#("::" 0 2 (fontified t)) . 3813) (undo-tree-id6376 . -1) (t 26361 10321 702700 700000)) nil (26361 10330 515865 72000) 0 nil])
([nil nil ((#("UniquePtr " 0 9 (face font-lock-type-face fontified t) 9 10 (fontified t)) . 3813) (undo-tree-id6375 . -9)) nil (26361 10330 515863 199000) 0 nil])
([nil nil ((3813 . 3814)) nil (26361 10330 515854 111000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . 3845) (t 26361 10330 534691 725000)) nil (26361 10336 361037 185000) 0 nil])
([nil nil ((#(">" 0 1 (fontified t)) . 3845)) nil (26361 10336 361036 21000) 0 nil])
([nil nil ((3845 . 3846)) nil (26361 10336 361032 59000) 0 nil])
([nil nil ((3815 . 3824) (3813 . 3815) (t 26361 10336 406686 138000)) nil (26361 10346 413554 17000) 0 nil])
([nil nil ((3857 . 3858) (3856 . 3857) (#("." 0 1 (fontified t)) . -3856) (undo-tree-id6377 . -1) 3857 (t 26361 10346 432677 282000)) nil (26361 10370 350444 713000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1616) (undo-tree-id6452 . -4) 1620 (1616 . 1620) (#("    " 0 4 (fontified nil)) . 1615) (undo-tree-id6453 . -4) (1614 . 1620) (t 26361 10370 396659 541000)) nil (26361 10415 888227 13000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1784 . 1785) (nil fontified nil 1688 . 1785) (nil fontified nil 1687 . 1688) (nil category c->-as-paren-syntax 1687 . 1688) (nil fontified nil 1662 . 1687) (nil fontified nil 1661 . 1662) (nil category c-<-as-paren-syntax 1661 . 1662) (nil fontified nil 1616 . 1661) (1616 . 1785)) nil (26361 10415 888225 686000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1953 . 1954) (nil fontified nil 1857 . 1954) (nil fontified nil 1856 . 1857) (nil category c->-as-paren-syntax 1856 . 1857) (nil fontified nil 1831 . 1856) (nil fontified nil 1830 . 1831) (nil category c-<-as-paren-syntax 1830 . 1831) (nil fontified nil 1785 . 1830) (1785 . 1954)) nil (26361 10415 888225 35000) 0 nil])
([nil nil ((1702 . 1703) (#("1" 0 1 (face font-lock-string-face fontified t)) . -1702) (undo-tree-id6450 . 1) (undo-tree-id6451 . -1) 1703) nil (26361 10415 888224 192000) 0 nil])
([nil nil ((1871 . 1872) (#("1" 0 1 (face font-lock-string-face fontified t)) . -1871) (undo-tree-id6449 . -1) 1872) nil (26361 10415 888222 642000) 0 nil])
([nil nil ((#("Twist" 0 5 (face font-lock-type-face fontified t)) . 1682) (undo-tree-id6448 . -4)) nil (26361 10415 888221 661000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -1689) (undo-tree-id6381 . -1) (undo-tree-id6382 . -1) (undo-tree-id6383 . -1) (undo-tree-id6384 . -1) (undo-tree-id6385 . -1) (undo-tree-id6386 . -1) (undo-tree-id6387 . -1) (undo-tree-id6388 . -1) (undo-tree-id6389 . -1) (undo-tree-id6390 . -1) (undo-tree-id6391 . -1) (undo-tree-id6392 . -1) (undo-tree-id6393 . -1) (undo-tree-id6394 . -1) (undo-tree-id6395 . -1) (undo-tree-id6396 . -1) (undo-tree-id6397 . -1) (undo-tree-id6398 . -1) (undo-tree-id6399 . -1) (undo-tree-id6400 . -1) (undo-tree-id6401 . -1) (undo-tree-id6402 . -1) (undo-tree-id6403 . -1) (undo-tree-id6404 . -1) (undo-tree-id6405 . -1) (undo-tree-id6406 . -1) (undo-tree-id6407 . -1) (undo-tree-id6408 . -1) (undo-tree-id6409 . -1) (undo-tree-id6410 . -1) (undo-tree-id6411 . -1) (undo-tree-id6412 . -1) (undo-tree-id6413 . -1) (undo-tree-id6414 . -1) (undo-tree-id6415 . -1) (undo-tree-id6416 . -1) (undo-tree-id6417 . -1) (undo-tree-id6418 . -1) (undo-tree-id6419 . -1) (undo-tree-id6420 . -1) (undo-tree-id6421 . -1) (undo-tree-id6422 . -1) (undo-tree-id6423 . -1) (undo-tree-id6424 . -1) (undo-tree-id6425 . -1) (undo-tree-id6426 . -1) (undo-tree-id6427 . -1) (undo-tree-id6428 . -1) (undo-tree-id6429 . -1) (undo-tree-id6430 . -1) (undo-tree-id6431 . -1) (undo-tree-id6432 . -1) (undo-tree-id6433 . -1) (undo-tree-id6434 . -1) (undo-tree-id6435 . -1) (undo-tree-id6436 . -1) (undo-tree-id6437 . -1) (undo-tree-id6438 . -1) (#("<" 0 1 (face (rainbow-delimiters-depth-5-face) c-<>-c-types-set t category c-<-as-paren-syntax fontified t)) . -1690) (undo-tree-id6439 . -1) (undo-tree-id6440 . -1) (undo-tree-id6441 . -1) (undo-tree-id6442 . -1) (undo-tree-id6443 . -1) 1691 (#("class ContainerAllocator" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 24 (face font-lock-type-face fontified t)) . 1691) (undo-tree-id6444 . -24) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1689 1689 nil nil nil t nil)) nil 24 nil #s(yas--field 1 1689 1689 nil nil nil t nil) nil nil)) (1682 . 1716) (#("Vector3_<${1:class ContainerAllocator}>" 0 39 (fontified nil)) . 1682) (1682 . 1721) (#("Ve" 0 2 (fontified nil)) . 1682) (1682 . 1684) (#("Vector3_<class ContainerAllocator>" 0 8 (fontified nil) 8 9 (fontified nil c-<>-c-types-set t category c-<-as-paren-syntax) 9 33 (fontified nil) 33 34 (fontified nil category c->-as-paren-syntax)) . -1682) (undo-tree-id6445 . -34) (1682 . 1716) (#("Ve" 0 1 (fontified t) 1 2 (fontified t)) . -1682) (undo-tree-id6446 . -2) (undo-tree-id6447 . -2) 1684 (1682 . 1684)) nil (26361 10415 888218 969000) 0 nil])
([nil nil ((apply yas--snippet-revive 1682 1690 #s(yas--snippet nil (#s(yas--field 1 1689 1689 nil nil nil t nil)) nil 24 nil #s(yas--field 1 1689 1689 nil nil nil t nil) nil nil))) nil (26361 10415 888073 216000) 0 nil])
([nil nil ((#(">" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . 1689) (undo-tree-id6378 . 1) (undo-tree-id6379 . -1) (undo-tree-id6380 . -1)) nil (26361 10415 888070 626000) 0 nil])
([nil nil ((1632 . 1633) (#("1" 0 1 (fontified t)) . -1632) (undo-tree-id6455 . -1) 1633 (t 26361 10415 934638 445000)) nil (26361 10424 764625 290000) 0 nil])
([nil nil ((1803 . 1804) (#("1" 0 1 (fontified t)) . -1803) (undo-tree-id6454 . -1) 1804) nil (26361 10424 764621 247000) 0 nil])
([nil nil ((1749 . 1750) (#("1" 0 1 (fontified t)) . -1749) (undo-tree-id6488 . -1) (undo-tree-id6489 . -1) (undo-tree-id6490 . -1) (undo-tree-id6491 . -1) (undo-tree-id6492 . -1) (undo-tree-id6493 . -1) (undo-tree-id6494 . -1) (undo-tree-id6495 . -1) (undo-tree-id6496 . -1) (undo-tree-id6497 . -1) (undo-tree-id6498 . -1) (undo-tree-id6499 . -1) (undo-tree-id6500 . -1) (undo-tree-id6501 . -1) (undo-tree-id6502 . -1) (undo-tree-id6503 . -1) (undo-tree-id6504 . -1) (undo-tree-id6505 . -1) (undo-tree-id6506 . -1) (undo-tree-id6507 . -1) (undo-tree-id6508 . -1) (undo-tree-id6509 . -1) (undo-tree-id6510 . -1) (undo-tree-id6511 . -1) (undo-tree-id6512 . -1) 1750 (t 26361 10424 782636 171000)) nil (26361 10433 589531 51000) 0 nil])
([nil nil ((1918 . 1919) (#("1" 0 1 (fontified t)) . -1918) (undo-tree-id6456 . -1) (undo-tree-id6457 . -1) (undo-tree-id6458 . -1) (undo-tree-id6459 . -1) (undo-tree-id6460 . -1) (undo-tree-id6461 . -1) (undo-tree-id6462 . -1) (undo-tree-id6463 . -1) (undo-tree-id6464 . -1) (undo-tree-id6465 . -1) (undo-tree-id6466 . -1) (undo-tree-id6467 . -1) (undo-tree-id6468 . -1) (undo-tree-id6469 . -1) (undo-tree-id6470 . -1) (undo-tree-id6471 . -1) (undo-tree-id6472 . -1) (undo-tree-id6473 . -1) (undo-tree-id6474 . -1) (undo-tree-id6475 . -1) (undo-tree-id6476 . -1) (undo-tree-id6477 . -1) (undo-tree-id6478 . -1) (undo-tree-id6479 . -1) (undo-tree-id6480 . -1) (undo-tree-id6481 . -1) (undo-tree-id6482 . -1) (undo-tree-id6483 . -1) (undo-tree-id6484 . -1) (undo-tree-id6485 . -1) (undo-tree-id6486 . -1) (undo-tree-id6487 . -1) 1919) nil (26361 10433 589499 279000) 0 nil])
([nil nil ((3969 . 3970) (#("2" 0 1 (face font-lock-function-name-face fontified t)) . -3969) (undo-tree-id6513 . -1) (undo-tree-id6514 . -1) (undo-tree-id6515 . -1) (undo-tree-id6516 . -1) (undo-tree-id6517 . -1) (undo-tree-id6518 . -1) (undo-tree-id6519 . -1) (undo-tree-id6520 . -1) (undo-tree-id6521 . -1) (undo-tree-id6522 . -1) (undo-tree-id6523 . -1) (undo-tree-id6524 . -1) (undo-tree-id6525 . -1) (undo-tree-id6526 . -1) (undo-tree-id6527 . -1) (undo-tree-id6528 . -1) (undo-tree-id6529 . -1) (undo-tree-id6530 . -1) (undo-tree-id6531 . -1) (undo-tree-id6532 . -1) (undo-tree-id6533 . -1) (undo-tree-id6534 . -1) (undo-tree-id6535 . -1) (undo-tree-id6536 . -1) (undo-tree-id6537 . -1) 3970 (t 26361 10433 607634 468000)) nil (26361 10452 303478 801000) 0 nil])
([nil nil ((1956 . 1960) (t 26361 10452 347632 686000)) nil (26361 10562 917423 418000) 0 nil])
([nil nil ((1960 . 1964) (1956 . 1960) (#("   " 0 3 (fontified nil)) . -1956) (undo-tree-id6666 . -3) (#(" " 0 1 (fontified t)) . 1959)) nil (26361 10562 917422 924000) 0 nil])
([nil nil ((#("    bool
" 0 4 (fontified t) 4 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face fontified t) 6 7 (face font-lock-type-face fontified t) 7 8 (face font-lock-type-face c-type c-decl-id-start fontified t) 8 9 (fontified t)) . 1956) (undo-tree-id6660 . -8) (undo-tree-id6661 . 1) (undo-tree-id6662 . -9) (undo-tree-id6663 . -9) (undo-tree-id6664 . -7) (undo-tree-id6665 . -7) 1963) nil (26361 10562 917421 971000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1957) (undo-tree-id6658 . -4) 1961 (1957 . 1961) (#("    " 0 4 (fontified nil)) . 1956) (undo-tree-id6659 . -4) (1955 . 1961)) nil (26361 10562 917419 459000) 0 nil])
([nil nil ((2112 . 2114) (#("_1" 0 2 (fontified nil)) . -2112) (undo-tree-id6598 . -2) (2112 . 2114) (2110 . 2112) (2098 . 2110) (#("p" 0 1 (fontified nil)) . 2098) (2098 . 2099) (#("placeholders" 0 12 (fontified nil)) . -2098) (undo-tree-id6599 . -12) (2098 . 2110) (#("pla" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -2098) (undo-tree-id6600 . -3) (undo-tree-id6601 . -3) 2101 (2098 . 2101) (#("l" 0 1 (fontified t)) . -2098) (undo-tree-id6602 . -1) (undo-tree-id6603 . -1) 2099 (2098 . 2099) (#("o" 0 1 (fontified t)) . -2098) (undo-tree-id6604 . -1) (undo-tree-id6605 . -1) 2099 (2098 . 2099) (#("P" 0 1 (fontified t)) . -2098) (undo-tree-id6606 . -1) (undo-tree-id6607 . -1) (#("l" 0 1 (fontified t)) . -2099) (undo-tree-id6608 . -1) (undo-tree-id6609 . -1) 2100 (2098 . 2100) (2096 . 2098) (2093 . 2096) (#("st" 0 2 (fontified nil)) . 2093) (2093 . 2095) (#("std" 0 3 (fontified nil)) . -2093) (undo-tree-id6610 . -3) (2093 . 2096) (#("st" 0 1 (fontified t) 1 2 (fontified t)) . -2093) (undo-tree-id6611 . -2) (undo-tree-id6612 . -2) 2095 (2092 . 2095) (2091 . 2092) (2086 . 2091) (2085 . 2086) (#("(" 0 1 (face (rainbow-delimiters-depth-6-face) fontified nil)) . -2085) (undo-tree-id6613 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-6-face) fontified t)) . 2086) (#("const int msg" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 9 (face font-lock-type-face fontified t) 9 10 (fontified t) 10 13 (face font-lock-variable-name-face fontified t)) . 2086) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2085 2114 nil nil nil t nil)) nil 27 nil #s(yas--field 1 2085 2114 nil nil nil t nil) #s(yas--field 5 2042 2115 nil nil nil t nil) nil)) (2075 . 2100) (#("boolsubfun(${1:const int msg})" 0 30 (fontified nil)) . 2075) (2075 . 2105) (#("b" 0 1 (fontified nil)) . 2075) (2075 . 2076) (#("boolsubfun(const int msg)" 0 25 (fontified nil)) . -2075) (undo-tree-id6614 . -25) (2075 . 2100) (#("boo" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -2075) (undo-tree-id6615 . -3) (undo-tree-id6616 . -3) 2078 (2075 . 2078) (2073 . 2075) (2068 . 2073) (#("S" 0 1 (fontified nil)) . 2068) (2068 . 2069) (#("Sayer" 0 5 (fontified nil)) . -2068) (undo-tree-id6617 . -5) (2068 . 2073) (#("S" 0 1 (fontified t)) . -2068) (undo-tree-id6618 . -1) (undo-tree-id6619 . -1) 2069 (2067 . 2069) (apply yas--snippet-revive 2062 2068 #s(yas--snippet nil nil #s(yas--exit 2067 nil) 26 nil nil #s(yas--field 5 2042 2115 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2067 nil) 26 nil nil #s(yas--field 5 2042 2115 nil nil nil t nil) nil)) (2062 . 2068) (#("bind($0)" 0 8 (fontified nil)) . 2062) (2062 . 2070) (#("b" 0 1 (fontified nil)) . 2062) (2062 . 2063) (#("bind(…)" 0 7 (fontified nil)) . -2062) (undo-tree-id6620 . -7) (2062 . 2069) (#("bi" 0 1 (fontified t) 1 2 (fontified t)) . -2062) (undo-tree-id6621 . -2) (undo-tree-id6622 . -2) 2064 (2062 . 2064) (#("v" 0 1 (fontified t)) . -2062) (undo-tree-id6623 . -1) (undo-tree-id6624 . -1) 2063 (2062 . 2063) (#("c" 0 1 (fontified t)) . -2062) (undo-tree-id6625 . -1) (undo-tree-id6626 . -1) 2063 (2062 . 2063) (2061 . 2062) (2060 . 2061) (2059 . 2060) (2057 . 2059) (2043 . 2057) (#(" " 0 1 (fontified nil)) . 2042) (undo-tree-id6627 . -1) (2043 . 2044) (#("CallbackT &&callback" 0 9 (face font-lock-type-face fontified t) 9 12 (fontified t) 12 20 (face font-lock-variable-name-face fontified t)) . 2043) (2031 . 2041) (#("cu" 0 2 (fontified nil)) . 2031) (2031 . 2033) (#("currentqol" 0 10 (fontified nil)) . -2031) (undo-tree-id6628 . -10) (2031 . 2041) (#("cu" 0 1 (fontified t) 1 2 (fontified t)) . -2031) (undo-tree-id6629 . -2) (undo-tree-id6630 . -2) 2033 (2032 . 2033) (#("const rclcpp::QoS &qos" 0 5 (face font-lock-keyword-face fontified nil) 5 6 (fontified nil) 6 12 (face font-lock-constant-face fontified nil) 12 14 (fontified nil) 14 17 (face font-lock-type-face fontified nil) 17 19 (fontified nil) 19 22 (face font-lock-variable-name-face fontified nil)) . 2032) (2031 . 2032) (2022 . 2028) (2021 . 2022) (2020 . 2022) (#("\"" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -2020) (2020 . 2021) (#("const std::string &topic_name" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 9 (face font-lock-constant-face fontified t) 9 11 (fontified t) 11 16 (face font-lock-type-face fontified t) 16 17 (face font-lock-type-face c-type c-decl-id-start fontified t) 17 19 (fontified t) 19 29 (face font-lock-variable-name-face fontified t)) . 2020) (#("typename CallbackT" 0 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 18 (face font-lock-type-face fontified t)) . 2018) (2012 . 2016) (#("Bool" 0 4 (fontified nil)) . -2012) (undo-tree-id6631 . -4) (2012 . 2016) (#("B" 0 1 (fontified t)) . -2012) (undo-tree-id6632 . -1) (undo-tree-id6633 . -1) 2013 (2012 . 2013) (2010 . 2012) (2007 . 2010) (#("msg" 0 3 (fontified nil)) . -2007) (undo-tree-id6634 . -3) (2007 . 2010) (#("ms" 0 1 (fontified t) 1 2 (fontified t)) . -2007) (undo-tree-id6635 . -2) (undo-tree-id6636 . -2) 2009 (2008 . 2009) (2007 . 2008) (2005 . 2007) (nil c-<>-c-types-set t 1997 . 2005) (nil face (rainbow-delimiters-depth-4-face) 1997 . 2005) (nil fontified nil 1997 . 2005) (1997 . 2005) (#("std_" 0 4 (fontified nil)) . 1997) (nil c-<>-c-types-set t 1997 . 2001) (nil face (rainbow-delimiters-depth-4-face) 1997 . 2001) (nil fontified nil 1997 . 2001) (1997 . 2001) (#("std_msgs" 0 8 (fontified nil)) . -1997) (undo-tree-id6637 . -8) (nil c-<>-c-types-set t 1997 . 2005) (nil face (rainbow-delimiters-depth-4-face) 1997 . 2005) (nil fontified nil 1997 . 2005) (1997 . 2005) (#("std_ms" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -1997) (undo-tree-id6638 . -6) (undo-tree-id6639 . -6) 2003 (2002 . 2003) (2000 . 2002) (#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -2000) (undo-tree-id6640 . -1) (#("_" 0 1 (fontified t)) . -2001) (undo-tree-id6641 . -1) (#("m" 0 1 (fontified t)) . -2002) (undo-tree-id6642 . -1) 2003 (2001 . 2003) (2000 . 2001) (#(")" 0 1 (fontified nil)) . -2000) (2000 . 2001) (#(":" 0 1 (fontified t)) . -2000) (undo-tree-id6643 . -1) (undo-tree-id6644 . -1) 2001 (#(":" 0 1 (fontified t)) . -2001) (undo-tree-id6645 . -1) (undo-tree-id6646 . -1) (#("m" 0 1 (fontified t)) . -2002) (undo-tree-id6647 . -1) (undo-tree-id6648 . -1) (#("s" 0 1 (fontified t)) . -2003) (undo-tree-id6649 . -1) (undo-tree-id6650 . -1) 2004 (2002 . 2004) (2001 . 2002) (2000 . 2001) (1999 . 2000) (1998 . 1999) (#("typename MessageT" 0 8 (face font-lock-keyword-face fontified nil) 8 9 (fontified nil) 9 17 (face font-lock-type-face fontified nil)) . 1998) (1997 . 1998) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1997 2016 nil nil nil t #s(yas--field 2 2018 2018 nil nil nil t #s(yas--field 3 2020 2029 nil nil nil t #s(yas--field 4 2031 2041 nil nil nil t #s(yas--field 5 2042 2115 nil nil nil t nil))))) #s(yas--field 2 2018 2018 nil nil nil t #s(yas--field 3 2020 2029 nil nil nil t #s(yas--field 4 2031 2041 nil nil nil t #s(yas--field 5 2042 2115 nil nil nil t nil)))) #s(yas--field 3 2020 2029 nil nil nil t #s(yas--field 4 2031 2041 nil nil nil t #s(yas--field 5 2042 2115 nil nil nil t nil))) #s(yas--field 4 2031 2041 nil nil nil t #s(yas--field 5 2042 2115 nil nil nil t nil)) #s(yas--field 5 2042 2115 nil nil nil t nil)) nil 25 nil #s(yas--field 5 2042 2115 nil nil nil t nil) nil nil)) (1977 . 2112) (#("create_subscription<${1:typename MessageT}, ${2:typename CallbackT}>(${3:const std::string &topic_name}, ${4:const rclcpp::QoS &qos}, ${5:CallbackT &&callback})" 0 160 (fontified nil)) . 1977) (1977 . 2137) (#("create_subscription<typename MessageT, typename CallbackT, typename AllocatorT, typename SubscriptionT>(const std::string &topic_name, const rclcpp::QoS &qos, CallbackT &&callback, const SubscriptionOptionsWithAllocator<AllocatorT> &options = SubscriptionOptionsWithAllocator<AllocatorT>(), typename MessageMemoryStrategyT::SharedPtr msg_mem_strat = (
      MessageMemoryStrategyT::create_default()
    ))" 0 19 (fontified nil) 19 20 (fontified nil c-<>-c-types-set t category c-<-as-paren-syntax) 20 37 (fontified nil) 37 38 (fontified nil c-type c-<>-arg-sep) 38 57 (fontified nil) 57 58 (fontified nil c-type c-<>-arg-sep) 58 78 (fontified nil) 78 79 (fontified nil c-type c-<>-arg-sep) 79 102 (fontified nil) 102 103 (fontified nil category c->-as-paren-syntax) 103 219 (fontified nil) 219 220 (fontified nil c-<>-c-types-set t category c-<-as-paren-syntax) 220 230 (fontified nil) 230 231 (fontified nil category c->-as-paren-syntax) 231 275 (fontified nil) 275 276 (fontified nil c-<>-c-types-set t category c-<-as-paren-syntax) 276 286 (fontified nil) 286 287 (fontified nil category c->-as-paren-syntax) 287 405 (fontified nil)) . -1977) (undo-tree-id6651 . -405) (1977 . 2382) (#("create_su" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t)) . -1977) (undo-tree-id6652 . -9) (undo-tree-id6653 . -9) 1986 (1978 . 1986) (1977 . 1978) (1976 . 1977) (1968 . 1976) (1961 . 1968) (#("boo" 0 3 (fontified nil)) . 1961) (1961 . 1964) (#("boolsub" 0 7 (fontified nil)) . -1961) (undo-tree-id6654 . -7) (1961 . 1968) (#("boo" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -1961) (undo-tree-id6655 . -3) (undo-tree-id6656 . -3) 1964 (1963 . 1964) (1961 . 1963) (1957 . 1961) (#("    " 0 4 (fontified nil)) . 1956) (undo-tree-id6657 . -4) (1960 . 1961) (1956 . 1960)) nil (26361 10562 917399 920000) 0 nil])
([nil nil ((2116 . 2117) (apply yas--snippet-revive 1977 2116 #s(yas--snippet nil (#s(yas--field 1 1997 2016 nil nil nil t #s(yas--field 2 2018 2018 nil nil nil t #s(yas--field 3 2020 2029 nil nil nil t #s(yas--field 4 2031 2041 nil nil nil t #s(yas--field 5 2042 2115 nil nil nil t nil))))) #s(yas--field 2 2018 2018 nil nil nil t #s(yas--field 3 2020 2029 nil nil nil t #s(yas--field 4 2031 2041 nil nil nil t #s(yas--field 5 2042 2115 nil nil nil t nil)))) #s(yas--field 3 2020 2029 nil nil nil t #s(yas--field 4 2031 2041 nil nil nil t #s(yas--field 5 2042 2115 nil nil nil t nil))) #s(yas--field 4 2031 2041 nil nil nil t #s(yas--field 5 2042 2115 nil nil nil t nil)) #s(yas--field 5 2042 2115 nil nil nil t nil)) nil 25 nil #s(yas--field 5 2042 2115 nil nil nil t nil) nil nil)) (apply yas--snippet-revive 2075 2114 #s(yas--snippet nil (#s(yas--field 1 2085 2114 nil nil nil t nil)) nil 27 nil #s(yas--field 1 2085 2114 nil nil nil t nil) #s(yas--field 5 2042 2115 nil nil nil t nil) nil))) nil (26361 10562 917368 403000) 0 nil])
([nil nil ((#("," 0 1 (c-type c-<>-arg-sep fontified t)) . 2016) (undo-tree-id6575 . -1) (undo-tree-id6576 . -1) (undo-tree-id6577 . -1) (undo-tree-id6578 . -1) (undo-tree-id6579 . -1) (undo-tree-id6580 . -1) (undo-tree-id6581 . -1) (undo-tree-id6582 . -1) (undo-tree-id6583 . -1) (undo-tree-id6584 . -1) (undo-tree-id6585 . -1) (undo-tree-id6586 . -1) (undo-tree-id6587 . -1) (undo-tree-id6588 . -1) (undo-tree-id6589 . -1) (undo-tree-id6590 . -1) (undo-tree-id6591 . -1) (undo-tree-id6592 . -1) (undo-tree-id6593 . -1) (undo-tree-id6594 . -1) (undo-tree-id6595 . -1) (undo-tree-id6596 . -1) (undo-tree-id6597 . -1)) nil (26361 10562 917367 320000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2016) (undo-tree-id6538 . -1) (undo-tree-id6539 . -1) (undo-tree-id6540 . -1) (undo-tree-id6541 . -1) (undo-tree-id6542 . -1) (undo-tree-id6543 . -1) (undo-tree-id6544 . -1) (undo-tree-id6545 . -1) (undo-tree-id6546 . -1) (undo-tree-id6547 . -1) (undo-tree-id6548 . -1) (undo-tree-id6549 . -1) (undo-tree-id6550 . -1) (undo-tree-id6551 . -1) (undo-tree-id6552 . -1) (undo-tree-id6553 . -1) (undo-tree-id6554 . -1) (undo-tree-id6555 . -1) (undo-tree-id6556 . -1) (undo-tree-id6557 . -1) (undo-tree-id6558 . -1) (undo-tree-id6559 . -1) (undo-tree-id6560 . -1) (undo-tree-id6561 . -1) (undo-tree-id6562 . -1) (undo-tree-id6563 . -1) (undo-tree-id6564 . -1) (undo-tree-id6565 . -1) (undo-tree-id6566 . -1) (undo-tree-id6567 . -1) (undo-tree-id6568 . -1) (undo-tree-id6569 . -1) (undo-tree-id6570 . -1) (undo-tree-id6571 . -1) (undo-tree-id6572 . -1) (undo-tree-id6573 . -1) (undo-tree-id6574 . -1)) nil (26361 10562 917351 891000) 0 nil])
([nil nil ((2041 . 2053) (#("							       " 0 14 (fontified t)) . 2041) (undo-tree-id6667 . -10) 2051 (t 26361 10562 961668 649000)) nil (26361 10575 433027 686000) 0 nil])
([nil nil ((2018 . 2031)) nil (26361 10575 433020 241000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1956) 1955 (2019 . 2022) (#("							" 0 7 (fontified nil)) . 2019) 2018 (2054 . 2057) (#("							" 0 7 (fontified nil)) . 2054) 2053 (#("
" 0 1 (fontified t)) . 2128) 2126 (#("
" 0 1 (rear-nonsticky t)) . 3965) 3963 ("
" . 4129) 4127) nil (26361 10575 433013 561000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2260) (undo-tree-id6832 . -4) 2264 (2260 . 2264) (#("    " 0 4 (fontified nil)) . 2259) (undo-tree-id6833 . -4) (2258 . 2264) (t 26361 10575 477677 283000)) nil (26361 10608 29077 220000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2401 . 2402) (nil fontified nil 2260 . 2402) (2260 . 2402)) nil (26361 10608 29075 875000) 0 nil])
([nil nil ((#("timer " 0 6 (fontified t)) . 2264) (undo-tree-id6831 . -5)) nil (26361 10608 29075 425000) 0 nil])
([nil nil ((2264 . 2265) (#("t" 0 1 (fontified t)) . -2264) (undo-tree-id6827 . -1) (undo-tree-id6828 . -1) (#("i" 0 1 (fontified t)) . -2265) (undo-tree-id6829 . -1) (undo-tree-id6830 . -1) 2266 (2264 . 2266)) nil (26361 10608 29073 741000) 0 nil])
([nil nil ((2264 . 2273) (#("s" 0 1 (fontified nil)) . 2264) (2264 . 2265) (#("sendtimer" 0 9 (fontified nil)) . -2264) (undo-tree-id6824 . -9) (2264 . 2273) (#("s" 0 1 (fontified t)) . -2264) (undo-tree-id6825 . -1) (undo-tree-id6826 . -1) 2265 (2264 . 2265)) nil (26361 10608 29070 429000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 2328) (undo-tree-id6822 . -1) (undo-tree-id6823 . -1)) nil (26361 10608 29067 713000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 2183) (undo-tree-id6799 . -1) (undo-tree-id6800 . -1) (undo-tree-id6801 . -1) (undo-tree-id6802 . -1) (undo-tree-id6803 . -1) (undo-tree-id6804 . -1) (undo-tree-id6805 . -1) (undo-tree-id6806 . -1) (undo-tree-id6807 . -1) (undo-tree-id6808 . -1) (undo-tree-id6809 . -1) (undo-tree-id6810 . -1) (undo-tree-id6811 . -1) (undo-tree-id6812 . -1) (undo-tree-id6813 . -1) (undo-tree-id6814 . -1) (undo-tree-id6815 . -1) (undo-tree-id6816 . -1) (undo-tree-id6817 . -1) (undo-tree-id6818 . -1) (undo-tree-id6819 . -1) (undo-tree-id6820 . -1) (undo-tree-id6821 . -1)) nil (26361 10608 28849 638000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 2182) (undo-tree-id6668 . -1) (undo-tree-id6669 . -1) (undo-tree-id6670 . -1) (undo-tree-id6671 . -1) (undo-tree-id6672 . -1) (undo-tree-id6673 . -1) (undo-tree-id6674 . -1) (undo-tree-id6675 . -1) (undo-tree-id6676 . -1) (undo-tree-id6677 . -1) (undo-tree-id6678 . -1) (undo-tree-id6679 . -1) (undo-tree-id6680 . -1) (undo-tree-id6681 . -1) (undo-tree-id6682 . -1) (undo-tree-id6683 . -1) (undo-tree-id6684 . -1) (undo-tree-id6685 . -1) (undo-tree-id6686 . -1) (undo-tree-id6687 . -1) (undo-tree-id6688 . -1) (undo-tree-id6689 . -1) (undo-tree-id6690 . -1) (undo-tree-id6691 . -1) (undo-tree-id6692 . -1) (undo-tree-id6693 . -1) (undo-tree-id6694 . -1) (undo-tree-id6695 . -1) (undo-tree-id6696 . -1) (undo-tree-id6697 . -1) (undo-tree-id6698 . -1) (undo-tree-id6699 . -1) (undo-tree-id6700 . -1) (undo-tree-id6701 . -1) (undo-tree-id6702 . -1) (undo-tree-id6703 . -1) (undo-tree-id6704 . -1) (undo-tree-id6705 . -1) (undo-tree-id6706 . -1) (undo-tree-id6707 . -1) (undo-tree-id6708 . -1) (undo-tree-id6709 . -1) (undo-tree-id6710 . -1) (undo-tree-id6711 . -1) (undo-tree-id6712 . -1) (undo-tree-id6713 . -1) (undo-tree-id6714 . -1) (undo-tree-id6715 . -1) (undo-tree-id6716 . -1) (undo-tree-id6717 . -1) (undo-tree-id6718 . -1) (undo-tree-id6719 . -1) (undo-tree-id6720 . -1) (undo-tree-id6721 . -1) (undo-tree-id6722 . -1) (undo-tree-id6723 . -1) (undo-tree-id6724 . -1) (undo-tree-id6725 . -1) (undo-tree-id6726 . -1) (undo-tree-id6727 . -1) (undo-tree-id6728 . -1) (undo-tree-id6729 . -1) (undo-tree-id6730 . -1) (undo-tree-id6731 . -1) (undo-tree-id6732 . -1) (undo-tree-id6733 . -1) (undo-tree-id6734 . -1) (undo-tree-id6735 . -1) (undo-tree-id6736 . -1) (undo-tree-id6737 . -1) (undo-tree-id6738 . -1) (undo-tree-id6739 . -1) (undo-tree-id6740 . -1) (undo-tree-id6741 . -1) (undo-tree-id6742 . -1) (undo-tree-id6743 . -1) (undo-tree-id6744 . -1) (undo-tree-id6745 . -1) (undo-tree-id6746 . -1) (undo-tree-id6747 . -1) (undo-tree-id6748 . -1) (undo-tree-id6749 . -1) (undo-tree-id6750 . -1) (undo-tree-id6751 . -1) (undo-tree-id6752 . -1) (undo-tree-id6753 . -1) (undo-tree-id6754 . -1) (undo-tree-id6755 . -1) (undo-tree-id6756 . -1) (undo-tree-id6757 . -1) (undo-tree-id6758 . -1) (undo-tree-id6759 . -1) (undo-tree-id6760 . -1) (undo-tree-id6761 . -1) (undo-tree-id6762 . -1) (undo-tree-id6763 . -1) (undo-tree-id6764 . -1) (undo-tree-id6765 . -1) (undo-tree-id6766 . -1) (undo-tree-id6767 . -1) (undo-tree-id6768 . -1) (undo-tree-id6769 . -1) (undo-tree-id6770 . -1) (undo-tree-id6771 . -1) (undo-tree-id6772 . -1) (undo-tree-id6773 . -1) (undo-tree-id6774 . -1) (undo-tree-id6775 . -1) (undo-tree-id6776 . -1) (undo-tree-id6777 . -1) (undo-tree-id6778 . -1) (undo-tree-id6779 . -1) (undo-tree-id6780 . -1) (undo-tree-id6781 . -1) (undo-tree-id6782 . -1) (undo-tree-id6783 . -1) (undo-tree-id6784 . -1) (undo-tree-id6785 . -1) (undo-tree-id6786 . -1) (undo-tree-id6787 . -1) (undo-tree-id6788 . -1) (undo-tree-id6789 . -1) (undo-tree-id6790 . -1) (undo-tree-id6791 . -1) (undo-tree-id6792 . -1) (undo-tree-id6793 . -1) (undo-tree-id6794 . -1) (undo-tree-id6795 . -1) (undo-tree-id6796 . -1) (undo-tree-id6797 . -1) (undo-tree-id6798 . -1)) nil (26361 10608 28832 155000) 0 nil])
([nil nil ((#("get" 0 3 (fontified t)) . 2383) (undo-tree-id6834 . -2) (undo-tree-id6835 . -3) (t 26361 10608 47703 676000)) nil (26361 10614 43186 799000) 0 nil])
([nil nil ((2385 . 2387) (2383 . 2385)) nil (26361 10614 43177 15000) 0 nil])
([nil nil ((4548 . 4550) (4534 . 4548) (4532 . 4534) (#("  " 0 2 (fontified nil)) . 4531) (undo-tree-id6892 . -2) (4530 . 4534) (t 26361 10614 87709 176000)) nil (26361 10937 408450 868000) 0 nil])
([nil nil ((4553 . 4557) (4552 . 4556) (4551 . 4553) (4550 . 4551)) nil (26361 10937 408449 871000) 0 nil])
([nil nil ((#("B" 0 1 (fontified t)) . -4557) (undo-tree-id6889 . -1) (undo-tree-id6890 . -1) 4558 (4557 . 4558) (4553 . 4557) (#("   " 0 3 (fontified nil)) . -4553) (undo-tree-id6891 . -3) (#(" " 0 1 (fontified t)) . 4556)) nil (26361 10937 408449 25000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -4559) (undo-tree-id6882 . -1) (#("t" 0 1 (fontified t)) . -4560) (undo-tree-id6883 . -1) (#("t" 0 1 (fontified t)) . -4561) (undo-tree-id6884 . -1) 4562 (4559 . 4562) (#("p" 0 1 (fontified t)) . -4559) (undo-tree-id6885 . -1) 4560 (4557 . 4560) (4553 . 4557) (#("   " 0 3 (fontified nil)) . -4553) (undo-tree-id6886 . -3) (undo-tree-id6887 . -3) (#(" " 0 1 (fontified t)) . 4556) (undo-tree-id6888 . -1)) nil (26361 10937 408446 766000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -4557) (undo-tree-id6867 . -1) (undo-tree-id6868 . -1) (undo-tree-id6869 . -1) (undo-tree-id6870 . -1) (undo-tree-id6871 . -1) (undo-tree-id6872 . -1) (#("." 0 1 (fontified t)) . -4558) (undo-tree-id6873 . -1) (undo-tree-id6874 . -1) (undo-tree-id6875 . -1) (undo-tree-id6876 . -1) (undo-tree-id6877 . -1) (undo-tree-id6878 . -1) 4559 (4558 . 4559) (#("." 0 1 (fontified t)) . -4558) (undo-tree-id6879 . -1) (undo-tree-id6880 . -1) (undo-tree-id6881 . -1) 4559) nil (26361 10937 408440 720000) 0 nil])
([nil nil ((4563 . 4569) (4562 . 4568) (4561 . 4563) (4559 . 4561) (#("u" 0 1 (fontified t)) . -4559) (undo-tree-id6854 . -1) (undo-tree-id6855 . -1) 4560 (4557 . 4560) (4553 . 4557) (#("   " 0 3 (fontified nil)) . -4553) (undo-tree-id6856 . -3) (undo-tree-id6857 . -3) (undo-tree-id6858 . -3) (undo-tree-id6859 . -3) (undo-tree-id6860 . -3) (undo-tree-id6861 . -3) (#(" " 0 1 (fontified t)) . 4556) (undo-tree-id6862 . -1) (undo-tree-id6863 . -1) (undo-tree-id6864 . -1) (undo-tree-id6865 . -1) (undo-tree-id6866 . -1)) nil (26361 10937 408433 891000) 0 nil])
([nil nil ((4563 . 4569) (#("     " 0 5 (fontified nil)) . -4563) (undo-tree-id6848 . -5) (undo-tree-id6849 . -5) (undo-tree-id6850 . -5) (undo-tree-id6851 . -5) (undo-tree-id6852 . -5) (undo-tree-id6853 . -5) (#(" " 0 1 (fontified t)) . 4568)) nil (26361 10937 408427 156000) 0 nil])
([nil nil ((4569 . 4571) (4563 . 4569) (#("     " 0 5 (fontified nil)) . -4563) (undo-tree-id6842 . -5) (undo-tree-id6843 . -5) (undo-tree-id6844 . -5) (undo-tree-id6845 . -5) (undo-tree-id6846 . -5) (undo-tree-id6847 . -5) (#(" " 0 1 (fontified t)) . 4568)) nil (26361 10937 408424 38000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4600 . 4601) (nil fontified nil 4571 . 4601) (4571 . 4601) 4570) nil (26361 10937 408363 83000) 0 nil])
([nil nil ((4601 . 4603)) nil (26361 10937 408362 230000) 0 nil])
([nil nil ((4597 . 4604) (#("gl" 0 2 (fontified nil)) . 4597) (4597 . 4599) (#("glosend" 0 7 (fontified nil)) . -4597) (undo-tree-id6836 . -7) (4597 . 4604) (#("gl" 0 1 (fontified t) 1 2 (fontified t)) . -4597) (undo-tree-id6837 . -2) (undo-tree-id6838 . -2) 4599 (4598 . 4599) (#("CommunicationData &c" 0 17 (face font-lock-type-face fontified nil) 17 19 (fontified nil) 19 20 (face font-lock-variable-name-face fontified nil)) . 4598) (4597 . 4598) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4597 4604 nil nil nil t nil)) nil 31 nil #s(yas--field 1 4597 4604 nil nil nil t nil) nil nil)) (4569 . 4618) (#("make_sendable_with_metadata(${1:CommunicationData &c})" 0 54 (fontified nil)) . 4569) (4569 . 4623) (#("ma" 0 2 (fontified nil)) . 4569) (4569 . 4571) (#("make_sendable_with_metadata(CommunicationData &c)" 0 49 (fontified nil)) . -4569) (undo-tree-id6839 . -49) (4569 . 4618) (#("ma" 0 1 (fontified t) 1 2 (fontified t)) . -4569) (undo-tree-id6840 . -2) (undo-tree-id6841 . -2) 4571 (4569 . 4571) (4562 . 4569)) nil (26361 10937 408360 526000) 0 nil])
([nil nil ((4605 . 4606) (apply yas--snippet-revive 4569 4605 #s(yas--snippet nil (#s(yas--field 1 4597 4604 nil nil nil t nil)) nil 31 nil #s(yas--field 1 4597 4604 nil nil nil t nil) nil nil))) nil (26361 10937 408343 317000) 0 nil])
([nil nil ((4646 . 4653) (#("gl" 0 2 (fontified nil)) . 4646) (4646 . 4648) (#("glosend" 0 7 (fontified nil)) . -4646) (undo-tree-id6893 . -7) (4646 . 4653) (#("gl" 0 1 (fontified t) 1 2 (fontified t)) . -4646) (undo-tree-id6894 . -2) (undo-tree-id6895 . -2) (undo-tree-id6896 . -2) (undo-tree-id6897 . -2) (undo-tree-id6898 . -2) (undo-tree-id6899 . -2) (undo-tree-id6900 . -2) (undo-tree-id6901 . -2) (undo-tree-id6902 . -2) (undo-tree-id6903 . -2) (undo-tree-id6904 . -2) (undo-tree-id6905 . -2) (undo-tree-id6906 . -2) (undo-tree-id6907 . -2) (undo-tree-id6908 . -2) (undo-tree-id6909 . -2) (undo-tree-id6910 . -2) (undo-tree-id6911 . -2) (undo-tree-id6912 . -2) (undo-tree-id6913 . -2) (undo-tree-id6914 . -2) (undo-tree-id6915 . -2) (undo-tree-id6916 . -2) (undo-tree-id6917 . -2) (undo-tree-id6918 . -2) (undo-tree-id6919 . -2) (undo-tree-id6920 . -2) (undo-tree-id6921 . -2) (undo-tree-id6922 . -2) (undo-tree-id6923 . -2) (undo-tree-id6924 . -2) (undo-tree-id6925 . -2) (undo-tree-id6926 . -2) 4648 (4646 . 4648) (t 26361 10937 453223 356000)) nil (26361 10941 173199 466000) 0 nil])
([nil nil ((4654 . 4655)) nil (26361 10941 173170 603000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -4657) (undo-tree-id7111 . -6) 4663 (4657 . 4663) (#("      " 0 6 (fontified nil)) . 4656) (undo-tree-id7112 . -6) (4655 . 4663) (t 26361 10941 218231 390000)) nil (26361 10995 820807 169000) 0 nil])
([nil nil ((#("      make_sendable_with_metadata(glosend);
" 0 6 (fontified t) 6 33 (fontified t) 33 34 (face (rainbow-delimiters-depth-5-face) fontified t) 34 41 (fontified t) 41 42 (face (rainbow-delimiters-depth-5-face) fontified t) 42 43 (fontified t) 43 44 (fontified t)) . 4563) (undo-tree-id7100 . -43) (undo-tree-id7101 . 1) (undo-tree-id7102 . -44) (undo-tree-id7103 . -44) (undo-tree-id7104 . -44) (undo-tree-id7105 . -44) (undo-tree-id7106 . -44) (undo-tree-id7107 . -44) (undo-tree-id7108 . -44) (undo-tree-id7109 . -34) (undo-tree-id7110 . -42) 4605) nil (26361 10995 820805 872000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4558 . 4559) (#("
" 0 1 (fontified nil)) . -4596) (4552 . 4597) 4551) nil (26361 10995 820801 549000) 0 nil])
([nil nil ((4553 . 4557) (#("      " 0 5 (fontified t) 5 6 (rear-nonsticky t fontified t)) . -4553) (undo-tree-id7090 . -6) (undo-tree-id7091 . -6) (undo-tree-id7092 . -6) (undo-tree-id7093 . -6) (undo-tree-id7094 . -6) (undo-tree-id7095 . -6) (undo-tree-id7096 . -6) (undo-tree-id7097 . -6) (undo-tree-id7098 . -6) (undo-tree-id7099 . -6) 4559) nil (26361 10995 820800 942000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4655) (undo-tree-id7089 . -1)) nil (26361 10995 820796 4000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4654) (undo-tree-id6993 . -1) (undo-tree-id6994 . -1) (undo-tree-id6995 . -1) (undo-tree-id6996 . -1) (undo-tree-id6997 . -1) (undo-tree-id6998 . -1) (undo-tree-id6999 . -1) (undo-tree-id7000 . -1) (undo-tree-id7001 . -1) (undo-tree-id7002 . -1) (undo-tree-id7003 . -1) (undo-tree-id7004 . -1) (undo-tree-id7005 . -1) (undo-tree-id7006 . -1) (undo-tree-id7007 . -1) (undo-tree-id7008 . -1) (undo-tree-id7009 . -1) (undo-tree-id7010 . -1) (undo-tree-id7011 . -1) (undo-tree-id7012 . -1) (undo-tree-id7013 . -1) (undo-tree-id7014 . -1) (undo-tree-id7015 . -1) (undo-tree-id7016 . -1) (undo-tree-id7017 . -1) (undo-tree-id7018 . -1) (undo-tree-id7019 . -1) (undo-tree-id7020 . -1) (undo-tree-id7021 . -1) (undo-tree-id7022 . -1) (undo-tree-id7023 . -1) (undo-tree-id7024 . -1) (undo-tree-id7025 . -1) (undo-tree-id7026 . -1) (undo-tree-id7027 . -1) (undo-tree-id7028 . -1) (undo-tree-id7029 . -1) (undo-tree-id7030 . -1) (undo-tree-id7031 . -1) (undo-tree-id7032 . -1) (undo-tree-id7033 . -1) (undo-tree-id7034 . -1) (undo-tree-id7035 . -1) (undo-tree-id7036 . -1) (undo-tree-id7037 . -1) (undo-tree-id7038 . -1) (undo-tree-id7039 . -1) (undo-tree-id7040 . -1) (undo-tree-id7041 . -1) (undo-tree-id7042 . -1) (undo-tree-id7043 . -1) (undo-tree-id7044 . -1) (undo-tree-id7045 . -1) (undo-tree-id7046 . -1) (undo-tree-id7047 . -1) (undo-tree-id7048 . -1) (undo-tree-id7049 . -1) (undo-tree-id7050 . -1) (undo-tree-id7051 . -1) (undo-tree-id7052 . -1) (undo-tree-id7053 . -1) (undo-tree-id7054 . -1) (undo-tree-id7055 . -1) (undo-tree-id7056 . -1) (undo-tree-id7057 . -1) (undo-tree-id7058 . -1) (undo-tree-id7059 . -1) (undo-tree-id7060 . -1) (undo-tree-id7061 . -1) (undo-tree-id7062 . -1) (undo-tree-id7063 . -1) (undo-tree-id7064 . -1) (undo-tree-id7065 . -1) (undo-tree-id7066 . -1) (undo-tree-id7067 . -1) (undo-tree-id7068 . -1) (undo-tree-id7069 . -1) (undo-tree-id7070 . -1) (undo-tree-id7071 . -1) (undo-tree-id7072 . -1) (undo-tree-id7073 . -1) (undo-tree-id7074 . -1) (undo-tree-id7075 . -1) (undo-tree-id7076 . -1) (undo-tree-id7077 . -1) (undo-tree-id7078 . -1) (undo-tree-id7079 . -1) (undo-tree-id7080 . -1) (undo-tree-id7081 . -1) (undo-tree-id7082 . -1) (undo-tree-id7083 . -1) (undo-tree-id7084 . -1) (undo-tree-id7085 . -1) (undo-tree-id7086 . -1) (undo-tree-id7087 . -1) (undo-tree-id7088 . -1)) nil (26361 10995 820793 808000) 0 nil])
([nil nil ((4671 . 4672) (4669 . 4671) (4667 . 4669) (4666 . 4668) (4665 . 4666) (#("catch" 0 5 (face font-lock-keyword-face fontified nil)) . 4665) (undo-tree-id6987 . -5) (undo-tree-id6988 . -5) (4660 . 4665) 4665 (#(" " 0 1 (fontified t)) . -4665) (undo-tree-id6989 . -1) 4666 (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -4666) (undo-tree-id6990 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . 4667) (4666 . 4668) (4665 . 4666) (#("catch" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 3 (face font-lock-keyword-face fontified nil) 3 4 (face font-lock-keyword-face fontified nil) 4 5 (face font-lock-keyword-face fontified nil)) . 4665) (undo-tree-id6991 . -5) (undo-tree-id6992 . -5) (4660 . 4665) 4665 (4664 . 4665) (4662 . 4664) (4659 . 4662)) nil (26361 10995 820665 566000) 0 nil])
([nil nil ((4695 . 4701) (#("	" 0 1 (fontified t)) . 4695) (undo-tree-id6974 . -1) 4703 (4701 . 4703) (apply yas--snippet-revive 4696 4702 #s(yas--snippet nil nil #s(yas--exit 4701 nil) 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4701 nil) 33 nil nil nil nil)) (4696 . 4702) (#("case $0:" 0 8 (fontified nil)) . 4696) (4696 . 4704) (#("ca" 0 2 (fontified nil)) . 4696) (4696 . 4698) (#("case expression:" 0 16 (fontified nil)) . -4696) (undo-tree-id6975 . -16) (4696 . 4712) (#("cas" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -4696) (undo-tree-id6976 . -3) (undo-tree-id6977 . -3) 4699 (4697 . 4699) (#("a" 0 1 (fontified t)) . -4697) (undo-tree-id6978 . -1) (undo-tree-id6979 . -1) (#("t" 0 1 (fontified t)) . -4698) (undo-tree-id6980 . -1) (undo-tree-id6981 . -1) 4699 (4696 . 4699) (apply yas--snippet-revive 4682 4701 #s(yas--snippet nil (#s(yas--field 1 4690 4691 nil nil nil t #s(yas--exit 4696 nil))) #s(yas--exit 4696 nil) 32 nil #s(yas--field 1 4690 4691 nil nil nil t #s(yas--exit 4696 nil)) nil nil)) (4690 . 4691) (#("i" 0 1 (fontified nil)) . 4690) (4690 . 4691) (#("i" 0 1 (fontified t)) . -4690) (undo-tree-id6982 . -1) (undo-tree-id6983 . -1) 4691 (#("condition" 0 9 (fontified nil)) . 4691) (4690 . 4691) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4690 4691 nil nil nil t #s(yas--exit 4696 nil))) #s(yas--exit 4696 nil) 32 nil #s(yas--field 1 4690 4691 nil nil nil t #s(yas--exit 4696 nil)) nil nil)) (4682 . 4709) (#("switch (${1:condition}) {
	$0
	  }" 0 34 (fontified nil)) . 4682) (4712 . 4715) (4708 . 4709) (4682 . 4712) (#("sw" 0 2 (fontified nil)) . 4682) (4682 . 4684) (#("switch (condition) {cases}" 0 26 (fontified nil)) . -4682) (undo-tree-id6984 . -26) (4682 . 4708) (#("swi" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -4682) (undo-tree-id6985 . -3) (undo-tree-id6986 . -3) 4685 (4683 . 4685) (4682 . 4683) (4676 . 4682) (4675 . 4681) (4674 . 4676) (4673 . 4674)) nil (26361 10995 820657 231000) 0 nil])
([nil nil ((apply yas--snippet-revive 4711 4717 #s(yas--snippet nil nil nil 34 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 34 nil nil nil nil)) (4711 . 4717) (#("break;" 0 6 (fontified nil)) . 4711) (4711 . 4717) (#("brea" 0 4 (fontified nil)) . 4711) (4711 . 4715) (#("break;" 0 6 (fontified nil)) . -4711) (undo-tree-id6955 . -6) (4711 . 4717) (#("brea" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -4711) (undo-tree-id6956 . -4) (undo-tree-id6957 . -4) (undo-tree-id6958 . -4) (undo-tree-id6959 . -4) (undo-tree-id6960 . -4) (undo-tree-id6961 . -4) (undo-tree-id6962 . -4) (undo-tree-id6963 . -4) (undo-tree-id6964 . -4) (undo-tree-id6965 . -4) (undo-tree-id6966 . -4) (undo-tree-id6967 . -4) (undo-tree-id6968 . -4) (undo-tree-id6969 . -4) (undo-tree-id6970 . -4) (undo-tree-id6971 . -4) (undo-tree-id6972 . -4) (undo-tree-id6973 . -4) 4715 (4711 . 4715) (4709 . 4711)) nil (26361 10995 820650 226000) 0 nil])
([nil nil ((4745 . 4763) (#("E" 0 1 (face font-lock-string-face fontified t)) . -4745) (undo-tree-id6927 . -1) (undo-tree-id6928 . -1) (#("R" 0 1 (face font-lock-string-face fontified t)) . -4746) (undo-tree-id6929 . -1) (undo-tree-id6930 . -1) (#("R" 0 1 (face font-lock-string-face fontified t)) . -4747) (undo-tree-id6931 . -1) (undo-tree-id6932 . -1) (#("O" 0 1 (face font-lock-string-face fontified t)) . -4748) (undo-tree-id6933 . -1) (undo-tree-id6934 . -1) (#("R" 0 1 (face font-lock-string-face fontified t)) . -4749) (undo-tree-id6935 . -1) (undo-tree-id6936 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -4750) (undo-tree-id6937 . -1) (undo-tree-id6938 . -1) (#("C" 0 1 (face font-lock-string-face fontified t)) . -4751) (undo-tree-id6939 . -1) (undo-tree-id6940 . -1) 4752 (4745 . 4752) (4744 . 4746) (#("\"" 0 1 (fontified nil)) . -4744) (undo-tree-id6941 . -1) (4744 . 4745) (#("|" 0 1 (fontified t)) . -4744) (undo-tree-id6942 . -1) (undo-tree-id6943 . -1) (undo-tree-id6944 . -1) 4745 (4743 . 4745) (4742 . 4743) (apply yas--snippet-revive 4730 4742 #s(yas--snippet nil nil nil 36 nil nil #s(yas--field 1 4724 4764 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 36 nil nil #s(yas--field 1 4724 4764 nil nil nil t nil) nil)) (4730 . 4742) (#("get_logger()" 0 12 (fontified nil)) . 4730) (undo-tree-id6945 . -12) (4730 . 4742) (#("get_logger() const" 0 18 (fontified nil)) . -4730) (undo-tree-id6946 . -18) (undo-tree-id6947 . -18) (4730 . 4748) (#("get_log" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) . -4730) (undo-tree-id6948 . -7) (undo-tree-id6949 . -7) (undo-tree-id6950 . -7) 4737 (4735 . 4737) (4730 . 4735) (4729 . 4730) (4725 . 4729) (#("logger, ..." 0 7 (fontified nil) 7 11 (fontified t)) . 4725) (undo-tree-id6951 . -11) (4724 . 4725) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4724 4764 nil nil nil t nil)) nil 35 nil #s(yas--field 1 4724 4764 nil nil nil t nil) nil nil)) (4711 . 4736) (#("RCLCPP_ERROR(${1:logger, ...})" 0 30 (fontified nil)) . 4711) (4711 . 4741) (#("RC" 0 2 (fontified nil)) . 4711) (4711 . 4713) (#("RCLCPP_ERROR(logger, ...)" 0 25 (fontified nil)) . -4711) (undo-tree-id6952 . -25) (4711 . 4736) (#("RC" 0 1 (fontified t) 1 2 (fontified t)) . -4711) (undo-tree-id6953 . -2) (undo-tree-id6954 . -2) 4713 (4712 . 4713) (4711 . 4712) (4709 . 4711)) nil (26361 10995 820637 699000) 0 nil])
([nil nil ((4765 . 4766) (apply yas--snippet-revive 4711 4765 #s(yas--snippet nil (#s(yas--field 1 4724 4764 nil nil nil t nil)) nil 35 nil #s(yas--field 1 4724 4764 nil nil nil t nil) nil nil))) nil (26361 10995 820611 502000) 0 nil])
([nil nil ((4775 . 4781) (#("	  " 0 3 (fontified t)) . -4775) (undo-tree-id7149 . -3) 4778 (t 26361 10995 865352 83000)) nil (26361 11031 704626 384000) 0 nil])
([nil nil ((apply yas--snippet-revive 4776 4784 #s(yas--snippet nil nil nil 37 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 37 nil nil nil nil)) (4776 . 4784) (#("default:" 0 8 (fontified nil)) . 4776) (4776 . 4784) (#("def" 0 3 (fontified nil)) . 4776) (4776 . 4779) (#("default:" 0 8 (fontified nil)) . -4776) (undo-tree-id7146 . -8) (4776 . 4784) (#("default" 0 1 (face font-lock-keyword-face fontified t) 1 2 (face font-lock-keyword-face fontified t) 2 3 (face font-lock-keyword-face fontified t) 3 4 (face font-lock-keyword-face fontified t) 4 5 (face font-lock-keyword-face fontified t) 5 6 (face font-lock-keyword-face fontified t) 6 7 (face font-lock-keyword-face fontified t)) . -4776) (undo-tree-id7147 . -7) (undo-tree-id7148 . -7) 4783 (4778 . 4783) (4776 . 4778) (4774 . 4776)) nil (26361 11031 704623 856000) 0 nil])
([nil nil ((#("	  " 0 3 (fontified t)) . -4785) (undo-tree-id7145 . -3) 4788 (4784 . 4788)) nil (26361 11031 704620 727000) 0 nil])
([nil nil ((4785 . 4788)) nil (26361 11031 704619 829000) 0 nil])
([nil nil ((4775 . 4781) (#("	" 0 1 (fontified t)) . 4775) (undo-tree-id7144 . -1) 4777) nil (26361 11031 704619 350000) 0 nil])
([nil nil ((4792 . 4794) (4791 . 4792) (#("  " 0 2 (fontified t)) . 4791)) nil (26361 11031 704618 362000) 0 nil])
([nil nil ((#("	RCL
" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . 4790) (undo-tree-id7140 . -4) (undo-tree-id7141 . 1) (undo-tree-id7142 . -3) (undo-tree-id7143 . -3) 4793) nil (26361 11031 704617 665000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4790 . 4791) (#("
" 0 1 (fontified nil)) . -4846) (4789 . 4847) 4783) nil (26361 11031 704614 380000) 0 nil])
([nil nil ((apply yas--snippet-revive 4848 4854 #s(yas--snippet nil nil nil 38 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 38 nil nil nil nil)) (4848 . 4854) (#("break;" 0 6 (fontified nil)) . 4848) (4848 . 4854) (#("bre" 0 3 (fontified nil)) . 4848) (4848 . 4851) (#("break;" 0 6 (fontified nil)) . -4848) (undo-tree-id7137 . -6) (4848 . 4854) (#("brea" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -4848) (undo-tree-id7138 . -4) (undo-tree-id7139 . -4) 4852 (4848 . 4852) (4846 . 4848)) nil (26361 11031 704612 854000) 0 nil])
([nil nil ((#("Couldn" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t)) . 4825) (undo-tree-id7136 . -5)) nil (26361 11031 704533 391000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t)) . 4825)) nil (26361 11031 704532 494000) 0 nil])
([nil nil ((#("t " 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t)) . 4825) (undo-tree-id7134 . -1) (undo-tree-id7135 . -2)) nil (26361 11031 704531 778000) 0 nil])
([nil nil ((#("Send " 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t)) . 4825) (undo-tree-id7132 . -4) (undo-tree-id7133 . -5)) nil (26361 11031 704530 275000) 0 nil])
([nil nil ((#("Data" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t)) . 4825) (undo-tree-id7130 . -3) (undo-tree-id7131 . -4)) nil (26361 11031 704528 268000) 0 nil])
([nil nil ((4854 . 4866) (4853 . 4854) (4848 . 4849) (#("w" 0 1 (fontified nil)) . 4848) (#("While" 0 1 (face font-lock-string-face fontified nil) 1 2 (face font-lock-string-face fontified nil) 2 3 (face font-lock-string-face fontified nil) 3 4 (face font-lock-string-face fontified nil) 4 5 (face font-lock-string-face fontified nil)) . 4853) (undo-tree-id7113 . -5) (undo-tree-id7114 . -5) (undo-tree-id7115 . -5) (undo-tree-id7116 . -5) (undo-tree-id7117 . -5) (undo-tree-id7118 . -5) (undo-tree-id7119 . -5) (undo-tree-id7120 . -5) (undo-tree-id7121 . -5) (undo-tree-id7122 . -5) (undo-tree-id7123 . -5) (undo-tree-id7124 . -5) (undo-tree-id7125 . -5) (undo-tree-id7126 . -5) (undo-tree-id7127 . -5) (undo-tree-id7128 . -5) (4848 . 4853) 4853 (4842 . 4853) (#("u" 0 1 (face font-lock-string-face fontified t)) . -4842) (undo-tree-id7129 . -1) 4843 (4826 . 4843) (4825 . 4826)) nil (26361 11031 704524 45000) 0 nil])
([nil nil ((4711 . 4723) (4706 . 4711) (#("l" 0 1 (c-in-sws t face font-lock-comment-face fontified t)) . -4706) (undo-tree-id7184 . -1) (undo-tree-id7185 . -1) 4707 (4703 . 4707) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -4703) (undo-tree-id7186 . -1) (undo-tree-id7187 . -1) (#("d" 0 1 (face font-lock-comment-face fontified t)) . -4704) (undo-tree-id7188 . -1) (undo-tree-id7189 . -1) (#("a" 0 1 (face font-lock-comment-face fontified t)) . -4705) (undo-tree-id7190 . -1) (#("b" 0 1 (face font-lock-comment-face fontified t)) . -4706) (undo-tree-id7191 . -1) 4707 (4700 . 4707) (#(" " 0 1 (c-in-sws t face font-lock-comment-face fontified t)) . -4700) (undo-tree-id7192 . -1) (undo-tree-id7193 . -1) 4701 (4684 . 4701) (#("m" 0 1 (c-in-sws t face font-lock-comment-face fontified t)) . -4684) (undo-tree-id7194 . -1) (undo-tree-id7195 . -1) 4685 (4671 . 4685) (4670 . 4671) (4656 . 4670) (4654 . 4656) (4653 . 4654) (t 26361 11031 749435 254000)) nil (26361 11110 586940 821000) 0 nil])
([nil nil ((4723 . 4724)) nil (26361 11110 586935 638000) 0 nil])
([nil nil ((#(";" 0 1 (c-in-sws t face font-lock-comment-face fontified t)) . -4723) (undo-tree-id7183 . -1) 4724) nil (26361 11110 586934 716000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -4554) (undo-tree-id7181 . -4) 4558 (4554 . 4558) (#("    " 0 4 (fontified nil)) . 4553) (undo-tree-id7182 . -4) (4552 . 4558)) nil (26361 11110 586933 597000) 0 nil])
([nil nil ((4567 . 4568) (4564 . 4567) (4558 . 4564) (#("ed" 0 2 (fontified nil)) . 4558) (4558 . 4560) (#("edited" 0 6 (fontified nil)) . -4558) (undo-tree-id7162 . -6) (4558 . 4564) (#("edi" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -4558) (undo-tree-id7163 . -3) (undo-tree-id7164 . -3) 4561 (4560 . 4561) (#(" " 0 1 (fontified t)) . -4560) (undo-tree-id7165 . -1) (undo-tree-id7166 . -1) (#("=" 0 1 (fontified t)) . -4561) (undo-tree-id7167 . -1) 4562 (4559 . 4562) (4558 . 4559) (#("i" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -4558) (undo-tree-id7168 . -1) (undo-tree-id7169 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -4559) (undo-tree-id7170 . -1) (undo-tree-id7171 . -1) (#(" " 0 1 (fontified t)) . -4560) (undo-tree-id7172 . -1) (undo-tree-id7173 . -1) 4561 (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -4561) (undo-tree-id7174 . -1) (undo-tree-id7175 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . 4562) (#("e" 0 1 (fontified t)) . -4562) (undo-tree-id7176 . -1) (undo-tree-id7177 . -1) (#("d" 0 1 (fontified t)) . -4563) (undo-tree-id7178 . -1) (undo-tree-id7179 . -1) 4564 (4562 . 4564) (4561 . 4563) (4558 . 4561) (4554 . 4558) (#("    " 0 4 (fontified nil)) . 4553) (undo-tree-id7180 . -4) (4557 . 4558) (4553 . 4557)) nil (26361 11110 586930 817000) 0 nil])
([nil nil ((4567 . 4568)) nil (26361 11110 586923 484000) 0 nil])
([nil nil ((4554 . 4558) (#("    " 0 4 (fontified nil)) . 4553) (undo-tree-id7161 . -4) (4557 . 4558) (4553 . 4557)) nil (26361 11110 586922 997000) 0 nil])
([nil nil ((4570 . 4573) (#(" " 0 1 (fontified t)) . -4570) (undo-tree-id7156 . -1) 4571 (4570 . 4571) (4569 . 4570) (4568 . 4569) (4562 . 4568) (#("ed" 0 2 (fontified nil)) . 4562) (4562 . 4564) (#("edited" 0 6 (fontified nil)) . -4562) (undo-tree-id7157 . -6) (4562 . 4568) (#("ed" 0 1 (fontified t) 1 2 (fontified t)) . -4562) (undo-tree-id7158 . -2) (undo-tree-id7159 . -2) 4564 (4562 . 4564) (4561 . 4563) (4558 . 4561) (4554 . 4558) (#("    " 0 4 (fontified nil)) . 4553) (undo-tree-id7160 . -4) (4557 . 4558) (4553 . 4557)) nil (26361 11110 586921 276000) 0 nil])
([nil nil ((4574 . 4575)) nil (26361 11110 586916 345000) 0 nil])
([nil nil ((4570 . 4572) (#("=" 0 1 (fontified t)) . -4570) (undo-tree-id7153 . -1) (#(" " 0 1 (fontified t)) . -4571) (undo-tree-id7154 . -1) (#("4" 0 1 (fontified t)) . -4572) (undo-tree-id7155 . -1) 4573) nil (26361 11110 586915 244000) 0 nil])
([nil nil ((4574 . 4580) (#(" " 0 1 (fontified t)) . -4574) (undo-tree-id7152 . -1) 4575 (4574 . 4575)) nil (26361 11110 586911 250000) 0 nil])
([nil nil ((4606 . 4614) (4585 . 4606) (4581 . 4585) (4560 . 4581) (4559 . 4560) (#("." 0 1 (fontified t)) . -4559) (undo-tree-id7150 . -1) 4560 (4559 . 4560) (4558 . 4559) (4554 . 4558) (#("    " 0 4 (fontified nil)) . 4553) (undo-tree-id7151 . -4) (4557 . 4558) (4553 . 4557)) nil (26361 11110 586879 303000) 0 nil])
([nil nil ((4621 . 4622) (4619 . 4621)) nil (26361 11110 586866 147000) 0 nil])
([nil current ((4644 . 4645) (t 26361 11110 632627 867000)) nil (26361 11112 806603 967000) 0 nil])
nil
