(undo-tree-save-format-version . 1)
"c6f69e739b37bcb640cd117fb0d46603a871b99f"
[nil nil nil nil (26353 1693 424209 669000) 0 nil]
([nil nil ((#("milliseconds" 0 12 (fontified t)) . 763) (undo-tree-id68 . -11) (t 26352 20458 961284 302000)) nil (26353 1693 424208 323000) 0 nil])
([nil nil ((30 . 48) (763 . 763) (763 . 775) (#("mi" 0 2 (fontified nil)) . 763) (763 . 765) (#("microseconds" 0 12 (fontified nil)) . -763) (undo-tree-id2 . -12) (763 . 775) (#("micro" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -763) (undo-tree-id3 . -5) (undo-tree-id4 . -5) (undo-tree-id5 . -5) (undo-tree-id6 . -5) (undo-tree-id7 . -5) (undo-tree-id8 . -5) (undo-tree-id9 . -5) (undo-tree-id10 . -5) (undo-tree-id11 . -5) (undo-tree-id12 . -5) (undo-tree-id13 . -5) (undo-tree-id14 . -5) (undo-tree-id15 . -5) (undo-tree-id16 . -5) (undo-tree-id17 . -5) (undo-tree-id18 . -5) (undo-tree-id19 . -5) (undo-tree-id20 . -5) (undo-tree-id21 . -5) (undo-tree-id22 . -5) (undo-tree-id23 . -5) (undo-tree-id24 . -5) (undo-tree-id25 . -5) (undo-tree-id26 . -5) (undo-tree-id27 . -5) (undo-tree-id28 . -5) (undo-tree-id29 . -5) (undo-tree-id30 . -5) (undo-tree-id31 . -5) (undo-tree-id32 . -5) (undo-tree-id33 . -5) (undo-tree-id34 . -5) (undo-tree-id35 . -5) (undo-tree-id36 . -5) (undo-tree-id37 . -5) (undo-tree-id38 . -5) (undo-tree-id39 . -5) (undo-tree-id40 . -5) (undo-tree-id41 . -5) (undo-tree-id42 . -5) (undo-tree-id43 . -5) (undo-tree-id44 . -5) (undo-tree-id45 . -5) (undo-tree-id46 . -5) (undo-tree-id47 . -5) (undo-tree-id48 . -5) (undo-tree-id49 . -5) (undo-tree-id50 . -5) (undo-tree-id51 . -5) (undo-tree-id52 . -5) (undo-tree-id53 . -5) (undo-tree-id54 . -5) (undo-tree-id55 . -5) (undo-tree-id56 . -5) (undo-tree-id57 . -5) (undo-tree-id58 . -5) (undo-tree-id59 . -5) (undo-tree-id60 . -5) (undo-tree-id61 . -5) (undo-tree-id62 . -5) (undo-tree-id63 . -5) (undo-tree-id64 . -5) (undo-tree-id65 . -5) (undo-tree-id66 . -5) (undo-tree-id67 . -5) 768 (767 . 768) (763 . 767)) nil (26353 1693 424206 365000) 0 nil])
([nil nil ((794 . 797) (#("1" 0 1 (fontified t)) . -794) (undo-tree-id1 . -1) 795) nil (26353 1693 424175 235000) 0 nil])
([nil nil ((796 . 797) (#("0" 0 1 (fontified t)) . -796) (undo-tree-id0 . -1) 797) nil (26353 1693 424170 938000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . 794) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (t 26353 1693 463869 366000)) nil (26353 2158 897758 793000) 0 nil])
([nil nil ((794 . 795)) nil (26353 2158 897746 181000) 0 nil])
([nil nil ((551 . 552) (542 . 551) (538 . 542) (t 26353 2158 935726 279000)) nil (26353 2231 904961 829000) 0 nil])
([nil nil ((542 . 546)) nil (26353 2231 904956 503000) 0 nil])
([nil nil ((1286 . 1287) (1284 . 1286) (#(" " 0 1 (fontified t)) . -1284) (undo-tree-id71 . -1) (undo-tree-id72 . -1) 1285 (1282 . 1285) (1281 . 1282) (1279 . 1281) (1272 . 1279) (t 26353 2231 942533 232000)) nil (26353 2246 259834 900000) 0 nil])
([nil nil ((#("      std::cout << \"Sending This Stupid Message \\n\";
" 0 6 (fontified t c-is-sws t c-in-sws t) 6 7 (face font-lock-constant-face fontified t c-is-sws t) 7 9 (face font-lock-constant-face fontified t) 9 19 (fontified t) 19 51 (face font-lock-string-face fontified t) 51 52 (fontified t) 52 53 (fontified t)) . 1289) (undo-tree-id77 . -52) (undo-tree-id78 . -13) 1302 (t 26353 2246 297867 765000)) nil (26353 2252 32962 607000) 0 nil])
([nil nil ((#("      //RCLCPP_INFO(this->get_logger(), \"Publishing : data from serial\");
" 0 1 (c-in-sws t fontified t) 1 6 (fontified t c-in-sws t) 6 7 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 7 8 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 8 73 (face font-lock-comment-face fontified t c-in-sws t) 73 74 (c-in-sws t face font-lock-comment-face fontified t)) . 1199) (undo-tree-id75 . -73) (undo-tree-id76 . -13) 1212) nil (26353 2252 32960 773000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1220 . 1221) (#("
" 0 1 (fontified nil c-in-sws t face font-lock-comment-face)) . -1288) (1214 . 1289)) nil (26353 2252 32959 358000) 0 nil])
([nil nil ((#("//" 0 1 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 1 2 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 1221) (undo-tree-id74 . -1)) nil (26353 2252 32958 585000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -1287) (undo-tree-id73 . -6) 1293 (1286 . 1293)) nil (26353 2252 32954 727000) 0 nil])
([nil nil ((#("Publishing " 0 11 (face font-lock-string-face fontified t)) . 1254) (undo-tree-id177 . -10) (t 26353 2252 70000 470000)) nil (26353 2287 915521 41000) 0 nil])
([nil nil ((#(": " 0 2 (face font-lock-string-face fontified t)) . 1254) (undo-tree-id176 . -1)) nil (26353 2287 915520 189000) 0 nil])
([nil nil ((#("data " 0 5 (face font-lock-string-face fontified t)) . 1254) (undo-tree-id175 . -4)) nil (26353 2287 915518 846000) 0 nil])
([nil nil ((#("from " 0 5 (face font-lock-string-face fontified t)) . 1254) (undo-tree-id174 . -4)) nil (26353 2287 915517 975000) 0 nil])
([nil nil ((#("serial" 0 6 (face font-lock-string-face fontified t)) . 1254) (undo-tree-id173 . -5)) nil (26353 2287 915516 639000) 0 nil])
([nil nil ((1229 . 1237) (1224 . 1229) (#("time" 0 4 (fontified nil)) . 1224) (1224 . 1228) (#("times" 0 5 (fontified nil)) . -1224) (undo-tree-id170 . -5) (1224 . 1229) (#("time" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -1224) (undo-tree-id171 . -4) (undo-tree-id172 . -4) 1228 (1227 . 1228) (1224 . 1227) (1223 . 1225) (1220 . 1223) (1214 . 1220)) nil (26353 2287 915515 112000) 0 nil])
([nil nil ((1240 . 1241) (1239 . 1247) (1238 . 1240)) nil (26353 2287 915512 244000) 0 nil])
([nil nil ((#("      RCLCPP_INFO(this->get_logger(), \"\");
" 0 1 (fontified t c-is-sws t c-in-sws t) 1 5 (fontified t c-is-sws t c-in-sws t) 5 6 (fontified t rear-nonsticky t) 6 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-4-face) fontified t) 18 22 (face font-lock-keyword-face fontified t) 22 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-5-face) fontified t) 35 36 (face (rainbow-delimiters-depth-5-face) fontified t) 36 37 (fontified t) 37 38 (fontified t) 38 39 (face font-lock-string-face fontified t) 39 40 (face font-lock-string-face fontified t) 40 41 (face (rainbow-delimiters-depth-4-face) fontified t) 41 42 (fontified t) 42 43 (fontified t)) . 1250) (undo-tree-id169 . -42)) nil (26353 2287 915511 646000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -1284) (1241 . 1285) 1240) nil (26353 2287 915510 789000) 0 nil])
([nil nil ((1242 . 1243) (#("      " 0 1 (fontified t) 1 5 (fontified t) 5 6 (fontified t rear-nonsticky t)) . -1242) (undo-tree-id168 . -6) 1248) nil (26353 2287 915510 302000) 0 nil])
([nil nil ((1240 . 1241) (#("	" 0 1 (fontified t)) . 1240)) nil (26353 2287 915509 503000) 0 nil])
([nil nil ((1247 . 1250) (1243 . 1247) (1241 . 1243) (1240 . 1241) (#("	" 0 1 (fontified t)) . 1240)) nil (26353 2287 915508 460000) 0 nil])
([nil nil ((1250 . 1251)) nil (26353 2287 915507 995000) 0 nil])
([nil nil ((1294 . 1304) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1294) (undo-tree-id167 . -1) 1295 (1286 . 1295)) nil (26353 2287 915507 179000) 0 nil])
([nil nil ((1307 . 1308)) nil (26353 2287 915506 239000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1307) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) 1308) nil (26353 2287 915502 376000) 0 nil])
([nil nil ((1234 . 1235) (t 26353 2287 953803 0)) nil (26353 2403 45218 637000) 0 nil])
([nil nil ((1295 . 1296)) nil (26353 2403 45213 238000) 0 nil])
([nil nil ((916 . 917) (#("	" 0 1 (fontified nil)) . 915) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (915 . 917) (#(" " 0 1 (fontified nil)) . 914) (undo-tree-id179 . -1) (915 . 916) (t 26353 2403 82141 634000)) nil (26354 30896 102832 384000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 915)) nil (26354 30896 102825 292000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -914) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) 915) nil (26354 30896 102823 674000) 0 nil])
([nil nil ((887 . 893) (#("      " 0 6 (fontified nil)) . 886) (undo-tree-id171 . -6) (undo-tree-id172 . -6) (892 . 893) (886 . 892)) nil (26354 30896 102817 97000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 899 909 nil nil nil nil #s(yas--field 2 925 936 nil nil nil nil #s(yas--exit 941 nil))) #s(yas--field 2 925 936 nil nil nil nil #s(yas--exit 941 nil))) #s(yas--exit 941 nil) 3 nil #s(yas--field 1 899 909 nil nil nil nil #s(yas--field 2 925 936 nil nil nil nil #s(yas--exit 941 nil))) nil nil)) (892 . 946) (#("try {
	${1:statements}
      } catch (${2:declaration}) {
	$0
	  }" 0 66 (fontified nil)) . 892) (954 . 957) (950 . 951) (915 . 921) (898 . 899) (892 . 947) (#("try" 0 3 (fontified nil)) . 892) (892 . 895) (#("try {statements} catch (declaration) {statements}" 0 49 (fontified nil)) . -892) (undo-tree-id168 . -49) (892 . 941) (#("try" 0 1 (face font-lock-keyword-face fontified t) 1 2 (face font-lock-keyword-face fontified t) 2 3 (face font-lock-keyword-face fontified t)) . -892) (undo-tree-id169 . -3) (undo-tree-id170 . -3) 895 (892 . 895) (886 . 892)) nil (26354 30896 102811 151000) 0 nil])
([nil nil ((apply yas--snippet-revive 892 946 #s(yas--snippet nil (#s(yas--field 1 899 909 nil nil nil nil #s(yas--field 2 925 936 nil nil nil nil #s(yas--exit 941 nil))) #s(yas--field 2 925 936 nil nil nil nil #s(yas--exit 941 nil))) #s(yas--exit 941 nil) 3 nil #s(yas--field 1 899 909 nil nil nil nil #s(yas--field 2 925 936 nil nil nil nil #s(yas--exit 941 nil))) nil nil))) nil (26354 30896 102802 393000) 0 nil])
([nil nil ((#("statements" 0 10 (fontified t)) . 899) (undo-tree-id166 . 10) (undo-tree-id167 . -9)) nil (26354 30896 102800 742000) 0 nil])
([nil nil ((#("CommunicationData c" 0 16 (face font-lock-type-face fontified t) 16 17 (face font-lock-type-face c-type c-decl-id-start fontified t) 17 18 (fontified t) 18 19 (face font-lock-variable-name-face fontified t)) . 950) (undo-tree-id163 . -18) (undo-tree-id164 . -18) (undo-tree-id165 . -18)) nil (26354 30896 102794 902000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -886) (undo-tree-id161 . -6) (undo-tree-id162 . -6) 892 (885 . 892)) nil (26354 30896 102788 807000) 0 nil])
([nil nil ((nil rear-nonsticky nil 904 . 905) (nil fontified nil 886 . 905) (886 . 905)) nil (26354 30896 102784 116000) 0 nil])
([nil nil ((886 . 892) 904) nil (26354 30896 102782 297000) 0 nil])
([nil nil ((#("       =	s.get_data();
" 0 6 (fontified t) 6 8 (fontified t) 8 9 (fontified t) 9 19 (fontified t) 19 20 (face (rainbow-delimiters-depth-4-face) fontified t) 20 21 (face (rainbow-delimiters-depth-4-face) fontified t) 21 22 (fontified t) 22 23 (fontified t)) . 970) (undo-tree-id153 . -6) (undo-tree-id154 . 17) (undo-tree-id155 . -6) (undo-tree-id156 . -6) (undo-tree-id157 . -22) (undo-tree-id158 . -6) (undo-tree-id159 . -17) (undo-tree-id160 . -17) 987) nil (26354 30896 102779 511000) 0 nil])
([nil nil ((925 . 929) (924 . 925) (#("	" 0 1 (fontified t)) . 924)) nil (26354 30896 102761 355000) 0 nil])
([nil nil ((nil rear-nonsticky nil 936 . 937) (#("
" 0 1 (fontified nil)) . -952) (929 . 953) 928) nil (26354 30896 102757 854000) 0 nil])
([nil nil ((#("=" 0 1 (fontified nil)) . -927) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (#(" " 0 1 (fontified t)) . -928) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (#("
" 0 1 (fontified t)) . -929) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (#(" " 0 1 (fontified t)) . -930) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (#(" " 0 1 (fontified t)) . -931) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (#(" " 0 1 (fontified t)) . -932) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (#(" " 0 1 (fontified t)) . -933) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (#(" " 0 1 (fontified t)) . -934) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (#(" " 0 1 (fontified t)) . -935) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (#(" " 0 1 (rear-nonsticky t fontified t)) . -936) (undo-tree-id151 . -1) (undo-tree-id152 . -1) 937) nil (26354 30896 102748 944000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -981) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (#(" " 0 1 (fontified nil)) . -982) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (#("	" 0 1 (fontified nil)) . 983) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (975 . 983) 976 (#(" " 0 1 (fontified t)) . -976) (undo-tree-id129 . -1) 977) nil (26354 30896 102670 203000) 0 nil])
([nil nil ((#("declaration" 0 11 (fontified t)) . 958) (undo-tree-id122 . -10)) nil (26354 30896 102645 759000) 0 nil])
([nil nil ((958 . 961)) nil (26354 30896 102641 354000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -976) (undo-tree-id120 . -6) (undo-tree-id121 . -6) 982 (975 . 982)) nil (26354 30896 102637 598000) 0 nil])
([nil nil ((967 . 973) (#("       " 0 6 (fontified t) 6 7 (fontified t)) . -967) (undo-tree-id119 . -7) 974) nil (26354 30896 102628 529000) 0 nil])
([nil nil ((#("auto " 0 3 (face font-lock-keyword-face fontified t) 3 4 (c-type c-decl-id-start face font-lock-keyword-face fontified t) 4 5 (fontified t)) . 990) (undo-tree-id75 . -4) (undo-tree-id76 . -5) (undo-tree-id77 . -5) (undo-tree-id78 . -5) (undo-tree-id79 . -5) (undo-tree-id80 . -5) (undo-tree-id81 . -5) (undo-tree-id82 . -5) (undo-tree-id83 . -5) (undo-tree-id84 . -5) (undo-tree-id85 . -5) (undo-tree-id86 . -5) (undo-tree-id87 . -5) (undo-tree-id88 . -5) (undo-tree-id89 . -5) (undo-tree-id90 . -5) (undo-tree-id91 . -5) (undo-tree-id92 . -5) (undo-tree-id93 . -5) (undo-tree-id94 . -5) (undo-tree-id95 . -5) (undo-tree-id96 . -5) (undo-tree-id97 . -5) (undo-tree-id98 . -5) (undo-tree-id99 . -5) (undo-tree-id100 . -5) (undo-tree-id101 . -5) (undo-tree-id102 . -5) (undo-tree-id103 . -5) (undo-tree-id104 . -5) (undo-tree-id105 . -5) (undo-tree-id106 . -5) (undo-tree-id107 . -5) (undo-tree-id108 . -5) (undo-tree-id109 . -5) (undo-tree-id110 . -5) (undo-tree-id111 . -5) (undo-tree-id112 . -5) (undo-tree-id113 . -5) (undo-tree-id114 . -5) (undo-tree-id115 . -5) (undo-tree-id116 . -5) (undo-tree-id117 . -5) (undo-tree-id118 . -5)) nil (26354 30896 102601 839000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1035) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) 1036 (1035 . 1036) (1028 . 1035) 990) nil (26354 30896 101635 517000) 0 nil])
([nil nil ((993 . 994) (991 . 993) (990 . 991)) nil (26354 30896 101547 962000) 0 nil])
([nil nil ((1010 . 1015) (1008 . 1010) (1005 . 1008) (984 . 990) (#("    " 0 4 (fontified nil)) . 984) (1002 . 1003) (984 . 988) (#("      " 0 6 (fontified nil)) . 984) (undo-tree-id0 . -6) (undo-tree-id1 . -6) (undo-tree-id2 . -6) (undo-tree-id3 . -6) (undo-tree-id4 . -6) (undo-tree-id5 . -6) (undo-tree-id6 . -6) (undo-tree-id7 . -6) (undo-tree-id8 . -6) (undo-tree-id9 . -6) (undo-tree-id10 . -6) (undo-tree-id11 . -6) (undo-tree-id12 . -6) (undo-tree-id13 . -6) (undo-tree-id14 . -6) (undo-tree-id15 . -6) (undo-tree-id16 . -6) (undo-tree-id17 . -6) (undo-tree-id18 . -6) (undo-tree-id19 . -6) (undo-tree-id20 . -6) (undo-tree-id21 . -6) (undo-tree-id22 . -6) (undo-tree-id23 . -6) (undo-tree-id24 . -6) (undo-tree-id25 . -6) (undo-tree-id26 . -6) (undo-tree-id27 . -6) (undo-tree-id28 . -6) (undo-tree-id29 . -6) (undo-tree-id30 . -6) (undo-tree-id31 . -6) (undo-tree-id32 . -6) (undo-tree-id33 . -6) (undo-tree-id34 . -6) (undo-tree-id35 . -6) (undo-tree-id36 . -6) (undo-tree-id37 . -6) (undo-tree-id38 . -6) (undo-tree-id39 . -6) (undo-tree-id40 . -6) (undo-tree-id41 . -6) (undo-tree-id42 . -6) (1003 . 1004) (999 . 1003) (991 . 999) (#("e" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -991) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#("o" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -992) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#("m" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -993) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (#("e" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -994) (undo-tree-id49 . -1) (undo-tree-id50 . -1) 995 (993 . 995) (#("m" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -993) (undo-tree-id51 . -1) (undo-tree-id52 . -1) 994 (993 . 994)) nil (26354 30896 101520 312000) 0 nil])
([nil nil ((974 . 979) (#("-" 0 1 (fontified t)) . -974) (undo-tree-id180 . -1) (undo-tree-id181 . -1) 975 (970 . 975) (969 . 971) (966 . 969) (965 . 966) (#("	" 0 1 (fontified t)) . 965) (t 26354 30896 145703 627000)) nil (26354 30982 16214 733000) 0 nil])
([nil nil ((975 . 976)) nil (26354 30982 22253 612000) 0 nil])
([nil nil ((#("SerialBridge " 0 11 (face font-lock-type-face fontified t) 11 12 (face font-lock-type-face c-type c-decl-id-start fontified t) 12 13 (fontified t)) . 1470) (undo-tree-id298 . -12) (undo-tree-id299 . -13) (t 26357 35423 559015 751000)) nil (26361 6679 112664 492000) 0 nil] [nil nil ((283 . 283) (283 . 284)) ((#("
" 0 1 (c-in-sws t fontified t)) . 283) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1)) (26354 30982 16176 536000) 0 nil])
([nil nil ((1481 . 1482) (1470 . 1481) (#("Br" 0 2 (fontified nil)) . 1470) (1470 . 1472) (#("BridgeClass" 0 11 (fontified nil)) . -1470) (undo-tree-id0 . -11) (1470 . 1481) (#("Brid" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -1470) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -2) (undo-tree-id32 . -2) (undo-tree-id33 . -2) (undo-tree-id34 . -2) (undo-tree-id35 . -2) (undo-tree-id36 . -2) (undo-tree-id37 . -2) (undo-tree-id38 . -2) (undo-tree-id39 . -2) (undo-tree-id40 . -2) (undo-tree-id41 . -2) (undo-tree-id42 . -2) (undo-tree-id43 . -2) (undo-tree-id44 . -2) (undo-tree-id45 . -2) (undo-tree-id46 . -2) (undo-tree-id47 . -2) (undo-tree-id48 . -2) (undo-tree-id49 . -2) (undo-tree-id50 . -2) (undo-tree-id51 . -2) (undo-tree-id52 . -2) (undo-tree-id53 . -2) (undo-tree-id54 . -2) (undo-tree-id55 . -2) (undo-tree-id56 . -2) (undo-tree-id57 . -2) (undo-tree-id58 . -2) (undo-tree-id59 . -2) (undo-tree-id60 . -2) (undo-tree-id61 . -2) (undo-tree-id62 . -2) (undo-tree-id63 . -2) (undo-tree-id64 . -2) (undo-tree-id65 . -2) (undo-tree-id66 . -2) (undo-tree-id67 . -2) (undo-tree-id68 . -2) (undo-tree-id69 . -2) (undo-tree-id70 . -2) (undo-tree-id71 . -2) (undo-tree-id72 . -2) (undo-tree-id73 . -2) (undo-tree-id74 . -2) (undo-tree-id75 . -2) (undo-tree-id76 . -2) (undo-tree-id77 . -2) (undo-tree-id78 . -2) (undo-tree-id79 . -2) (undo-tree-id80 . -2) (undo-tree-id81 . -2) (undo-tree-id82 . -2) (undo-tree-id83 . -2) (undo-tree-id84 . -2) (undo-tree-id85 . -2) (undo-tree-id86 . -2) (undo-tree-id87 . -2) (undo-tree-id88 . -2) (undo-tree-id89 . -2) (undo-tree-id90 . -2) (undo-tree-id91 . -2) (undo-tree-id92 . -2) (undo-tree-id93 . -2) (undo-tree-id94 . -2) (undo-tree-id95 . -2) (undo-tree-id96 . -2) (undo-tree-id97 . -2) (undo-tree-id98 . -2) (undo-tree-id99 . -2) (undo-tree-id100 . -2) (undo-tree-id101 . -2) (undo-tree-id102 . -3) (undo-tree-id103 . -3) (undo-tree-id104 . -3) (undo-tree-id105 . -3) (undo-tree-id106 . -3) (undo-tree-id107 . -3) (undo-tree-id108 . -3) (undo-tree-id109 . -3) (undo-tree-id110 . -3) (undo-tree-id111 . -3) (undo-tree-id112 . -3) (undo-tree-id113 . -3) (undo-tree-id114 . -3) (undo-tree-id115 . -3) (undo-tree-id116 . -3) (undo-tree-id117 . -3) (undo-tree-id118 . -3) (undo-tree-id119 . -3) (undo-tree-id120 . -3) (undo-tree-id121 . -3) (undo-tree-id122 . -3) (undo-tree-id123 . -3) (undo-tree-id124 . -3) (undo-tree-id125 . -3) (undo-tree-id126 . -3) (undo-tree-id127 . -3) (undo-tree-id128 . -3) (undo-tree-id129 . -3) (undo-tree-id130 . -3) (undo-tree-id131 . -3) (undo-tree-id132 . -3) (undo-tree-id133 . -3) (undo-tree-id134 . -3) (undo-tree-id135 . -3) (undo-tree-id136 . -3) (undo-tree-id137 . -3) (undo-tree-id138 . -3) (undo-tree-id139 . -3) (undo-tree-id140 . -3) (undo-tree-id141 . -3) (undo-tree-id142 . -3) (undo-tree-id143 . -3) (undo-tree-id144 . -3) (undo-tree-id145 . -3) (undo-tree-id146 . -3) (undo-tree-id147 . -3) (undo-tree-id148 . -3) (undo-tree-id149 . -3) (undo-tree-id150 . -3) (undo-tree-id151 . -3) (undo-tree-id152 . -3) (undo-tree-id153 . -3) (undo-tree-id154 . -3) (undo-tree-id155 . -3) (undo-tree-id156 . -3) (undo-tree-id157 . -3) (undo-tree-id158 . -3) (undo-tree-id159 . -3) (undo-tree-id160 . -3) (undo-tree-id161 . -3) (undo-tree-id162 . -3) (undo-tree-id163 . -3) (undo-tree-id164 . -3) (undo-tree-id165 . -3) (undo-tree-id166 . -3) (undo-tree-id167 . -3) (undo-tree-id168 . -3) (undo-tree-id169 . -3) (undo-tree-id170 . -3) (undo-tree-id171 . -3) (undo-tree-id172 . -3) (undo-tree-id173 . -3) (undo-tree-id174 . -3) (undo-tree-id175 . -3) (undo-tree-id176 . -3) (undo-tree-id177 . -3) (undo-tree-id178 . -3) (undo-tree-id179 . -3) (undo-tree-id180 . -3) (undo-tree-id181 . -3) (undo-tree-id182 . -3) (undo-tree-id183 . -3) (undo-tree-id184 . -3) (undo-tree-id185 . -3) (undo-tree-id186 . -3) (undo-tree-id187 . -3) (undo-tree-id188 . -3) (undo-tree-id189 . -3) (undo-tree-id190 . -3) (undo-tree-id191 . -3) (undo-tree-id192 . -3) (undo-tree-id193 . -3) (undo-tree-id194 . -3) (undo-tree-id195 . -3) (undo-tree-id196 . -3) (undo-tree-id197 . -3) (undo-tree-id198 . -3) (undo-tree-id199 . -3) (undo-tree-id200 . -3) (undo-tree-id201 . -3) (undo-tree-id202 . -3) (undo-tree-id203 . -4) (undo-tree-id204 . -4) (undo-tree-id205 . -4) (undo-tree-id206 . -4) (undo-tree-id207 . -4) (undo-tree-id208 . -4) (undo-tree-id209 . -4) (undo-tree-id210 . -4) (undo-tree-id211 . -4) (undo-tree-id212 . -4) (undo-tree-id213 . -4) (undo-tree-id214 . -4) (undo-tree-id215 . -4) (undo-tree-id216 . -4) (undo-tree-id217 . -4) (undo-tree-id218 . -4) (undo-tree-id219 . -4) (undo-tree-id220 . -4) (undo-tree-id221 . -4) (undo-tree-id222 . -4) (undo-tree-id223 . -4) (undo-tree-id224 . -4) (undo-tree-id225 . -4) (undo-tree-id226 . -4) (undo-tree-id227 . -4) (undo-tree-id228 . -4) (undo-tree-id229 . -4) (undo-tree-id230 . -4) (undo-tree-id231 . -4) (undo-tree-id232 . -4) (undo-tree-id233 . -4) (undo-tree-id234 . -4) (undo-tree-id235 . -4) (undo-tree-id236 . -4) (undo-tree-id237 . -4) (undo-tree-id238 . -4) (undo-tree-id239 . -4) (undo-tree-id240 . -4) (undo-tree-id241 . -4) (undo-tree-id242 . -4) (undo-tree-id243 . -4) (undo-tree-id244 . -4) (undo-tree-id245 . -4) (undo-tree-id246 . -4) (undo-tree-id247 . -4) (undo-tree-id248 . -4) (undo-tree-id249 . -4) (undo-tree-id250 . -4) (undo-tree-id251 . -4) (undo-tree-id252 . -4) (undo-tree-id253 . -4) (undo-tree-id254 . -4) (undo-tree-id255 . -4) (undo-tree-id256 . -4) (undo-tree-id257 . -4) (undo-tree-id258 . -4) (undo-tree-id259 . -4) (undo-tree-id260 . -4) (undo-tree-id261 . -4) (undo-tree-id262 . -4) (undo-tree-id263 . -4) (undo-tree-id264 . -4) (undo-tree-id265 . -4) (undo-tree-id266 . -4) (undo-tree-id267 . -4) (undo-tree-id268 . -4) (undo-tree-id269 . -4) (undo-tree-id270 . -4) (undo-tree-id271 . -4) (undo-tree-id272 . -4) (undo-tree-id273 . -4) (undo-tree-id274 . -4) (undo-tree-id275 . -4) (undo-tree-id276 . -4) (undo-tree-id277 . -4) (undo-tree-id278 . -4) (undo-tree-id279 . -4) (undo-tree-id280 . -4) (undo-tree-id281 . -4) (undo-tree-id282 . -4) (undo-tree-id283 . -4) (undo-tree-id284 . -4) (undo-tree-id285 . -4) (undo-tree-id286 . -4) (undo-tree-id287 . -4) (undo-tree-id288 . -4) (undo-tree-id289 . -4) (undo-tree-id290 . -4) (undo-tree-id291 . -4) (undo-tree-id292 . -4) (undo-tree-id293 . -4) (undo-tree-id294 . -4) (undo-tree-id295 . -4) (undo-tree-id296 . -4) (undo-tree-id297 . -4) 1474 (1470 . 1474)) nil (26361 6679 112643 831000) 0 nil])
nil
([nil nil ((911 . 912) (t 26361 6679 159948 15000)) nil (26361 6686 735903 315000) 0 nil])
([nil nil ((#("	s.get_data();" 0 11 (fontified t) 11 12 (face (rainbow-delimiters-depth-5-face) fontified t) 12 13 (face (rainbow-delimiters-depth-5-face) fontified t) 13 14 (fontified t)) . 929) (undo-tree-id319 . -10) (undo-tree-id320 . -10) (undo-tree-id321 . -10) (undo-tree-id322 . -10) (undo-tree-id323 . -10) (undo-tree-id324 . -10) (undo-tree-id325 . -10) (undo-tree-id326 . -10) (undo-tree-id327 . -10) (undo-tree-id328 . -10) (undo-tree-id329 . -10) (undo-tree-id330 . -10) (undo-tree-id331 . -10) (undo-tree-id332 . -10) (undo-tree-id333 . -10) (undo-tree-id334 . -10) (undo-tree-id335 . -10) (undo-tree-id336 . -10) (undo-tree-id337 . -10) (undo-tree-id338 . -10) (undo-tree-id339 . -10) (undo-tree-id340 . -10) (undo-tree-id341 . -10) (undo-tree-id342 . -10) (undo-tree-id343 . -10) (undo-tree-id344 . -10) (undo-tree-id345 . -10) (undo-tree-id346 . -10) (undo-tree-id347 . -10) (undo-tree-id348 . -10) (undo-tree-id349 . -10) (undo-tree-id350 . -10) (undo-tree-id351 . -10) (undo-tree-id352 . -10) (undo-tree-id353 . -10) (undo-tree-id354 . -7) (undo-tree-id355 . -7) (undo-tree-id356 . -7) (undo-tree-id357 . -7) (undo-tree-id358 . -7) (undo-tree-id359 . -7) (undo-tree-id360 . -7) (undo-tree-id361 . -7) (undo-tree-id362 . -7) (undo-tree-id363 . -7) (undo-tree-id364 . -7) (undo-tree-id365 . -7) (undo-tree-id366 . -7) (undo-tree-id367 . -7) (undo-tree-id368 . -7) (undo-tree-id369 . -7) (undo-tree-id370 . -7) (undo-tree-id371 . -7) (undo-tree-id372 . -7) (undo-tree-id373 . -7) (undo-tree-id374 . -7) (undo-tree-id375 . -6) (undo-tree-id376 . -6) (undo-tree-id377 . -6) (undo-tree-id378 . -6) (undo-tree-id379 . -6) (undo-tree-id380 . -6) (undo-tree-id381 . -6) (undo-tree-id382 . -6) (undo-tree-id383 . -6) (undo-tree-id384 . -6) (undo-tree-id385 . -6) (undo-tree-id386 . -6) (undo-tree-id387 . -6) (undo-tree-id388 . -6) (undo-tree-id389 . -6) (undo-tree-id390 . -6) (undo-tree-id391 . -6) (undo-tree-id392 . -6) (undo-tree-id393 . -6) (undo-tree-id394 . -6) (undo-tree-id395 . -6) (undo-tree-id396 . -3) (undo-tree-id397 . -3) (undo-tree-id398 . -3) (undo-tree-id399 . -3) (undo-tree-id400 . -3) (undo-tree-id401 . -3) (undo-tree-id402 . -3) (undo-tree-id403 . -3) (undo-tree-id404 . -3) (undo-tree-id405 . -3) (undo-tree-id406 . -3) (undo-tree-id407 . -3) (undo-tree-id408 . -3) (undo-tree-id409 . -3) (undo-tree-id410 . -3) (undo-tree-id411 . -3) (undo-tree-id412 . -3) (undo-tree-id413 . -3) (undo-tree-id414 . -3) (undo-tree-id415 . -3) (undo-tree-id416 . -3) (undo-tree-id417 . -3) (undo-tree-id418 . -3) (undo-tree-id419 . -3) (undo-tree-id420 . -3) (undo-tree-id421 . -3) (undo-tree-id422 . -3) (undo-tree-id423 . -3) (undo-tree-id424 . -2) (undo-tree-id425 . -2) (undo-tree-id426 . -2) (undo-tree-id427 . -2) (undo-tree-id428 . -2) (undo-tree-id429 . -2) (undo-tree-id430 . -2) (undo-tree-id431 . -2) (undo-tree-id432 . -2) (undo-tree-id433 . -2) (undo-tree-id434 . -2) (undo-tree-id435 . -2) (undo-tree-id436 . -2) (undo-tree-id437 . -2) (undo-tree-id438 . -2) (undo-tree-id439 . -2) (undo-tree-id440 . -2) (undo-tree-id441 . -2) (undo-tree-id442 . -2) (undo-tree-id443 . -2) (undo-tree-id444 . -2) (undo-tree-id445 . -2) (undo-tree-id446 . -2) (undo-tree-id447 . -2) (undo-tree-id448 . -2) (undo-tree-id449 . -2) (undo-tree-id450 . -2) (undo-tree-id451 . -2) (undo-tree-id452 . -2) (undo-tree-id453 . -2) (undo-tree-id454 . -2) (undo-tree-id455 . -2) (undo-tree-id456 . -2) (undo-tree-id457 . -2) (undo-tree-id458 . -2) (undo-tree-id459 . -2) (undo-tree-id460 . -2) (undo-tree-id461 . -2) (undo-tree-id462 . -2) (undo-tree-id463 . -2) (undo-tree-id464 . -2) (undo-tree-id465 . -2) (undo-tree-id466 . -2) (undo-tree-id467 . -2) (undo-tree-id468 . -2) (undo-tree-id469 . -2) (undo-tree-id470 . -2) (undo-tree-id471 . -2) (undo-tree-id472 . -2) (undo-tree-id473 . -2) (undo-tree-id474 . -2) (undo-tree-id475 . -2) (undo-tree-id476 . -2) (undo-tree-id477 . -2) (undo-tree-id478 . -2) (undo-tree-id479 . -2) (undo-tree-id480 . -2) (undo-tree-id481 . -2) (undo-tree-id482 . -2) (undo-tree-id483 . -2) (undo-tree-id484 . -2) (undo-tree-id485 . -2) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -14) (t 26361 6686 751609 297000)) nil (26361 6728 402471 5000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -932) (undo-tree-id317 . -1) (#("e" 0 1 (fontified t)) . -933) (undo-tree-id318 . -1) 934 (929 . 934)) nil (26361 6728 402049 976000) 0 nil])
([nil nil ((nil rear-nonsticky nil 955 . 956) (nil fontified nil 932 . 956) (932 . 956) 931) nil (26361 6728 402047 929000) 0 nil])
([nil nil ((957 . 958) (956 . 958)) nil (26361 6728 402046 736000) 0 nil])
([nil nil ((959 . 960)) nil (26361 6728 402045 891000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . 957) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1)) nil (26361 6728 402042 372000) 0 nil])
([nil nil ((1001 . 1004) (1000 . 1003) (999 . 1001) (998 . 999) (t 26361 6728 439917 793000)) nil (26361 6917 543061 506000) 0 nil])
([nil nil ((978 . 980) (#("i" 0 1 (fontified t)) . -978) (undo-tree-id581 . -1) (undo-tree-id582 . -1) 979 (978 . 979)) nil (26361 6917 543060 929000) 0 nil])
([nil nil ((979 . 980) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -979) (undo-tree-id580 . -1) 980) nil (26361 6917 543059 706000) 0 nil])
([nil nil ((#("int " 0 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face c-type c-decl-id-start fontified t) 3 4 (fontified t)) . 989) (undo-tree-id579 . -3)) nil (26361 6917 543058 952000) 0 nil])
([nil nil ((989 . 991)) nil (26361 6917 543058 236000) 0 nil])
([nil nil ((1001 . 1004) (#("	 " 0 2 (fontified nil)) . -1001) (undo-tree-id578 . -2) (#(" " 0 1 (fontified t)) . 1003)) nil (26361 6917 543057 531000) 0 nil])
([nil nil ((1001 . 1004) (#("	 " 0 2 (fontified nil)) . -1001) (undo-tree-id577 . -2) (#(" " 0 1 (fontified t)) . 1003)) nil (26361 6917 543056 726000) 0 nil])
([nil nil ((1001 . 1004) (#("	 " 0 2 (fontified nil)) . -1001) (undo-tree-id516 . -2) (undo-tree-id517 . -2) (undo-tree-id518 . -2) (undo-tree-id519 . -2) (undo-tree-id520 . -2) (undo-tree-id521 . -2) (undo-tree-id522 . -2) (undo-tree-id523 . -2) (undo-tree-id524 . -2) (undo-tree-id525 . -2) (undo-tree-id526 . -2) (undo-tree-id527 . -2) (undo-tree-id528 . -2) (undo-tree-id529 . -2) (undo-tree-id530 . -2) (undo-tree-id531 . -2) (undo-tree-id532 . -2) (undo-tree-id533 . -2) (undo-tree-id534 . -2) (undo-tree-id535 . -2) (undo-tree-id536 . -2) (undo-tree-id537 . -2) (undo-tree-id538 . -2) (undo-tree-id539 . -2) (undo-tree-id540 . -2) (undo-tree-id541 . -2) (undo-tree-id542 . -2) (undo-tree-id543 . -2) (undo-tree-id544 . -2) (undo-tree-id545 . -2) (undo-tree-id546 . -2) (undo-tree-id547 . -2) (undo-tree-id548 . -2) (undo-tree-id549 . -2) (undo-tree-id550 . -2) (undo-tree-id551 . -2) (undo-tree-id552 . -2) (undo-tree-id553 . -2) (undo-tree-id554 . -2) (undo-tree-id555 . -2) (undo-tree-id556 . -2) (undo-tree-id557 . -2) (undo-tree-id558 . -2) (undo-tree-id559 . -2) (undo-tree-id560 . -2) (undo-tree-id561 . -2) (undo-tree-id562 . -2) (undo-tree-id563 . -2) (undo-tree-id564 . -2) (undo-tree-id565 . -2) (undo-tree-id566 . -2) (undo-tree-id567 . -2) (undo-tree-id568 . -2) (undo-tree-id569 . -2) (undo-tree-id570 . -2) (undo-tree-id571 . -2) (undo-tree-id572 . -2) (undo-tree-id573 . -2) (undo-tree-id574 . -2) (undo-tree-id575 . -2) (undo-tree-id576 . -2) (#(" " 0 1 (fontified t)) . 1003)) nil (26361 6917 543054 775000) 0 nil])
([nil nil ((1016 . 1017) (1013 . 1016) (1010 . 1013) (1009 . 1010) (#("	" 0 1 (fontified nil)) . 1008) (undo-tree-id515 . -1) (1007 . 1010)) nil (26361 6917 543022 212000) 0 nil])
([nil nil ((1001 . 1004) (#("	 " 0 2 (fontified nil)) . -1001) (undo-tree-id615 . -2) (#(" " 0 1 (fontified t)) . 1003) (t 26361 6917 554914 885000)) nil (26361 6935 977828 548000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1005 . 1006) (#("
" 0 1 (fontified nil)) . -1061) (1004 . 1062) 1003) nil (26361 6935 977827 384000) 0 nil])
([nil nil ((#("INFO" 0 4 (fontified t)) . 1013) (undo-tree-id613 . -3) (undo-tree-id614 . -4)) nil (26361 6935 977826 640000) 0 nil])
([nil nil ((1006 . 1018) (#("RCLCPP_E" 0 8 (fontified nil)) . 1006) (1006 . 1014) (#("RCLCPP_ERROR(logger, ...)" 0 25 (fontified nil)) . -1006) (undo-tree-id583 . -25) (1006 . 1031) (#("RCLCPP_ER" 0 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t)) . -1006) (undo-tree-id584 . -7) (undo-tree-id585 . -7) (undo-tree-id586 . -9) (undo-tree-id587 . -9) (undo-tree-id588 . -9) (undo-tree-id589 . -9) (undo-tree-id590 . -9) (undo-tree-id591 . -9) (undo-tree-id592 . -9) (undo-tree-id593 . -9) (undo-tree-id594 . -9) (undo-tree-id595 . -9) (undo-tree-id596 . -9) (undo-tree-id597 . -9) (undo-tree-id598 . -9) (undo-tree-id599 . -9) (undo-tree-id600 . -9) (undo-tree-id601 . -9) (undo-tree-id602 . -9) (undo-tree-id603 . -9) (undo-tree-id604 . -9) (undo-tree-id605 . -9) (undo-tree-id606 . -9) (undo-tree-id607 . -9) (undo-tree-id608 . -9) (undo-tree-id609 . -9) (undo-tree-id610 . -9) (undo-tree-id611 . -9) (undo-tree-id612 . -9) 1015 (1013 . 1015)) nil (26361 6935 977822 500000) 0 nil])
([nil nil ((#("	  
" 0 3 (fontified t) 3 4 (fontified t)) . 1001) (undo-tree-id748 . -3) (undo-tree-id749 . -2) 1003 (t 26361 6936 16595 637000)) nil (26361 7044 497944 42000) 0 nil])
([nil nil ((1001 . 1004) (#("	" 0 1 (rear-nonsticky t fontified t)) . 1001) 1003) nil (26361 7044 497942 507000) 0 nil])
([nil nil ((#("sent " 0 5 (face font-lock-string-face fontified t)) . 1038) (undo-tree-id747 . -4)) nil (26361 7044 497941 992000) 0 nil])
([nil nil ((#("10000 " 0 6 (face font-lock-string-face fontified t)) . 1038) (undo-tree-id746 . -5)) nil (26361 7044 497941 249000) 0 nil])
([nil nil ((#("messages" 0 8 (face font-lock-string-face fontified t)) . 1038) (undo-tree-id745 . -7)) nil (26361 7044 497940 691000) 0 nil])
([nil nil ((1049 . 1063) (#("a" 0 1 (face font-lock-string-face fontified t)) . -1049) (undo-tree-id696 . -1) 1050 (1038 . 1050) (#("
" 0 1 (face font-lock-warning-face fontified t)) . -1038) (undo-tree-id697 . -1) (#(" " 0 1 (fontified t)) . -1039) (undo-tree-id698 . -1) (#(" " 0 1 (fontified t)) . -1040) (undo-tree-id699 . -1) (#(" " 0 1 (fontified t)) . -1041) (undo-tree-id700 . -1) (#(" " 0 1 (fontified t)) . -1042) (undo-tree-id701 . -1) (#(" " 0 1 (fontified t)) . -1043) (undo-tree-id702 . -1) (#(" " 0 1 (fontified t)) . -1044) (undo-tree-id703 . -1) (#(" " 0 1 (fontified t)) . -1045) (undo-tree-id704 . -1) (#(" " 0 1 (fontified nil)) . -1046) (undo-tree-id705 . -1) (#("	" 0 1 (fontified nil)) . 1047) (undo-tree-id706 . -1) (nil face font-lock-warning-face 1039 . 1047) (nil fontified t 1039 . 1047) (1039 . 1047) 1040 (#(" " 0 1 (fontified t)) . -1040) (undo-tree-id707 . -1) (#(" " 0 1 (fontified t)) . -1041) (undo-tree-id708 . -1) (#(" " 0 1 (fontified t)) . -1042) (undo-tree-id709 . -1) (#(" " 0 1 (fontified t)) . -1043) (undo-tree-id710 . -1) (#(" " 0 1 (fontified t)) . -1044) (undo-tree-id711 . -1) (#(" " 0 1 (fontified t)) . -1045) (undo-tree-id712 . -1) (#(" " 0 1 (fontified t)) . -1046) (undo-tree-id713 . -1) (#(" " 0 1 (fontified nil)) . -1047) (undo-tree-id714 . -1) (#("	" 0 1 (fontified nil)) . 1048) (undo-tree-id715 . -1) (1040 . 1048) 1041 (#(" " 0 1 (fontified t)) . -1041) (undo-tree-id716 . -1) (#(" " 0 1 (fontified t)) . -1042) (undo-tree-id717 . -1) (#(" " 0 1 (fontified t)) . -1043) (undo-tree-id718 . -1) (#(" " 0 1 (fontified t)) . -1044) (undo-tree-id719 . -1) (#(" " 0 1 (fontified t)) . -1045) (undo-tree-id720 . -1) (#(" " 0 1 (fontified t)) . -1046) (undo-tree-id721 . -1) (#(" " 0 1 (fontified t)) . -1047) (undo-tree-id722 . -1) 1048 (1038 . 1048) (#("[" 0 1 (face font-lock-string-face fontified nil)) . -1038) (undo-tree-id723 . -1) (#("]" 0 1 (face font-lock-string-face fontified t)) . 1039) (#("E" 0 1 (face font-lock-string-face fontified t)) . -1039) (undo-tree-id724 . -1) (#("R" 0 1 (face font-lock-string-face fontified t)) . -1040) (undo-tree-id725 . -1) 1041 (1040 . 1041) (#("O" 0 1 (face font-lock-string-face fontified t)) . -1040) (undo-tree-id726 . -1) (#("O" 0 1 (face font-lock-string-face fontified t)) . -1041) (undo-tree-id727 . -1) 1042 (1039 . 1042) (1038 . 1040) (#("S" 0 1 (face font-lock-string-face fontified t)) . -1038) (undo-tree-id728 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1039) (undo-tree-id729 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -1040) (undo-tree-id730 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1041) (undo-tree-id731 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1042) (undo-tree-id732 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1043) (undo-tree-id733 . -1) (#("B" 0 1 (face font-lock-string-face fontified t)) . -1044) (undo-tree-id734 . -1) (#("y" 0 1 (face font-lock-string-face fontified t)) . -1045) (undo-tree-id735 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1046) (undo-tree-id736 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1047) (undo-tree-id737 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1048) (undo-tree-id738 . -1) (#("J" 0 1 (face font-lock-string-face fontified t)) . -1049) (undo-tree-id739 . -1) (#("u" 0 1 (face font-lock-string-face fontified t)) . -1050) (undo-tree-id740 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -1051) (undo-tree-id741 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1052) (undo-tree-id742 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1053) (undo-tree-id743 . -1) (#("F" 0 1 (face font-lock-string-face fontified t)) . -1054) (undo-tree-id744 . -1) 1055 (1038 . 1055)) nil (26361 7044 497933 95000) 0 nil])
([nil nil ((#("	  " 0 3 (fontified t)) . -1067) (undo-tree-id695 . -3) 1070 (1066 . 1070)) nil (26361 7044 497913 372000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1067) (undo-tree-id694 . 1)) nil (26361 7044 497912 649000) 0 nil])
([nil nil ((1081 . 1085) (1080 . 1081) (1079 . 1080) (1078 . 1080) (1075 . 1078) (1074 . 1075) (#("else" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 3 (face font-lock-keyword-face fontified nil) 3 4 (face font-lock-keyword-face fontified nil)) . 1074) (undo-tree-id693 . -4) (1070 . 1074) 1074 (1069 . 1074)) nil (26361 7044 497911 938000) 0 nil])
([nil nil ((1086 . 1087)) nil (26361 7044 497911 195000) 0 nil])
([nil nil ((1084 . 1085)) nil (26361 7044 497910 969000) 0 nil])
([nil nil ((1090 . 1093) (1089 . 1092) (1088 . 1090) (1087 . 1088) (#(" " 0 1 (fontified t)) . -1087) (undo-tree-id691 . -1) (#(" " 0 1 (fontified t)) . -1088) (undo-tree-id692 . -1) 1089 (1088 . 1089)) nil (26361 7044 497910 296000) 0 nil])
([nil nil ((#("	  RCLCPP_ERROR(this->get_logger(), \"Start Byte Search Ongoing\");
" 0 3 (fontified t) 3 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-6-face) fontified t) 16 20 (face font-lock-keyword-face fontified t) 20 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-7-face) fontified t) 33 34 (face (rainbow-delimiters-depth-7-face) fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 37 (face font-lock-string-face fontified t) 37 38 (face font-lock-string-face fontified t) 38 39 (face font-lock-string-face fontified t) 39 40 (face font-lock-string-face fontified t) 40 41 (face font-lock-string-face fontified t) 41 42 (face font-lock-string-face fontified t) 42 43 (face font-lock-string-face fontified t) 43 44 (face font-lock-string-face fontified t) 44 45 (face font-lock-string-face fontified t) 45 46 (face font-lock-string-face fontified t) 46 47 (face font-lock-string-face fontified t) 47 48 (face font-lock-string-face fontified t) 48 49 (face font-lock-string-face fontified t) 49 50 (face font-lock-string-face fontified t) 50 51 (face font-lock-string-face fontified t) 51 52 (face font-lock-string-face fontified t) 52 53 (face font-lock-string-face fontified t) 53 54 (face font-lock-string-face fontified t) 54 55 (face font-lock-string-face fontified t) 55 56 (face font-lock-string-face fontified t) 56 57 (face font-lock-string-face fontified t) 57 58 (face font-lock-string-face fontified t) 58 59 (face font-lock-string-face fontified t) 59 60 (face font-lock-string-face fontified t) 60 61 (face font-lock-string-face fontified t) 61 62 (face font-lock-string-face fontified t) 62 63 (face font-lock-string-face fontified t) 63 64 (face (rainbow-delimiters-depth-6-face) fontified t) 64 65 (fontified t) 65 66 (fontified t)) . 1001) (undo-tree-id689 . -65) (undo-tree-id690 . -2) 1003) nil (26361 7044 497908 898000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1034 . 1035) (#("
" 0 1 (fontified nil)) . -1097) (1031 . 1098)) nil (26361 7044 497907 402000) 0 nil])
([nil nil ((#("if (e == -1 ) {
	} else if (e == -2) {
	  
	}" 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-5-face) fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 8 (fontified t) 8 12 (fontified t) 12 13 (face (rainbow-delimiters-depth-5-face) fontified t) 13 14 (fontified t) 14 15 (face (rainbow-delimiters-depth-5-face) fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-5-face) fontified t) 18 19 (fontified t) 19 23 (face font-lock-keyword-face fontified t) 23 24 (fontified t) 24 25 (face font-lock-keyword-face fontified t) 25 26 (face font-lock-keyword-face fontified t) 26 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-5-face) fontified t) 28 29 (fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-5-face) fontified t) 36 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-5-face) fontified t) 38 39 (fontified t) 39 44 (fontified t) 44 45 (face (rainbow-delimiters-depth-5-face) fontified t)) . 985) (undo-tree-id684 . -44) (undo-tree-id685 . -44) (undo-tree-id686 . 3) (undo-tree-id687 . -44) (undo-tree-id688 . -30)) nil (26361 7044 497906 519000) 0 nil])
([nil nil ((1007 . 1011) (998 . 999) (#("	  " 0 3 (fontified nil)) . 998) (1008 . 1009) (1006 . 1008) (1003 . 1006) (1001 . 1003) (#("a" 0 1 (fontified t)) . -1001) (undo-tree-id670 . -1) (undo-tree-id671 . -1) 1002 (1001 . 1002) (apply yas--snippet-revive 985 1008 #s(yas--snippet nil (#s(yas--field 1 993 994 nil nil nil t #s(yas--exit 1001 nil))) #s(yas--exit 1001 nil) 2 nil #s(yas--field 1 993 994 nil nil nil t #s(yas--exit 1001 nil)) nil nil)) (993 . 994) (#("e" 0 1 (fontified nil)) . 993) (993 . 994) (#("e" 0 1 (fontified t)) . -993) (undo-tree-id672 . -1) (undo-tree-id673 . -1) 994 (#("condition" 0 9 (fontified nil)) . 994) (993 . 994) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 993 994 nil nil nil t #s(yas--exit 1001 nil))) #s(yas--exit 1001 nil) 2 nil #s(yas--field 1 993 994 nil nil nil t #s(yas--exit 1001 nil)) nil nil)) (985 . 1016) (#("switch (${1:condition}) {
	  $0
	    }" 0 38 (fontified nil)) . 985) (1017 . 1022) (1011 . 1014) (985 . 1015) (#("swi" 0 3 (fontified nil)) . 985) (985 . 988) (#("switch (condition) {cases}" 0 26 (fontified nil)) . -985) (undo-tree-id674 . -26) (985 . 1011) (#("swit" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -985) (undo-tree-id675 . -4) (undo-tree-id676 . -4) 989 (987 . 989) (985 . 987) (984 . 985) (#("	" 0 1 (fontified t)) . 984) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1)) nil (26361 7044 497899 285000) 0 nil])
([nil nil ((#("	  RCLCPP_ERROR(this->get_logger(), \"Start Byte Search Ongoing\");
" 0 2 (fontified t) 2 3 (fontified t rear-nonsticky t) 3 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-5-face) fontified t) 16 20 (face font-lock-keyword-face fontified t) 20 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-6-face) fontified t) 33 34 (face (rainbow-delimiters-depth-6-face) fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 37 (face font-lock-string-face fontified t) 37 38 (face font-lock-string-face fontified t) 38 39 (face font-lock-string-face fontified t) 39 40 (face font-lock-string-face fontified t) 40 41 (face font-lock-string-face fontified t) 41 42 (face font-lock-string-face fontified t) 42 43 (face font-lock-string-face fontified t) 43 44 (face font-lock-string-face fontified t) 44 45 (face font-lock-string-face fontified t) 45 46 (face font-lock-string-face fontified t) 46 47 (face font-lock-string-face fontified t) 47 48 (face font-lock-string-face fontified t) 48 49 (face font-lock-string-face fontified t) 49 50 (face font-lock-string-face fontified t) 50 51 (face font-lock-string-face fontified t) 51 52 (face font-lock-string-face fontified t) 52 53 (face font-lock-string-face fontified t) 53 54 (face font-lock-string-face fontified t) 54 55 (face font-lock-string-face fontified t) 55 56 (face font-lock-string-face fontified t) 56 57 (face font-lock-string-face fontified t) 57 58 (face font-lock-string-face fontified t) 58 59 (face font-lock-string-face fontified t) 59 60 (face font-lock-string-face fontified t) 60 61 (face font-lock-string-face fontified t) 61 62 (face font-lock-string-face fontified t) 62 63 (face font-lock-string-face fontified t) 63 64 (face (rainbow-delimiters-depth-5-face) fontified t) 64 65 (fontified t) 65 66 (fontified t)) . 1020) (undo-tree-id668 . -65) (undo-tree-id669 . -2) 1022) nil (26361 7044 497878 52000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -1077) (1011 . 1078) 1010) nil (26361 7044 497876 111000) 0 nil])
([nil nil ((#("	  
" 0 3 (fontified t) 3 4 (fontified t)) . 1008) (undo-tree-id666 . -3) (undo-tree-id667 . -2) 1010) nil (26361 7044 497874 812000) 0 nil])
([nil nil ((1077 . 1082) (#("r" 0 1 (fontified t)) . -1077) (undo-tree-id664 . -1) (undo-tree-id665 . -1) 1078 (1077 . 1078) (1073 . 1077)) nil (26361 7044 497870 582000) 0 nil])
([nil nil ((1082 . 1083)) nil (26361 7044 497868 282000) 0 nil])
([nil nil ((1094 . 1098) (1085 . 1086) (#("	  " 0 3 (fontified nil)) . 1085) (1095 . 1096) (1088 . 1095) (1085 . 1088) (#("	  " 0 3 (fontified nil)) . 1084) (undo-tree-id663 . -3) (1083 . 1088)) nil (26361 7044 497867 353000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -1164) (1098 . 1165) 1097) nil (26361 7044 497865 797000) 0 nil])
([nil nil ((#("	  
" 0 3 (fontified t) 3 4 (fontified t)) . 1095) (undo-tree-id661 . -3) (undo-tree-id662 . -2) 1097) nil (26361 7044 497864 534000) 0 nil])
([nil nil ((#("Start " 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t)) . 1132) (undo-tree-id659 . -5) (undo-tree-id660 . -6)) nil (26361 7044 497862 264000) 0 nil])
([nil nil ((#("Byte " 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t)) . 1132) (undo-tree-id657 . -4) (undo-tree-id658 . -5)) nil (26361 7044 497860 284000) 0 nil])
([nil nil ((#("Search " 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t) 6 7 (face font-lock-string-face fontified t)) . 1132) (undo-tree-id655 . -6) (undo-tree-id656 . -7)) nil (26361 7044 497856 180000) 0 nil])
([nil nil ((#("Ongoing" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t) 6 7 (face font-lock-string-face fontified t)) . 1132) (undo-tree-id653 . -6) (undo-tree-id654 . -7)) nil (26361 7044 497853 468000) 0 nil])
([nil nil ((1132 . 1150)) nil (26361 7044 497851 8000) 0 nil])
([nil nil ((#("	  " 0 3 (fontified t)) . -1154) (undo-tree-id629 . -3) (undo-tree-id630 . -3) (undo-tree-id631 . -3) (undo-tree-id632 . -3) (undo-tree-id633 . -3) (undo-tree-id634 . -3) (undo-tree-id635 . -3) (undo-tree-id636 . -3) (undo-tree-id637 . -3) (undo-tree-id638 . -3) (undo-tree-id639 . -3) (undo-tree-id640 . -3) (undo-tree-id641 . -3) (undo-tree-id642 . -3) (undo-tree-id643 . -3) (undo-tree-id644 . -3) (undo-tree-id645 . -3) (undo-tree-id646 . -3) (undo-tree-id647 . -3) (undo-tree-id648 . -3) (undo-tree-id649 . -3) (undo-tree-id650 . -3) (undo-tree-id651 . -3) (undo-tree-id652 . -3) 1157 (1153 . 1157)) nil (26361 7044 497849 887000) 0 nil])
([nil nil ((1157 . 1162) (1154 . 1157)) nil (26361 7044 497626 846000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -1162) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) 1163 (1162 . 1163)) nil (26361 7044 497626 1000) 0 nil])
([nil nil ((1162 . 1163)) nil (26361 7044 497609 988000) 0 nil])
([nil nil ((1176 . 1182) (apply yas--snippet-revive 1168 1176 #s(yas--snippet nil nil nil 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 3 nil nil nil nil)) (1168 . 1176) (#("default:" 0 8 (fontified nil)) . 1168) (1168 . 1176) (#("def" 0 3 (fontified nil)) . 1168) (1168 . 1171) (#("default:" 0 8 (fontified nil)) . -1168) (undo-tree-id1139 . -8) (1168 . 1176) (#("def" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1168) (undo-tree-id1140 . -3) (undo-tree-id1141 . -3) 1171 (1168 . 1171) (1165 . 1168) (#("	  " 0 3 (fontified nil)) . 1164) (undo-tree-id1142 . -3) (1163 . 1168) (t 26361 7044 537117 196000)) nil (26361 7074 816891 897000) 0 nil])
([nil nil ((1165 . 1166) (#("	  " 0 3 (fontified t)) . 1165) (undo-tree-id1138 . -3) 1169) nil (26361 7074 816888 807000) 0 nil])
([nil nil ((1175 . 1178) (#("	 " 0 2 (fontified nil)) . -1175) (undo-tree-id1109 . -2) (undo-tree-id1110 . -2) (undo-tree-id1111 . -2) (undo-tree-id1112 . -2) (undo-tree-id1113 . -2) (undo-tree-id1114 . -2) (undo-tree-id1115 . -2) (undo-tree-id1116 . -2) (undo-tree-id1117 . -2) (undo-tree-id1118 . -2) (undo-tree-id1119 . -2) (undo-tree-id1120 . -2) (undo-tree-id1121 . -2) (undo-tree-id1122 . -2) (undo-tree-id1123 . -2) (undo-tree-id1124 . -2) (undo-tree-id1125 . -2) (undo-tree-id1126 . -2) (undo-tree-id1127 . -2) (undo-tree-id1128 . -2) (undo-tree-id1129 . -2) (undo-tree-id1130 . -2) (undo-tree-id1131 . -2) (undo-tree-id1132 . -2) (undo-tree-id1133 . -2) (undo-tree-id1134 . -2) (undo-tree-id1135 . -2) (undo-tree-id1136 . -2) (undo-tree-id1137 . -2) (#("   " 0 3 (fontified t)) . 1177)) nil (26361 7074 816887 127000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -1237) (1178 . 1238) 1177) nil (26361 7074 816865 859000) 0 nil])
([nil nil ((#("	  
" 0 3 (fontified t) 3 4 (fontified t)) . 1175) (undo-tree-id1072 . -3) (undo-tree-id1073 . -2) (undo-tree-id1074 . -2) (undo-tree-id1075 . -2) (undo-tree-id1076 . -2) (undo-tree-id1077 . -2) (undo-tree-id1078 . -2) (undo-tree-id1079 . -2) (undo-tree-id1080 . -2) (undo-tree-id1081 . -2) (undo-tree-id1082 . -2) (undo-tree-id1083 . -2) (undo-tree-id1084 . -2) (undo-tree-id1085 . -2) (undo-tree-id1086 . -2) (undo-tree-id1087 . -2) (undo-tree-id1088 . -2) (undo-tree-id1089 . -2) (undo-tree-id1090 . -2) (undo-tree-id1091 . -2) (undo-tree-id1092 . -2) (undo-tree-id1093 . -2) (undo-tree-id1094 . -2) (undo-tree-id1095 . -2) (undo-tree-id1096 . -2) (undo-tree-id1097 . -2) (undo-tree-id1098 . -2) (undo-tree-id1099 . -2) (undo-tree-id1100 . -2) (undo-tree-id1101 . -2) (undo-tree-id1102 . -2) (undo-tree-id1103 . -2) (undo-tree-id1104 . -2) (undo-tree-id1105 . -2) (undo-tree-id1106 . -2) (undo-tree-id1107 . -2) (undo-tree-id1108 . -4) 1177) nil (26361 7074 816864 764000) 0 nil])
([nil nil ((#("Corrupt " 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t) 6 7 (face font-lock-string-face fontified t) 7 8 (face font-lock-string-face fontified t)) . 1212) (undo-tree-id1070 . -7) (undo-tree-id1071 . -8)) nil (26361 7074 816848 10000) 0 nil])
([nil nil ((#("Data " 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t)) . 1212) (undo-tree-id1068 . -4) (undo-tree-id1069 . -5)) nil (26361 7074 816846 858000) 0 nil])
([nil nil ((#("Found" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t)) . 1212) (undo-tree-id1066 . -4) (undo-tree-id1067 . -5)) nil (26361 7074 816845 566000) 0 nil])
([nil nil ((1233 . 1236) (#("p" 0 1 (face font-lock-string-face fontified t)) . -1233) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -1234) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (#("w" 0 1 (face font-lock-string-face fontified t)) . -1235) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) 1236 (1230 . 1236) (#("W" 0 1 (face font-lock-string-face fontified t)) . -1230) (undo-tree-id1064 . -1) 1231 (1230 . 1231) (#("S" 0 1 (face font-lock-string-face fontified t)) . -1230) (undo-tree-id1065 . -1) 1231 (1218 . 1231) (1212 . 1218)) nil (26361 7074 816840 288000) 0 nil])
([nil nil ((1243 . 1244) (1242 . 1243) (1237 . 1242) (1236 . 1237)) nil (26361 7074 816657 425000) 0 nil])
([nil nil ((1244 . 1246)) nil (26361 7074 816656 204000) 0 nil])
([nil nil ((1249 . 1250) (#("d" 0 1 (fontified t)) . -1249) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) 1250 (1248 . 1250) (1247 . 1248)) nil (26361 7074 816651 753000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1260) (t 26361 7074 856803 278000)) nil (26361 7125 91722 640000) 0 nil])
([nil nil ((#("test" 0 4 (face font-lock-function-name-face fontified t)) . 877) (undo-tree-id1143 . -3)) nil (26361 7125 91714 411000) 0 nil])
([nil nil ((877 . 885)) nil (26361 7125 91705 119000) 0 nil])
([nil nil ((#("test" 0 4 (fontified t)) . 846) (undo-tree-id1472 . -3) (undo-tree-id1473 . -4) (t 26361 7125 105357 179000)) nil (26361 7132 365310 415000) 0 nil])
([nil nil ((apply yas--snippet-revive 846 856 #s(yas--snippet nil nil nil 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil nil nil)) (846 . 856) (#("get_data()" 0 10 (fontified nil)) . 846) (846 . 856) (#("get" 0 3 (fontified nil)) . 846) (846 . 849) (#("get_data()" 0 10 (fontified nil)) . -846) (undo-tree-id1379 . -10) (846 . 856) (#("get_data" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . -846) (undo-tree-id1380 . -7) (undo-tree-id1381 . -7) (undo-tree-id1382 . -7) (undo-tree-id1383 . -7) (undo-tree-id1384 . -7) (undo-tree-id1385 . -7) (undo-tree-id1386 . -7) (undo-tree-id1387 . -7) (undo-tree-id1388 . -7) (undo-tree-id1389 . -7) (undo-tree-id1390 . -7) (undo-tree-id1391 . -8) (undo-tree-id1392 . -8) (undo-tree-id1393 . -8) (undo-tree-id1394 . -8) (undo-tree-id1395 . -8) (undo-tree-id1396 . -8) (undo-tree-id1397 . -8) (undo-tree-id1398 . -8) (undo-tree-id1399 . -8) (undo-tree-id1400 . -8) (undo-tree-id1401 . -8) (undo-tree-id1402 . -8) (undo-tree-id1403 . -8) (undo-tree-id1404 . -8) (undo-tree-id1405 . -8) (undo-tree-id1406 . -8) (undo-tree-id1407 . -8) (undo-tree-id1408 . -8) (undo-tree-id1409 . -8) (undo-tree-id1410 . -8) (undo-tree-id1411 . -8) (undo-tree-id1412 . -8) (undo-tree-id1413 . -8) (undo-tree-id1414 . -8) (undo-tree-id1415 . -8) (undo-tree-id1416 . -8) (undo-tree-id1417 . -8) (undo-tree-id1418 . -8) (undo-tree-id1419 . -8) (undo-tree-id1420 . -8) (undo-tree-id1421 . -8) (undo-tree-id1422 . -8) (undo-tree-id1423 . -8) (undo-tree-id1424 . -8) (undo-tree-id1425 . -8) (undo-tree-id1426 . -8) (undo-tree-id1427 . -8) (undo-tree-id1428 . -8) (undo-tree-id1429 . -8) (undo-tree-id1430 . -8) (undo-tree-id1431 . -8) (undo-tree-id1432 . -8) (undo-tree-id1433 . -8) (undo-tree-id1434 . -8) (undo-tree-id1435 . -8) (undo-tree-id1436 . -8) (undo-tree-id1437 . -8) (undo-tree-id1438 . -8) (undo-tree-id1439 . -8) (undo-tree-id1440 . -8) (undo-tree-id1441 . -8) (undo-tree-id1442 . -8) (undo-tree-id1443 . -8) (undo-tree-id1444 . -8) (undo-tree-id1445 . -8) (undo-tree-id1446 . -8) (undo-tree-id1447 . -8) (undo-tree-id1448 . -8) (undo-tree-id1449 . -8) (undo-tree-id1450 . -8) (undo-tree-id1451 . -8) (undo-tree-id1452 . -8) (undo-tree-id1453 . -8) (undo-tree-id1454 . -8) (undo-tree-id1455 . -8) (undo-tree-id1456 . -8) (undo-tree-id1457 . -8) (undo-tree-id1458 . -8) (undo-tree-id1459 . -8) (undo-tree-id1460 . -8) (undo-tree-id1461 . -8) (undo-tree-id1462 . -8) (undo-tree-id1463 . -8) (undo-tree-id1464 . -8) (undo-tree-id1465 . -8) (undo-tree-id1466 . -8) (undo-tree-id1467 . -8) (undo-tree-id1468 . -8) (undo-tree-id1469 . -8) (undo-tree-id1470 . -8) (undo-tree-id1471 . -8) 854 (846 . 854)) nil (26361 7132 365307 370000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-6-face) fontified t)) . -854) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-6-face) fontified t)) . -855) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) 856) nil (26361 7132 365237 122000) 0 nil])
([nil nil ((1769 . 1771) (1756 . 1769) (1752 . 1756) (1748 . 1752) (#("    " 0 4 (fontified nil)) . 1747) (undo-tree-id1542 . -4) (1746 . 1752) (t 26361 7132 404299 236000)) nil (26361 7163 970194 407000) 0 nil])
([nil nil ((1771 . 1772)) nil (26361 7163 970193 133000) 0 nil])
([nil nil ((1788 . 1789) (#("d" 0 1 (face font-lock-variable-name-face fontified t)) . -1788) (undo-tree-id1530 . -1) 1789 (1787 . 1789) (nil fontified nil 1770 . 1787) (nil face (rainbow-delimiters-depth-3-face) 1770 . 1787) (1770 . 1787) (#("Co" 0 2 (fontified nil)) . 1770) (nil fontified nil 1770 . 1772) (nil face (rainbow-delimiters-depth-3-face) 1770 . 1772) (1770 . 1772) (#("CommunicationData" 0 17 (fontified nil)) . -1770) (undo-tree-id1531 . -17) (nil fontified nil 1770 . 1787) (nil face (rainbow-delimiters-depth-3-face) 1770 . 1787) (1770 . 1787) (#("Co" 0 1 (fontified t) 1 2 (fontified t)) . -1770) (undo-tree-id1532 . -2) (undo-tree-id1533 . -2) 1772 (1770 . 1772) (#("c" 0 1 (fontified t)) . -1770) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (#("o" 0 1 (fontified t)) . -1771) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (#("m" 0 1 (fontified t)) . -1772) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (#("m" 0 1 (fontified t)) . -1773) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) 1774 (1770 . 1774)) nil (26361 7163 970190 888000) 0 nil])
([nil nil ((1793 . 1799) (1792 . 1798) (1791 . 1793) (1790 . 1791) (#(";" 0 1 (fontified t)) . -1790) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) 1791) nil (26361 7163 970180 405000) 0 nil])
([nil nil ((#("
      geometry_msgs::msg::Twist message = geometry_msgs::msg::Twist();
      

      message.linear.x = c.x;
      message.linear.y = c.y;
      message.linear.z = c.zz;

      message.angular.z = c.omega;


      
      // auto message = std_msgs::msg::String();
      // message.data = \"Hello\";
      times++;
      if (times == 10000){
	times = 0;
	RCLCPP_INFO(this->get_logger(), \"sent 10000 messages\");
      }

      publ->publish(message);
" 0 7 (fontified t) 7 20 (face font-lock-constant-face fontified t) 20 22 (fontified t) 22 25 (face font-lock-constant-face fontified t) 25 27 (fontified t) 27 31 (face font-lock-type-face fontified t) 31 32 (face font-lock-type-face c-type c-decl-id-start fontified t) 32 33 (fontified t) 33 40 (face font-lock-variable-name-face fontified t) 40 43 (fontified t) 43 56 (face font-lock-constant-face fontified t) 56 58 (fontified t) 58 61 (face font-lock-constant-face fontified t) 61 68 (fontified t) 68 69 (face (rainbow-delimiters-depth-4-face) fontified t) 69 70 (face (rainbow-delimiters-depth-4-face) fontified t) 70 216 (fontified t) 216 222 (fontified t c-is-sws t c-in-sws t) 222 223 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 223 225 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 225 265 (face font-lock-comment-face fontified t c-in-sws t) 265 271 (fontified t c-in-sws t) 271 274 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 274 298 (face font-lock-comment-face fontified t c-in-sws t) 298 304 (fontified t c-in-sws t c-is-sws t) 304 305 (fontified t c-is-sws t) 305 319 (fontified t) 319 321 (face font-lock-keyword-face fontified t) 321 322 (fontified t) 322 323 (face (rainbow-delimiters-depth-4-face) fontified t) 323 337 (fontified t) 337 338 (face (rainbow-delimiters-depth-4-face) fontified t) 338 339 (face (rainbow-delimiters-depth-4-face) fontified t) 339 364 (fontified t) 364 365 (face (rainbow-delimiters-depth-5-face) fontified t) 365 369 (face font-lock-keyword-face fontified t) 369 381 (fontified t) 381 382 (face (rainbow-delimiters-depth-6-face) fontified t) 382 383 (face (rainbow-delimiters-depth-6-face) fontified t) 383 385 (fontified t) 385 406 (face font-lock-string-face fontified t) 406 407 (face (rainbow-delimiters-depth-5-face) fontified t) 407 415 (fontified t) 415 416 (face (rainbow-delimiters-depth-4-face) fontified t) 416 437 (fontified t) 437 438 (face (rainbow-delimiters-depth-4-face) fontified t) 438 445 (fontified t) 445 446 (face (rainbow-delimiters-depth-4-face) fontified t) 446 448 (fontified t)) . 1293) (undo-tree-id1616 . -447) (undo-tree-id1617 . -447) (undo-tree-id1618 . -447) (undo-tree-id1619 . -447) 1740 (t 26361 7164 8066 182000)) nil (26361 7187 274845 438000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1793 . 1794) (nil fontified nil 1346 . 1794) (1346 . 1794) 1345) nil (26361 7187 274844 3000) 0 nil])
([nil nil ((1794 . 1800) (#("     " 0 5 (fontified t)) . 1794) (undo-tree-id1615 . -4)) nil (26361 7187 274843 286000) 0 nil])
([nil nil ((1286 . 1292) (#("      " 0 6 (fontified nil)) . 1285) (undo-tree-id1614 . -6) (1291 . 1292) (1285 . 1291)) nil (26361 7187 274842 415000) 0 nil])
([nil nil ((1286 . 1292) (#("     " 0 5 (fontified nil)) . -1286) (undo-tree-id1572 . -5) (undo-tree-id1573 . -5) (undo-tree-id1574 . -5) (undo-tree-id1575 . -5) (undo-tree-id1576 . -5) (undo-tree-id1577 . -5) (undo-tree-id1578 . -5) (undo-tree-id1579 . -5) (undo-tree-id1580 . -5) (undo-tree-id1581 . -5) (undo-tree-id1582 . -5) (undo-tree-id1583 . -5) (undo-tree-id1584 . -5) (undo-tree-id1585 . -5) (undo-tree-id1586 . -5) (undo-tree-id1587 . -5) (undo-tree-id1588 . -5) (undo-tree-id1589 . -5) (undo-tree-id1590 . -5) (undo-tree-id1591 . -5) (undo-tree-id1592 . -5) (undo-tree-id1593 . -5) (undo-tree-id1594 . -5) (undo-tree-id1595 . -5) (undo-tree-id1596 . -5) (undo-tree-id1597 . -5) (undo-tree-id1598 . -5) (undo-tree-id1599 . -5) (undo-tree-id1600 . -5) (undo-tree-id1601 . -5) (undo-tree-id1602 . -5) (undo-tree-id1603 . -5) (undo-tree-id1604 . -5) (undo-tree-id1605 . -5) (undo-tree-id1606 . -5) (undo-tree-id1607 . -5) (undo-tree-id1608 . -5) (undo-tree-id1609 . -5) (undo-tree-id1610 . -5) (undo-tree-id1611 . -5) (undo-tree-id1612 . -5) (undo-tree-id1613 . -5) (#(" " 0 1 (fontified t)) . 1291)) nil (26361 7187 274840 888000) 0 nil])
([nil nil ((apply yas--snippet-revive 1292 1307 #s(yas--snippet nil (#s(yas--field 1 1305 1306 nil nil nil t nil)) nil 5 nil #s(yas--field 1 1305 1306 nil nil nil t nil) nil nil)) (1305 . 1306) (#("c" 0 1 (fontified nil)) . 1305) (undo-tree-id1543 . -1) (1305 . 1306) (#("c" 0 1 (fontified t)) . -1305) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) 1306 (#("CommunicationData c" 0 19 (fontified nil)) . 1306) (undo-tree-id1567 . -19) (1305 . 1306) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1305 1306 nil nil nil t nil)) nil 5 nil #s(yas--field 1 1305 1306 nil nil nil t nil) nil nil)) (1292 . 1325) (#("publish_data(${1:CommunicationData c})" 0 38 (fontified nil)) . 1292) (1292 . 1330) (#("pu" 0 2 (fontified nil)) . 1292) (1292 . 1294) (#("publish_data(CommunicationData c)" 0 33 (fontified nil)) . -1292) (undo-tree-id1568 . -33) (1292 . 1325) (#("pu" 0 1 (fontified t) 1 2 (fontified t)) . -1292) (undo-tree-id1569 . -2) (undo-tree-id1570 . -2) 1294 (1292 . 1294) (1286 . 1292) (#("     " 0 5 (fontified nil)) . -1286) (undo-tree-id1571 . -5) (#(" " 0 1 (fontified t)) . 1291)) nil (26361 7187 274818 508000) 0 nil])
([nil nil ((1307 . 1308)) nil (26361 7187 274794 615000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1540) (t 26361 7187 286911 630000)) nil (26361 7219 800168 265000) 0 nil])
([nil nil ((#("      message.linear.z = c.zz;
" 0 31 (fontified t)) . 1509) (undo-tree-id1620 . -30)) nil (26361 7219 800165 817000) 0 nil])
([nil nil ((1409 . 1410) (t 26361 7219 839717 205000)) nil (26361 7246 97875 500000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1447 . 1448) (#("
" 0 1 (fontified nil)) . -1513) (1441 . 1514) 1409) nil (26361 7246 97874 963000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1519 . 1520) (#("
" 0 1 (fontified nil)) . -1585) (1513 . 1586) 1448) nil (26361 7246 97874 179000) 0 nil])
([nil nil ((1481 . 1482) (#("3" 0 1 (face font-lock-variable-name-face fontified t)) . -1481) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) 1482 (1481 . 1482) (#("1" 0 1 (face font-lock-variable-name-face fontified t)) . -1481) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) 1482) nil (26361 7246 97871 807000) 0 nil])
([nil nil ((1553 . 1554) (#("1" 0 1 (face font-lock-variable-name-face fontified t)) . -1553) (undo-tree-id1621 . -1) 1554) nil (26361 7246 97846 648000) 0 nil])
([nil nil ((1711 . 1712) (1705 . 1711) (#("linear" 0 6 (fontified nil)) . -1705) (undo-tree-id1664 . -6) (1705 . 1711) (#("li" 0 1 (fontified t) 1 2 (fontified t)) . -1705) (undo-tree-id1665 . -2) (undo-tree-id1666 . -2) 1707 (1704 . 1707) (1696 . 1704) (#("me" 0 2 (fontified nil)) . 1696) (1696 . 1698) (#("message2" 0 8 (fontified nil)) . -1696) (undo-tree-id1667 . -8) (1696 . 1704) (#("mess" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -1696) (undo-tree-id1668 . -4) (undo-tree-id1669 . -4) 1700 (1696 . 1700) (1690 . 1696) (t 26361 7246 132576 787000)) nil (26361 7261 612691 613000) 0 nil])
([nil nil ((1669 . 1670) (1638 . 1639) (1607 . 1608)) nil (26361 7261 612673 831000) 0 nil])
([nil nil ((1721 . 1722) (1720 . 1721) (#("z" 0 1 (fontified t)) . -1720) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (#(";" 0 1 (fontified t)) . -1721) (undo-tree-id1676 . -1) 1722 (1721 . 1722) (1715 . 1721) (t 26361 7261 625500 349000)) nil (26361 7291 891223 206000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1728 . 1729) (#("
" 0 1 (fontified nil)) . -1752) (1722 . 1753) 1721) nil (26361 7291 891219 246000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1758 . 1759) (#("
" 0 1 (fontified nil)) . -1782) (1752 . 1783) 1729) nil (26361 7291 891217 870000) 0 nil])
([nil nil ((1719 . 1721)) nil (26361 7291 891217 321000) 0 nil])
([nil nil ((1751 . 1753)) nil (26361 7291 891216 871000) 0 nil])
([nil nil ((1783 . 1785)) nil (26361 7291 891216 638000) 0 nil])
([nil nil ((1747 . 1748) (#("x" 0 1 (fontified t)) . 1747)) nil (26361 7291 891215 635000) 0 nil])
([nil nil ((1754 . 1755) (#("x" 0 1 (fontified t)) . -1754) (undo-tree-id1673 . -1) 1755) nil (26361 7291 891215 200000) 0 nil])
([nil nil ((1786 . 1787) (#("x" 0 1 (fontified t)) . -1786) (undo-tree-id1672 . -1) 1787) nil (26361 7291 891213 902000) 0 nil])
([nil nil ((1779 . 1780) (#("x" 0 1 (fontified t)) . 1779) (undo-tree-id1670 . -1) (1779 . 1780) (#("x" 0 1 (fontified t)) . 1779) (undo-tree-id1671 . -1)) nil (26361 7291 891210 276000) 0 nil])
([nil nil ((#("      geometry_msgs::msg::Twist message3 = geometry_msgs::msg::Twist();
" 0 5 (fontified t) 5 6 (fontified t rear-nonsticky t) 6 19 (face font-lock-constant-face fontified t) 19 21 (fontified t) 21 24 (face font-lock-constant-face fontified t) 24 26 (fontified t) 26 30 (face font-lock-type-face fontified t) 30 31 (face font-lock-type-face c-type c-decl-id-start fontified t) 31 32 (fontified t) 32 39 (face font-lock-variable-name-face fontified t) 39 40 (face font-lock-variable-name-face fontified t) 40 42 (fontified t) 42 43 (fontified t) 43 56 (face font-lock-constant-face fontified t) 56 58 (fontified t) 58 61 (face font-lock-constant-face fontified t) 61 68 (fontified t) 68 69 (face (rainbow-delimiters-depth-4-face) fontified t) 69 70 (face (rainbow-delimiters-depth-4-face) fontified t) 70 71 (fontified t) 71 72 (fontified t)) . 1514) (undo-tree-id1715 . -71) (undo-tree-id1716 . -22) 1536 (t 26361 7291 902984 102000)) nil (26361 7370 842872 357000) 0 nil])
([nil nil ((1534 . 1536) (1531 . 1534) (#("msg" 0 3 (fontified nil)) . -1531) (undo-tree-id1702 . -3) (1531 . 1534) (#("ms" 0 1 (fontified t) 1 2 (fontified t)) . -1531) (undo-tree-id1703 . -2) (undo-tree-id1704 . -2) 1533 (1531 . 1533) (1515 . 1521) (#("    " 0 4 (fontified nil)) . 1515) (1528 . 1529) (1515 . 1519) (#("      " 0 6 (fontified nil)) . 1515) (undo-tree-id1705 . -6) (1529 . 1530) (1521 . 1529) (#("std_" 0 4 (fontified nil)) . 1521) (1521 . 1525) (#("std_msgs" 0 8 (fontified nil)) . -1521) (undo-tree-id1706 . -8) (1521 . 1529) (#("std_ms" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -1521) (undo-tree-id1707 . -6) (undo-tree-id1708 . -6) 1527 (1526 . 1527) (1525 . 1526) (1524 . 1525) (#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -1524) (undo-tree-id1709 . -1) 1525 (1524 . 1525) (#(")" 0 1 (fontified nil)) . -1524) (1524 . 1525) (#(":" 0 1 (c-type c-decl-end fontified t)) . -1524) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (#(":" 0 1 (fontified t)) . -1525) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) 1526 (1515 . 1521) (#("    " 0 4 (fontified nil)) . 1515) (1523 . 1524) (1515 . 1519) (#("      " 0 6 (fontified nil)) . 1515) (1524 . 1525) (1523 . 1524) (1522 . 1523) (1521 . 1522) (1515 . 1521) (#("      " 0 6 (fontified nil)) . 1514) (undo-tree-id1714 . -6) (1513 . 1521)) nil (26361 7370 842864 901000) 0 nil])
([nil nil ((#("      std_msgs::msg::
" 0 6 (fontified t) 6 14 (face font-lock-constant-face fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 19 (face font-lock-constant-face fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t)) . 1515) (undo-tree-id1697 . -21) (undo-tree-id1698 . 1) (undo-tree-id1699 . 1) (undo-tree-id1700 . -20) (undo-tree-id1701 . -20) 1535) nil (26361 7370 842851 603000) 0 nil])
([nil nil ((356 . 357) (347 . 356) (#("bool.hpp\"" 0 9 (fontified nil c-in-sws t)) . -347) (undo-tree-id1677 . -9) (undo-tree-id1678 . -9) (347 . 356) (#("t" 0 1 (face font-lock-string-face fontified t)) . -347) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) 348 (347 . 348) (343 . 347) (#("ms" 0 2 (fontified nil)) . 343) (343 . 345) (#("msg/" 0 4 (fontified nil)) . -343) (undo-tree-id1681 . -4) (343 . 347) (#("ms" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t)) . -343) (undo-tree-id1682 . -2) (undo-tree-id1683 . -2) 345 (343 . 345) (334 . 343) (#("st\"" 0 2 (fontified nil c-in-sws t) 2 3 (c-in-sws t face font-lock-string-face fontified nil)) . 334) (undo-tree-id1684 . -3) (334 . 336) (#("std_msgs/" 0 9 (fontified nil c-in-sws t)) . -334) (undo-tree-id1685 . -9) (334 . 343) (#("std" 0 1 (face font-lock-string-face c-in-sws t fontified t) 1 2 (face font-lock-string-face c-in-sws t fontified t) 2 3 (face font-lock-string-face c-in-sws t fontified t)) . -334) (undo-tree-id1686 . -3) (undo-tree-id1687 . -3) 337 (334 . 337) (apply yas--snippet-revive 325 335 #s(yas--snippet nil nil #s(yas--exit 334 nil) 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 334 nil) 6 nil nil nil nil)) (325 . 335) (#("include \"$0\"" 0 12 (fontified nil)) . 325) (undo-tree-id1688 . -12) (325 . 337) (#("i" 0 1 (fontified nil c-in-sws t)) . 325) (undo-tree-id1689 . -1) (325 . 326) (#("include \"header\"" 0 16 (fontified nil)) . -325) (undo-tree-id1690 . -16) (undo-tree-id1691 . -16) (325 . 341) (#("incl" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t) 2 3 (face font-lock-preprocessor-face c-in-sws t fontified t) 3 4 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -325) (undo-tree-id1692 . -4) (undo-tree-id1693 . -4) (undo-tree-id1694 . -4) 329 (325 . 329) (324 . 325) (#("$" 0 1 (c-is-sws t fontified t)) . -324) (undo-tree-id1695 . -1) (#("i" 0 1 (fontified t)) . -325) (undo-tree-id1696 . -1) 326 (324 . 326) (323 . 323) (323 . 324)) nil (26361 7370 842839 245000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -1619) (1547 . 1620) 1508 (t 26361 7370 857240 364000)) nil (26361 7386 90000 706000) 0 nil])
([nil nil ((1587 . 1588) (#("2" 0 1 (face font-lock-variable-name-face fontified t)) . -1587) (undo-tree-id1718 . -1) 1588) nil (26361 7386 89999 714000) 0 nil])
([nil nil ((1587 . 1588) (#("2" 0 1 (face font-lock-variable-name-face fontified t)) . -1587) (undo-tree-id1717 . -1) 1588) nil (26361 7386 89995 795000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -1826) (undo-tree-id1855 . -6) 1832 (1826 . 1832) (#("      " 0 6 (fontified nil)) . 1825) (undo-tree-id1856 . -6) (1825 . 1832) (#("      " 0 6 (fontified nil)) . 1824) (undo-tree-id1857 . -6) (1830 . 1831) (t 26361 7386 103353 823000)) nil (26361 7415 701187 771000) 0 nil])
([nil nil ((1855 . 1856) (1853 . 1855) (1846 . 1853) (1840 . 1846) (#("linear" 0 6 (fontified nil)) . -1840) (undo-tree-id1849 . -6) (1840 . 1846) (#("li" 0 1 (fontified t) 1 2 (fontified t)) . -1840) (undo-tree-id1850 . -2) (undo-tree-id1851 . -2) 1842 (1839 . 1842) (1831 . 1839) (#("me" 0 2 (fontified nil)) . 1831) (1831 . 1833) (#("message3" 0 8 (fontified nil)) . -1831) (undo-tree-id1852 . -8) (1831 . 1839) (#("mes" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1831) (undo-tree-id1853 . -3) (undo-tree-id1854 . -3) 1834 (1831 . 1834) (1825 . 1831)) nil (26361 7415 701184 195000) 0 nil])
([nil nil ((1891 . 1892) (1886 . 1891) (#("theta" 0 5 (fontified nil)) . -1886) (undo-tree-id1719 . -5) (1886 . 1891) (#("th" 0 1 (fontified t) 1 2 (fontified t)) . -1886) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -2) (undo-tree-id1752 . -2) (undo-tree-id1753 . -2) (undo-tree-id1754 . -2) (undo-tree-id1755 . -2) (undo-tree-id1756 . -2) (undo-tree-id1757 . -2) (undo-tree-id1758 . -2) (undo-tree-id1759 . -2) (undo-tree-id1760 . -2) (undo-tree-id1761 . -2) (undo-tree-id1762 . -2) (undo-tree-id1763 . -2) (undo-tree-id1764 . -2) (undo-tree-id1765 . -2) (undo-tree-id1766 . -2) (undo-tree-id1767 . -2) (undo-tree-id1768 . -2) (undo-tree-id1769 . -2) (undo-tree-id1770 . -2) (undo-tree-id1771 . -2) (undo-tree-id1772 . -2) (undo-tree-id1773 . -2) (undo-tree-id1774 . -2) (undo-tree-id1775 . -2) (undo-tree-id1776 . -2) (undo-tree-id1777 . -2) (undo-tree-id1778 . -2) (undo-tree-id1779 . -2) (undo-tree-id1780 . -2) (undo-tree-id1781 . -2) (undo-tree-id1782 . -2) (undo-tree-id1783 . -2) (undo-tree-id1784 . -2) (undo-tree-id1785 . -2) (undo-tree-id1786 . -2) (undo-tree-id1787 . -2) (undo-tree-id1788 . -2) (undo-tree-id1789 . -2) (undo-tree-id1790 . -2) (undo-tree-id1791 . -2) (undo-tree-id1792 . -2) (undo-tree-id1793 . -2) (undo-tree-id1794 . -2) (undo-tree-id1795 . -2) (undo-tree-id1796 . -2) (undo-tree-id1797 . -2) (undo-tree-id1798 . -2) (undo-tree-id1799 . -2) (undo-tree-id1800 . -2) (undo-tree-id1801 . -2) (undo-tree-id1802 . -2) (undo-tree-id1803 . -2) (undo-tree-id1804 . -2) (undo-tree-id1805 . -2) (undo-tree-id1806 . -2) (undo-tree-id1807 . -2) (undo-tree-id1808 . -2) (undo-tree-id1809 . -2) (undo-tree-id1810 . -2) (undo-tree-id1811 . -2) (undo-tree-id1812 . -2) (undo-tree-id1813 . -2) (undo-tree-id1814 . -2) (undo-tree-id1815 . -2) (undo-tree-id1816 . -2) (undo-tree-id1817 . -2) (undo-tree-id1818 . -2) (undo-tree-id1819 . -2) (undo-tree-id1820 . -2) (undo-tree-id1821 . -2) (undo-tree-id1822 . -2) (undo-tree-id1823 . -2) (undo-tree-id1824 . -2) (undo-tree-id1825 . -2) (undo-tree-id1826 . -2) (undo-tree-id1827 . -2) (undo-tree-id1828 . -2) (undo-tree-id1829 . -2) (undo-tree-id1830 . -2) (undo-tree-id1831 . -2) 1888 (1884 . 1888) (1881 . 1884) (1880 . 1881) (#("z" 0 1 (fontified t)) . -1880) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) 1881 (1879 . 1881) (1872 . 1879) (#("an" 0 2 (fontified nil)) . 1872) (1872 . 1874) (#("angular" 0 7 (fontified nil)) . -1872) (undo-tree-id1834 . -7) (1872 . 1879) (#("an" 0 1 (fontified t) 1 2 (fontified t)) . -1872) (undo-tree-id1835 . -2) (undo-tree-id1836 . -2) 1874 (1872 . 1874) (#("l" 0 1 (fontified t)) . -1872) (undo-tree-id1837 . -1) (#("i" 0 1 (fontified t)) . -1873) (undo-tree-id1838 . -1) (#("n" 0 1 (fontified t)) . -1874) (undo-tree-id1839 . -1) (#("e" 0 1 (fontified t)) . -1875) (undo-tree-id1840 . -1) (#("a" 0 1 (fontified t)) . -1876) (undo-tree-id1841 . -1) (#("r" 0 1 (fontified t)) . -1877) (undo-tree-id1842 . -1) 1878 (1872 . 1878) (#("linear" 0 6 (fontified nil)) . -1872) (undo-tree-id1843 . -6) (1872 . 1878) (#("li" 0 1 (fontified t) 1 2 (fontified t)) . -1872) (undo-tree-id1844 . -2) (undo-tree-id1845 . -2) 1874 (1871 . 1874) (1863 . 1871) (#("me" 0 2 (fontified nil)) . 1863) (1863 . 1865) (#("message3" 0 8 (fontified nil)) . -1863) (undo-tree-id1846 . -8) (1863 . 1871) (#("me" 0 1 (fontified t) 1 2 (fontified t)) . -1863) (undo-tree-id1847 . -2) (undo-tree-id1848 . -2) 1865 (1863 . 1865) (1856 . 1863)) nil (26361 7415 701171 311000) 0 nil])
([nil nil ((1730 . 1746) (1729 . 1730) (1727 . 1729) (1726 . 1727) (t 26361 7415 714435 691000)) nil (26361 7424 599924 792000) 0 nil])
([nil nil ((1759 . 1766) (1746 . 1759) (t 26361 7424 640043 51000)) nil (26361 7446 83794 855000) 0 nil])
([nil nil ((1953 . 1966) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -1953) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) 1954 (1935 . 1954) (1933 . 1935) (1932 . 1933)) nil (26361 7446 83794 395000) 0 nil])
([nil nil ((#("      " 0 6 (c-is-sws t fontified t)) . -1968) (undo-tree-id1858 . -6) (undo-tree-id1859 . -6) 1974 (1968 . 1974) (#("      " 0 6 (c-in-sws t c-is-sws t fontified nil)) . 1967) (undo-tree-id1860 . -6) (undo-tree-id1861 . -6) (undo-tree-id1862 . -6) (undo-tree-id1863 . -6) (undo-tree-id1864 . -6) (undo-tree-id1865 . -6) (undo-tree-id1866 . -6) (undo-tree-id1867 . -6) (undo-tree-id1868 . -6) (undo-tree-id1869 . -6) (undo-tree-id1870 . -6) (undo-tree-id1871 . -6) (undo-tree-id1872 . -6) (undo-tree-id1873 . -6) (undo-tree-id1874 . -6) (undo-tree-id1875 . -6) (undo-tree-id1876 . -6) (undo-tree-id1877 . -6) (undo-tree-id1878 . -6) (undo-tree-id1879 . -6) (undo-tree-id1880 . -6) (undo-tree-id1881 . -6) (undo-tree-id1882 . -6) (undo-tree-id1883 . -6) (undo-tree-id1884 . -6) (undo-tree-id1885 . -6) (undo-tree-id1886 . -6) (undo-tree-id1887 . -6) (undo-tree-id1888 . -6) (undo-tree-id1889 . -6) (undo-tree-id1890 . -6) (undo-tree-id1891 . -6) (undo-tree-id1892 . -6) (undo-tree-id1893 . -6) (undo-tree-id1894 . -6) (undo-tree-id1895 . -6) (undo-tree-id1896 . -6) (undo-tree-id1897 . -6) (undo-tree-id1898 . -6) (undo-tree-id1899 . -6) (undo-tree-id1900 . -6) (undo-tree-id1901 . -6) (undo-tree-id1902 . -6) (undo-tree-id1903 . -6) (undo-tree-id1904 . -6) (undo-tree-id1905 . -6) (undo-tree-id1906 . -6) (undo-tree-id1907 . -6) (undo-tree-id1908 . -6) (undo-tree-id1909 . -6) (undo-tree-id1910 . -6) (undo-tree-id1911 . -6) (undo-tree-id1912 . -6) (undo-tree-id1913 . -6) (undo-tree-id1914 . -6) (1966 . 1974)) nil (26361 7446 83792 85000) 0 nil])
([nil nil ((1968 . 1974)) nil (26361 7446 83754 111000) 0 nil])
([nil nil ((1975 . 1976) (1969 . 1975) (#("      " 0 6 (c-is-sws t fontified nil)) . 1968) (undo-tree-id1954 . -6) (1968 . 1975) (#("      " 0 6 (c-in-sws t c-is-sws t fontified nil)) . 1967) (undo-tree-id1955 . -6) (1973 . 1974) (1967 . 1973) (t 26361 7446 123468 97000)) nil (26361 7520 418675 884000) 0 nil])
([nil nil ((#("      k
" 0 6 (c-is-sws t fontified t) 6 7 (c-is-sws t fontified t) 7 8 (fontified t)) . 1969) (undo-tree-id1951 . -7) (undo-tree-id1952 . 1) (undo-tree-id1953 . -5) 1974) nil (26361 7520 418674 736000) 0 nil])
([nil nil ((1675 . 1677) (1671 . 1675) (#("Bool" 0 4 (fontified nil)) . -1671) (undo-tree-id1926 . -4) (1671 . 1675) (#("B" 0 1 (fontified t)) . -1671) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) 1672 (1671 . 1672) (1669 . 1671) (1666 . 1669) (#("msg" 0 3 (fontified nil)) . -1666) (undo-tree-id1929 . -3) (1666 . 1669) (#("ms" 0 1 (fontified t) 1 2 (fontified t)) . -1666) (undo-tree-id1930 . -2) (undo-tree-id1931 . -2) 1668 (1666 . 1668) (1664 . 1666) (#(":" 0 1 (fontified t)) . -1664) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (#(":" 0 1 (fontified t)) . -1665) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) 1666 (1664 . 1666) (1656 . 1664) (#("std" 0 3 (fontified nil)) . 1656) (1656 . 1659) (#("std_msgs" 0 8 (fontified nil)) . -1656) (undo-tree-id1936 . -8) (1656 . 1664) (#("std" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1656) (undo-tree-id1937 . -3) (undo-tree-id1938 . -3) 1659 (1658 . 1659) (1657 . 1658) (1653 . 1657) (1646 . 1653) (#("m" 0 1 (fontified t)) . -1646) (undo-tree-id1939 . -1) (#("e" 0 1 (fontified t)) . -1647) (undo-tree-id1940 . -1) 1648 (1645 . 1648) (1641 . 1645) (#("Bool" 0 4 (fontified nil)) . -1641) (undo-tree-id1941 . -4) (1641 . 1645) (#("B" 0 1 (fontified t)) . -1641) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) 1642 (1641 . 1642) (1639 . 1641) (1636 . 1639) (#("msg" 0 3 (fontified nil)) . -1636) (undo-tree-id1944 . -3) (1636 . 1639) (#("ms" 0 1 (fontified t) 1 2 (fontified t)) . -1636) (undo-tree-id1945 . -2) (undo-tree-id1946 . -2) 1638 (1636 . 1638) (1620 . 1626) (#("    " 0 4 (fontified nil)) . 1620) (1633 . 1634) (1620 . 1624) (#("      " 0 6 (fontified nil)) . 1620) (undo-tree-id1947 . -6) (1634 . 1635) (1626 . 1634) (#("std" 0 3 (fontified nil)) . 1626) (1626 . 1629) (#("std_msgs" 0 8 (fontified nil)) . -1626) (undo-tree-id1948 . -8) (1626 . 1634) (#("std_ms" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -1626) (undo-tree-id1949 . -6) (undo-tree-id1950 . -6) 1632 (1629 . 1632) (1628 . 1629) (1627 . 1628) (1626 . 1627) (1620 . 1626)) nil (26361 7520 418669 747000) 0 nil])
([nil nil ((1677 . 1678)) nil (26361 7520 418658 268000) 0 nil])
([nil nil ((2056 . 2061) (2050 . 2056) (#("on_off" 0 6 (fontified nil)) . -2050) (undo-tree-id1919 . -6) (2050 . 2056) (#("on" 0 1 (fontified t) 1 2 (fontified t)) . -2050) (undo-tree-id1920 . -2) (undo-tree-id1921 . -2) 2052 (2048 . 2052) (2047 . 2049) (2044 . 2047) (2040 . 2044) (#("data" 0 4 (fontified nil)) . -2040) (undo-tree-id1922 . -4) (2040 . 2044) (2039 . 2040) (2032 . 2039) (#("bo" 0 1 (fontified nil c-is-sws t) 1 2 (fontified nil)) . 2032) (2032 . 2034) (#("boolmsg" 0 1 (fontified nil c-is-sws t) 1 7 (fontified nil)) . -2032) (undo-tree-id1923 . -7) (2032 . 2039) (#("bo" 0 1 (c-is-sws t fontified t) 1 2 (fontified t)) . -2032) (undo-tree-id1924 . -2) (undo-tree-id1925 . -2) 2034 (2032 . 2034) (2026 . 2032)) nil (26361 7520 418656 127000) 0 nil])
([nil nil ((2077 . 2078) (2071 . 2077) (2070 . 2071) (2062 . 2070) (#(" " 0 1 (fontified t)) . -2062) (undo-tree-id1917 . -1) (#("?" 0 1 (fontified t)) . -2063) (undo-tree-id1918 . -1) 2064 (2062 . 2064)) nil (26361 7520 418647 134000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -2080) (undo-tree-id1963 . -6) 2086 (2080 . 2086) (#("      " 0 6 (fontified nil c-in-sws t c-is-sws t)) . 2079) (undo-tree-id1964 . -6) (2085 . 2086) (t 26361 7520 459023 439000)) nil (26361 7545 289381 145000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2429 . 2430) (#("
" 0 1 (fontified nil)) . -2491) (2425 . 2492) 2360) nil (26361 7545 289378 722000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2495 . 2496) (#("
" 0 1 (fontified nil)) . -2557) (2491 . 2558) 2430) nil (26361 7545 289378 254000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2561 . 2562) (#("
" 0 1 (fontified nil)) . -2623) (2557 . 2624) 2496) nil (26361 7545 289377 100000) 0 nil])
([nil nil ((#("geometry" 0 8 (face font-lock-constant-face fontified t)) . 2580) (undo-tree-id1962 . -7)) nil (26361 7545 289376 438000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-constant-face fontified t)) . 2580)) nil (26361 7545 289375 252000) 0 nil])
([nil nil ((2580 . 2584)) nil (26361 7545 289374 960000) 0 nil])
([nil nil ((#("Twist" 0 5 (fontified t)) . 2595) (undo-tree-id1960 . -4) (undo-tree-id1961 . -5)) nil (26361 7545 289374 271000) 0 nil])
([nil nil ((2595 . 2599) (#("B" 0 1 (fontified nil)) . 2595) (2595 . 2596) (#("Bool" 0 4 (fontified nil)) . -2595) (undo-tree-id1956 . -4) (2595 . 2599) (#("B" 0 1 (fontified t)) . -2595) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) 2596 (2595 . 2596)) nil (26361 7545 289369 307000) 0 nil])
([nil nil ((2424 . 2425) (t 26361 7545 329427 287000)) nil (26361 7557 845464 896000) 0 nil])
([nil nil ((2491 . 2492)) nil (26361 7557 845464 171000) 0 nil])
([nil nil ((2558 . 2559)) nil (26361 7557 845463 644000) 0 nil])
([nil nil ((#("publ" 0 4 (face font-lock-variable-name-face fontified t)) . 2615) (undo-tree-id1965 . -3)) nil (26361 7557 845462 854000) 0 nil])
([nil nil ((2615 . 2623)) nil (26361 7557 845454 167000) 0 nil])
([nil nil ((716 . 717) (t 26361 7557 885114 745000)) nil (26361 7574 416439 150000) 0 nil])
([nil nil ((nil rear-nonsticky nil 788 . 789) (#("
" 0 1 (fontified nil)) . -859) (782 . 860) 716 (t 26361 7574 456000 932000)) nil (26361 7617 828000 718000) 0 nil])
([nil nil ((nil rear-nonsticky nil 865 . 866) (#("
" 0 1 (fontified nil)) . -936) (859 . 937) 789) nil (26361 7617 828000 200000) 0 nil])
([nil nil ((793 . 794) (#("1" 0 1 (fontified t)) . -793) (undo-tree-id1993 . -1) 794) nil (26361 7617 827999 671000) 0 nil])
([nil nil ((870 . 871) (#("2" 0 1 (fontified t)) . -870) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) 871 (870 . 871) (#("1" 0 1 (fontified t)) . -870) (undo-tree-id1992 . -1) 871) nil (26361 7617 827998 256000) 0 nil])
([nil nil ((852 . 853)) nil (26361 7617 827996 477000) 0 nil])
([nil nil ((930 . 931)) nil (26361 7617 827996 229000) 0 nil])
([nil nil ((#("<" 0 1 (face (rainbow-delimiters-depth-5-face) c-<>-c-types-set t category c-<-as-paren-syntax fontified t)) . -999) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) 1000 (#("class ContainerAllocator" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 24 (face font-lock-type-face fontified t)) . 1000) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 999 999 nil nil nil t nil)) nil 8 nil #s(yas--field 1 999 999 nil nil nil t nil) #s(yas--field 1 979 998 nil nil nil t #s(yas--field 2 1000 1015 nil nil nil t #s(yas--field 3 1017 1019 nil nil nil t nil))) nil)) (994 . 1025) (#("Bool_<${1:class ContainerAllocator}>" 0 36 (fontified nil)) . 994) (994 . 1030) (#("Bool_<class ContainerAllocator>" 0 5 (fontified nil) 5 6 (fontified nil c-<>-c-types-set t category c-<-as-paren-syntax) 6 30 (fontified nil) 30 31 (fontified nil category c->-as-paren-syntax)) . -994) (undo-tree-id1971 . -31) (994 . 1025) (#("Bo" 0 1 (fontified t) 1 2 (fontified t)) . -994) (undo-tree-id1972 . -2) (undo-tree-id1973 . -2) 996 (994 . 996) (#("N" 0 1 (fontified t)) . -994) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (#("B" 0 1 (fontified t)) . -995) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) 996 (994 . 996) (992 . 994) (989 . 992) (#("msg" 0 3 (fontified nil)) . -989) (undo-tree-id1978 . -3) (989 . 992) (#("ms" 0 1 (fontified t) 1 2 (fontified t)) . -989) (undo-tree-id1979 . -2) (undo-tree-id1980 . -2) 991 (989 . 991) (987 . 989) (nil c-<>-c-types-set t 979 . 987) (nil fontified nil 979 . 987) (nil face (rainbow-delimiters-depth-4-face) 979 . 987) (979 . 987) (#("std" 0 3 (fontified nil)) . 979) (nil c-<>-c-types-set t 979 . 982) (nil fontified nil 979 . 982) (nil face (rainbow-delimiters-depth-4-face) 979 . 982) (979 . 982) (#("std_msgs" 0 8 (fontified nil)) . -979) (undo-tree-id1981 . -8) (nil c-<>-c-types-set t 979 . 987) (nil fontified nil 979 . 987) (nil face (rainbow-delimiters-depth-4-face) 979 . 987) (979 . 987) (#("std" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -979) (undo-tree-id1982 . -3) (undo-tree-id1983 . -3) 982 (980 . 982) (#("typename MessageT" 0 8 (face font-lock-keyword-face fontified nil) 8 9 (fontified nil) 9 17 (face font-lock-type-face fontified nil)) . 980) (979 . 980) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 979 998 nil nil nil t #s(yas--field 2 1000 1015 nil nil nil t #s(yas--field 3 1017 1019 nil nil nil t nil))) #s(yas--field 2 1000 1015 nil nil nil t #s(yas--field 3 1017 1019 nil nil nil t nil)) #s(yas--field 3 1017 1019 nil nil nil t nil)) nil 7 nil #s(yas--field 3 1017 1019 nil nil nil t nil) nil nil)) (962 . 1052) (#("create_publisher<${1:typename MessageT}>(${2:const std::string &topic_name}, ${3:const rclcpp::QoS &qos})" 0 105 (fontified nil)) . 962) (962 . 1067) (#("create_publisher<typename MessageT>(const std::string &topic_name, const rclcpp::QoS &qos, const PublisherOptionsWithAllocator<AllocatorT> &options = PublisherOptionsWithAllocator<AllocatorT>())" 0 16 (fontified nil) 16 17 (fontified nil c-<>-c-types-set t category c-<-as-paren-syntax) 17 34 (fontified nil) 34 35 (fontified nil category c->-as-paren-syntax) 35 126 (fontified nil) 126 127 (fontified nil c-<>-c-types-set t category c-<-as-paren-syntax) 127 137 (fontified nil) 137 138 (fontified nil category c->-as-paren-syntax) 138 179 (fontified nil) 179 180 (fontified nil c-<>-c-types-set t category c-<-as-paren-syntax) 180 190 (fontified nil) 190 191 (fontified nil category c->-as-paren-syntax) 191 194 (fontified nil)) . -962) (undo-tree-id1984 . -194) (962 . 1156) (#("create" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -962) (undo-tree-id1985 . -6) (undo-tree-id1986 . -6) 968 (962 . 968) (961 . 962) (953 . 961) (945 . 953) (#("boo" 0 3 (fontified nil)) . 945) (945 . 948) (#("boolpubl" 0 8 (fontified nil)) . -945) (undo-tree-id1987 . -8) (945 . 953) (#("boo" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -945) (undo-tree-id1988 . -3) (undo-tree-id1989 . -3) 948 (945 . 948) (938 . 945)) nil (26361 7617 827992 764000) 0 nil])
([nil nil ((apply yas--snippet-revive 994 1000 #s(yas--snippet nil (#s(yas--field 1 999 999 nil nil nil t nil)) nil 8 nil #s(yas--field 1 999 999 nil nil nil t nil) #s(yas--field 1 979 998 nil nil nil t #s(yas--field 2 1000 1015 nil nil nil t #s(yas--field 3 1017 1019 nil nil nil t nil))) nil))) nil (26361 7617 827981 113000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 998) (undo-tree-id1967 . -1)) nil (26361 7617 827980 688000) 0 nil])
([nil nil ((#(">" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . 998) (undo-tree-id1966 . 1)) nil (26361 7617 827978 924000) 0 nil])
([nil nil ((1020 . 1021) (apply yas--snippet-revive 962 1020 #s(yas--snippet nil (#s(yas--field 1 979 998 nil nil nil t #s(yas--field 2 1000 1015 nil nil nil t #s(yas--field 3 1017 1019 nil nil nil t nil))) #s(yas--field 2 1000 1015 nil nil nil t #s(yas--field 3 1017 1019 nil nil nil t nil)) #s(yas--field 3 1017 1019 nil nil nil t nil)) nil 7 nil #s(yas--field 3 1017 1019 nil nil nil t nil) nil nil)) (1018 . 1019) (#("const rclcpp::QoS &qos" 0 5 (face font-lock-keyword-face fontified nil) 5 6 (fontified nil) 6 12 (face font-lock-constant-face fontified nil) 12 14 (fontified nil) 14 17 (face font-lock-type-face fontified nil) 17 19 (fontified nil) 19 22 (face font-lock-variable-name-face fontified nil)) . 1018) (1017 . 1018) (1001 . 1014) (1000 . 1002) (#("\"" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -1000) (#("const std::string &topic_name" 0 5 (face font-lock-keyword-face fontified nil) 5 6 (fontified nil) 6 9 (face font-lock-constant-face fontified nil) 9 11 (fontified nil) 11 16 (face font-lock-type-face fontified nil) 16 17 (face font-lock-type-face c-type c-decl-id-start fontified nil) 17 19 (fontified nil) 19 29 (face font-lock-variable-name-face fontified nil)) . 1001) (1000 . 1001)) nil (26361 7617 827968 626000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -709) (undo-tree-id1998 . -6) 715 (709 . 715) (#("      " 0 6 (fontified nil)) . 708) (undo-tree-id1999 . -6) (708 . 715) (#("      " 0 6 (fontified nil)) . 707) (undo-tree-id2000 . -6) (707 . 714) (#("      " 0 6 (fontified nil)) . 706) (undo-tree-id2001 . -6) (705 . 713) (t 26361 7617 841212 667000)) nil (26361 7651 716546 451000) 0 nil])
([nil nil ((784 . 785) (apply yas--snippet-revive 771 784 #s(yas--snippet nil nil nil 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 9 nil nil nil nil)) (771 . 784) (#("best_effort()" 0 13 (fontified nil)) . 771) (771 . 784) (#("best_effort()" 0 13 (fontified nil)) . -771) (undo-tree-id1994 . -13) (771 . 784) (769 . 771) (204 . 230) (732 . 732) (732 . 743) (#("Q" 0 1 (fontified nil)) . 732) (732 . 733) (#("rclcpp::QoS" 0 11 (fontified nil)) . -732) (undo-tree-id1995 . -11) (732 . 743) (#("Q" 0 1 (fontified t)) . -732) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) 733 (714 . 733) (708 . 714)) nil (26361 7651 716540 501000) 0 nil])
([nil nil ((#("best" 0 4 (fontified t)) . 771) (undo-tree-id2024 . -3) (undo-tree-id2025 . -3) (t 26361 7651 719837 62000)) nil (26361 7689 406936 652000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 771)) nil (26361 7689 406935 337000) 0 nil])
([nil nil ((#("effort" 0 6 (fontified t)) . 771) (undo-tree-id2019 . -5) (undo-tree-id2020 . -2) (undo-tree-id2021 . 3) (undo-tree-id2022 . -2) (undo-tree-id2023 . -2)) nil (26361 7689 406934 679000) 0 nil])
([nil nil ((#("();" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t) 1 2 (face (rainbow-delimiters-depth-4-face) fontified t) 2 3 (fontified t)) . 771) (undo-tree-id2017 . -2) (undo-tree-id2018 . 3)) nil (26361 7689 406931 701000) 0 nil])
([nil nil ((784 . 785) (apply yas--snippet-revive 771 784 #s(yas--snippet nil nil nil 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 10 nil nil nil nil)) (771 . 784) (#("best_effort()" 0 13 (fontified nil)) . 771) (771 . 784) (#("be" 0 2 (fontified nil)) . 771) (771 . 773) (#("best_effort()" 0 13 (fontified nil)) . -771) (undo-tree-id2014 . -13) (771 . 784) (#("bes" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -771) (undo-tree-id2015 . -3) (undo-tree-id2016 . -3) 774 (771 . 774)) nil (26361 7689 406929 981000) 0 nil])
([nil nil ((#("auto " 0 1 (face font-lock-keyword-face fontified t) 1 2 (face font-lock-keyword-face fontified t) 2 3 (face font-lock-keyword-face fontified t) 3 4 (c-type c-decl-id-start face font-lock-keyword-face fontified t) 4 5 (fontified t)) . 740) (undo-tree-id2013 . -4)) nil (26361 7689 406928 169000) 0 nil])
([nil nil ((740 . 741) (#("q" 0 1 (fontified t)) . -740) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) 741 (740 . 741)) nil (26361 7689 406926 685000) 0 nil])
([nil nil ((748 . 751) (#("Q" 0 1 (fontified nil)) . 748) (748 . 749) (#("QoS" 0 3 (fontified nil)) . -748) (undo-tree-id2002 . -3) (748 . 751) (#("Qo" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -748) (undo-tree-id2003 . -2) (undo-tree-id2004 . -2) 750 (748 . 750) (734 . 740) (#("    " 0 4 (fontified nil)) . 734) (745 . 746) (734 . 738) (#("      " 0 6 (fontified nil)) . 734) (undo-tree-id2005 . -6) (undo-tree-id2006 . -6) (undo-tree-id2007 . -6) (746 . 747) (740 . 746) (#("rcl" 0 3 (fontified nil)) . 740) (740 . 743) (#("rclcpp" 0 6 (fontified nil)) . -740) (undo-tree-id2008 . -6) (740 . 746) (#("rcl" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -740) (undo-tree-id2009 . -3) (undo-tree-id2010 . -3) 743 (742 . 743) (740 . 742)) nil (26361 7689 406923 649000) 0 nil])
([nil nil ((751 . 753)) nil (26361 7689 406905 618000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t)) . 752) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (t 26361 7689 447547 678000)) nil (26361 7695 187332 713000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 752) (undo-tree-id2026 . 1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1)) nil (26361 7695 187314 622000) 0 nil])
([nil nil ((#("::" 0 1 (fontified t) 1 2 (fontified t)) . 776) (undo-tree-id2034 . -1) (undo-tree-id2035 . -2) (undo-tree-id2036 . -2) (undo-tree-id2037 . -2) (t 26361 7695 200799 883000)) nil (26361 7735 538067 325000) 0 nil])
([nil nil ((#("best" 0 4 (fontified t)) . 776) (undo-tree-id2033 . -3)) nil (26361 7735 538064 33000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 776)) nil (26361 7735 538062 230000) 0 nil])
([nil nil ((#("effort" 0 6 (fontified t)) . 776) (undo-tree-id2032 . -5)) nil (26361 7735 538061 766000) 0 nil])
([nil nil ((#("();" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t) 1 2 (face (rainbow-delimiters-depth-4-face) fontified t) 2 3 (fontified t)) . 776) (undo-tree-id2031 . -2)) nil (26361 7735 538060 281000) 0 nil])
([nil nil ((776 . 778)) nil (26361 7735 538053 947000) 0 nil])
([nil nil ((778 . 779)) nil (26361 7735 538049 933000) 0 nil])
([nil nil ((811 . 812) (apply yas--snippet-revive 798 811 #s(yas--snippet nil nil nil 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 11 nil nil nil nil)) (798 . 811) (#("best_effort()" 0 13 (fontified nil)) . 798) (798 . 811) (#("best_effort()" 0 13 (fontified nil)) . -798) (undo-tree-id2038 . -13) (798 . 811) (#("be" 0 1 (fontified t) 1 2 (fontified t)) . -798) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -2) (undo-tree-id2076 . -2) (undo-tree-id2077 . -2) (undo-tree-id2078 . -2) (undo-tree-id2079 . -2) (undo-tree-id2080 . -2) (undo-tree-id2081 . -2) (undo-tree-id2082 . -2) (undo-tree-id2083 . -2) (undo-tree-id2084 . -2) (undo-tree-id2085 . -2) (undo-tree-id2086 . -2) (undo-tree-id2087 . -2) (undo-tree-id2088 . -2) (undo-tree-id2089 . -2) (undo-tree-id2090 . -2) (undo-tree-id2091 . -2) (undo-tree-id2092 . -2) (undo-tree-id2093 . -2) (undo-tree-id2094 . -2) (undo-tree-id2095 . -2) (undo-tree-id2096 . -2) (undo-tree-id2097 . -2) (undo-tree-id2098 . -2) (undo-tree-id2099 . -2) (undo-tree-id2100 . -2) (undo-tree-id2101 . -2) (undo-tree-id2102 . -2) (undo-tree-id2103 . -2) (undo-tree-id2104 . -2) (undo-tree-id2105 . -2) (undo-tree-id2106 . -2) (undo-tree-id2107 . -2) (undo-tree-id2108 . -2) (undo-tree-id2109 . -2) (undo-tree-id2110 . -2) (undo-tree-id2111 . -2) (undo-tree-id2112 . -2) (undo-tree-id2113 . -2) (undo-tree-id2114 . -2) (undo-tree-id2115 . -2) (undo-tree-id2116 . -2) (undo-tree-id2117 . -2) (undo-tree-id2118 . -2) (undo-tree-id2119 . -2) (undo-tree-id2120 . -2) (undo-tree-id2121 . -2) (undo-tree-id2122 . -2) (undo-tree-id2123 . -2) (undo-tree-id2124 . -2) (undo-tree-id2125 . -2) (undo-tree-id2126 . -2) (undo-tree-id2127 . -2) (undo-tree-id2128 . -2) (undo-tree-id2129 . -2) (undo-tree-id2130 . -2) (undo-tree-id2131 . -2) (undo-tree-id2132 . -2) (undo-tree-id2133 . -2) (undo-tree-id2134 . -2) (undo-tree-id2135 . -2) (undo-tree-id2136 . -2) (undo-tree-id2137 . -2) (undo-tree-id2138 . -2) (undo-tree-id2139 . -2) (undo-tree-id2140 . -2) (undo-tree-id2141 . -2) (undo-tree-id2142 . -2) (undo-tree-id2143 . -2) (undo-tree-id2144 . -2) (undo-tree-id2145 . -2) 800 (797 . 800) (787 . 797) (#("cu" 0 2 (fontified nil)) . 787) (787 . 789) (#("currentqol" 0 10 (fontified nil)) . -787) (undo-tree-id2146 . -10) (787 . 797) (#("cu" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -787) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -2) (undo-tree-id2229 . -2) (undo-tree-id2230 . -2) (undo-tree-id2231 . -2) (undo-tree-id2232 . -2) (undo-tree-id2233 . -2) (undo-tree-id2234 . -2) (undo-tree-id2235 . -2) (undo-tree-id2236 . -2) (undo-tree-id2237 . -2) (undo-tree-id2238 . -2) (undo-tree-id2239 . -2) (undo-tree-id2240 . -2) (undo-tree-id2241 . -2) (undo-tree-id2242 . -2) (undo-tree-id2243 . -2) (undo-tree-id2244 . -2) (undo-tree-id2245 . -2) (undo-tree-id2246 . -2) (undo-tree-id2247 . -2) (undo-tree-id2248 . -2) (undo-tree-id2249 . -2) (undo-tree-id2250 . -2) (undo-tree-id2251 . -2) (undo-tree-id2252 . -2) (undo-tree-id2253 . -2) (undo-tree-id2254 . -2) (undo-tree-id2255 . -2) (undo-tree-id2256 . -2) (undo-tree-id2257 . -2) (undo-tree-id2258 . -2) (undo-tree-id2259 . -2) (undo-tree-id2260 . -2) (undo-tree-id2261 . -2) (undo-tree-id2262 . -2) (undo-tree-id2263 . -2) (undo-tree-id2264 . -2) (undo-tree-id2265 . -2) (undo-tree-id2266 . -2) (undo-tree-id2267 . -2) (undo-tree-id2268 . -2) (undo-tree-id2269 . -2) (undo-tree-id2270 . -2) (undo-tree-id2271 . -2) (undo-tree-id2272 . -2) (undo-tree-id2273 . -2) (undo-tree-id2274 . -2) (undo-tree-id2275 . -2) (undo-tree-id2276 . -2) (undo-tree-id2277 . -2) (undo-tree-id2278 . -2) (undo-tree-id2279 . -2) (undo-tree-id2280 . -2) (undo-tree-id2281 . -2) (undo-tree-id2282 . -2) (undo-tree-id2283 . -2) (undo-tree-id2284 . -2) (undo-tree-id2285 . -2) (undo-tree-id2286 . -2) (undo-tree-id2287 . -2) (undo-tree-id2288 . -2) (undo-tree-id2289 . -2) (undo-tree-id2290 . -2) (undo-tree-id2291 . -2) (undo-tree-id2292 . -2) (undo-tree-id2293 . -2) (undo-tree-id2294 . -2) (undo-tree-id2295 . -2) (undo-tree-id2296 . -2) (undo-tree-id2297 . -2) (undo-tree-id2298 . -2) (undo-tree-id2299 . -2) (undo-tree-id2300 . -2) (undo-tree-id2301 . -2) (undo-tree-id2302 . -2) (undo-tree-id2303 . -2) (undo-tree-id2304 . -2) (undo-tree-id2305 . -2) (undo-tree-id2306 . -2) (undo-tree-id2307 . -2) (undo-tree-id2308 . -2) (undo-tree-id2309 . -2) (undo-tree-id2310 . -2) (undo-tree-id2311 . -2) 789 (787 . 789) (781 . 787) (#("      " 0 6 (fontified nil)) . 780) (undo-tree-id2312 . -6) (undo-tree-id2313 . -6) (undo-tree-id2314 . -6) (undo-tree-id2315 . -6) (undo-tree-id2316 . -6) (undo-tree-id2317 . -6) (undo-tree-id2318 . -6) (undo-tree-id2319 . -6) (undo-tree-id2320 . -6) (undo-tree-id2321 . -6) (undo-tree-id2322 . -6) (undo-tree-id2323 . -6) (undo-tree-id2324 . -6) (undo-tree-id2325 . -6) (undo-tree-id2326 . -6) (undo-tree-id2327 . -6) (undo-tree-id2328 . -6) (undo-tree-id2329 . -6) (undo-tree-id2330 . -6) (undo-tree-id2331 . -6) (undo-tree-id2332 . -6) (undo-tree-id2333 . -6) (undo-tree-id2334 . -6) (undo-tree-id2335 . -6) (undo-tree-id2336 . -6) (undo-tree-id2337 . -6) (undo-tree-id2338 . -6) (undo-tree-id2339 . -6) (undo-tree-id2340 . -6) (undo-tree-id2341 . -6) (undo-tree-id2342 . -6) (undo-tree-id2343 . -6) (undo-tree-id2344 . -6) (undo-tree-id2345 . -6) (undo-tree-id2346 . -6) (undo-tree-id2347 . -6) (undo-tree-id2348 . -6) (undo-tree-id2349 . -6) (undo-tree-id2350 . -6) (undo-tree-id2351 . -6) (undo-tree-id2352 . -6) (undo-tree-id2353 . -6) (undo-tree-id2354 . -6) (undo-tree-id2355 . -6) (undo-tree-id2356 . -6) (undo-tree-id2357 . -6) (undo-tree-id2358 . -6) (undo-tree-id2359 . -6) (undo-tree-id2360 . -6) (undo-tree-id2361 . -6) (undo-tree-id2362 . -6) (undo-tree-id2363 . -6) (undo-tree-id2364 . -6) (undo-tree-id2365 . -6) (undo-tree-id2366 . -6) (undo-tree-id2367 . -6) (undo-tree-id2368 . -6) (undo-tree-id2369 . -6) (undo-tree-id2370 . -6) (undo-tree-id2371 . -6) (undo-tree-id2372 . -6) (undo-tree-id2373 . -6) (undo-tree-id2374 . -6) (undo-tree-id2375 . -6) (undo-tree-id2376 . -6) (undo-tree-id2377 . -6) (undo-tree-id2378 . -6) (undo-tree-id2379 . -6) (undo-tree-id2380 . -6) (undo-tree-id2381 . -6) (undo-tree-id2382 . -6) (undo-tree-id2383 . -6) (undo-tree-id2384 . -6) (undo-tree-id2385 . -6) (undo-tree-id2386 . -6) (undo-tree-id2387 . -6) (undo-tree-id2388 . -6) (undo-tree-id2389 . -6) (undo-tree-id2390 . -6) (undo-tree-id2391 . -6) (undo-tree-id2392 . -6) (undo-tree-id2393 . -6) (undo-tree-id2394 . -6) (undo-tree-id2395 . -6) (undo-tree-id2396 . -6) (undo-tree-id2397 . -6) (undo-tree-id2398 . -6) (undo-tree-id2399 . -6) (undo-tree-id2400 . -6) (undo-tree-id2401 . -6) (undo-tree-id2402 . -6) (undo-tree-id2403 . -6) (undo-tree-id2404 . -6) (undo-tree-id2405 . -6) (undo-tree-id2406 . -6) (undo-tree-id2407 . -6) (779 . 787) (t 26361 7735 578508 886000)) nil (26361 7741 354126 701000) 0 nil])
([nil nil ((883 . 884) (t 26361 7741 393746 508000)) nil (26361 7815 127251 474000) 0 nil])
([nil nil ((2643 . 2644)) nil (26361 7815 127250 964000) 0 nil])
([nil nil ((2661 . 2662)) nil (26361 7815 127250 574000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2670 . 2671) (#("
" 0 1 (fontified nil rear-nonsticky t)) . -2696) (2664 . 2697) 2661) nil (26361 7815 127250 108000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2702 . 2703) (#("
" 0 1 (fontified nil rear-nonsticky t)) . -2728) (2696 . 2729) 2671) nil (26361 7815 127249 401000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2734 . 2735) (#("
" 0 1 (fontified nil rear-nonsticky t)) . -2760) (2728 . 2761) 2703) nil (26361 7815 127248 605000) 0 nil])
([nil nil ((nil fontified nil 2693 . 2694) (#("1" 0 1 (fontified nil)) . -2693) (2694 . 2695) (nil fontified t 2675 . 2676) (#("1" 0 1 (fontified t)) . -2675) (2676 . 2677)) nil (26361 7815 127247 681000) 0 nil])
([nil nil ((2707 . 2708) (#("2" 0 1 (fontified t)) . 2707) (undo-tree-id2599 . -1) (2707 . 2708) (#("1" 0 1 (fontified t)) . 2707)) nil (26361 7815 127245 815000) 0 nil])
([nil nil ((2725 . 2726) (#("1" 0 1 (fontified t)) . -2725) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) 2726) nil (26361 7815 127244 223000) 0 nil])
([nil nil ((#("      publ1->publish(message1);
" 0 5 (fontified t) 5 6 (fontified t rear-nonsticky t) 6 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-4-face) fontified t) 21 28 (fontified t) 28 29 (fontified t) 29 30 (face (rainbow-delimiters-depth-4-face) fontified t) 30 31 (fontified t) 31 32 (fontified t rear-nonsticky t)) . 2729) (undo-tree-id2533 . -31) (undo-tree-id2534 . -28) (undo-tree-id2535 . -28) (undo-tree-id2536 . -28) (undo-tree-id2537 . -28) (undo-tree-id2538 . -28) (undo-tree-id2539 . -28) (undo-tree-id2540 . -28) (undo-tree-id2541 . -28) (undo-tree-id2542 . -28) (undo-tree-id2543 . -28) (undo-tree-id2544 . -28) (undo-tree-id2545 . -28) (undo-tree-id2546 . -28) (undo-tree-id2547 . -28) (undo-tree-id2548 . -28) (undo-tree-id2549 . -28) (undo-tree-id2550 . -28) (undo-tree-id2551 . -28) (undo-tree-id2552 . -28) (undo-tree-id2553 . -28) (undo-tree-id2554 . -28) (undo-tree-id2555 . -28) (undo-tree-id2556 . -28) (undo-tree-id2557 . -28) (undo-tree-id2558 . -28) (undo-tree-id2559 . -28) (undo-tree-id2560 . -28) (undo-tree-id2561 . -28) (undo-tree-id2562 . -28) (undo-tree-id2563 . -28) (undo-tree-id2564 . -28) (undo-tree-id2565 . -28) (undo-tree-id2566 . -28) (undo-tree-id2567 . -28) (undo-tree-id2568 . -28) (undo-tree-id2569 . -28) (undo-tree-id2570 . -28) (undo-tree-id2571 . -28) (undo-tree-id2572 . -28) (undo-tree-id2573 . -28) (undo-tree-id2574 . -28) (undo-tree-id2575 . -28) (undo-tree-id2576 . -28) (undo-tree-id2577 . -28) (undo-tree-id2578 . -28) (undo-tree-id2579 . -28) (undo-tree-id2580 . -28) (undo-tree-id2581 . -28) (undo-tree-id2582 . -28) (undo-tree-id2583 . -28) (undo-tree-id2584 . -28) (undo-tree-id2585 . -28) (undo-tree-id2586 . -28) (undo-tree-id2587 . -28) (undo-tree-id2588 . -28) (undo-tree-id2589 . -32) 2757) nil (26361 7815 127235 661000) 0 nil])
([nil nil ((2754 . 2761) (#("b" 0 1 (fontified nil)) . 2754) (2754 . 2755) (#("boolmsg" 0 7 (fontified nil)) . -2754) (undo-tree-id2408 . -7) (2754 . 2761) (#("b" 0 1 (fontified t)) . -2754) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) 2755 (2754 . 2755) (2753 . 2755) (2748 . 2753) (2746 . 2748) (2745 . 2746) (2744 . 2745) (#(" " 0 1 (fontified t)) . -2744) (undo-tree-id2528 . -1) 2745 (2744 . 2745) (2736 . 2744) (#("bo" 0 2 (fontified nil)) . 2736) (2736 . 2738) (#("boolpubl" 0 8 (fontified nil)) . -2736) (undo-tree-id2529 . -8) (2736 . 2744) (#("boo" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -2736) (undo-tree-id2530 . -3) (undo-tree-id2531 . -3) 2739 (2736 . 2739) (2730 . 2736) (#("      " 0 6 (fontified nil)) . 2729) (undo-tree-id2532 . -6) (2728 . 2736)) nil (26361 7815 126880 584000) 0 nil])
([nil nil ((2762 . 2763)) nil (26361 7815 126793 599000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t c-in-sws t)) . -382) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) 383 (t 26361 7815 167589 22000)) nil (26361 7830 12556 834000) 0 nil])
([nil nil ((apply -6 733 897 undo--wrap-and-run-primitive-undo 733 897 ((789 . 792) (739 . 742) 733))) nil (26361 7833 815696 423000) 0 nil])
([nil nil ((apply 3 733 780 undo--wrap-and-run-primitive-undo 733 780 ((#("// " 0 1 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 1 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -739) 733))) nil (26361 8157 895087 316000) 0 nil])
([nil nil ((#("rclcpp::QoS();" 0 6 (face font-lock-constant-face fontified t) 6 8 (fontified t) 8 11 (fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (face (rainbow-delimiters-depth-4-face) fontified t) 13 14 (fontified t)) . 764) (undo-tree-id2636 . -12) (undo-tree-id2637 . -7)) nil (26361 8157 895086 758000) 0 nil])
([nil nil ((775 . 777) (#(":" 0 1 (fontified t)) . -775) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) (#(":" 0 1 (fontified t)) . -776) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) (#("n" 0 1 (fontified t)) . -777) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (#("e" 0 1 (fontified t)) . -778) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (#("w" 0 1 (face font-lock-keyword-face fontified t)) . -779) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) 780 (777 . 780) (775 . 777) (772 . 775) (#("Q" 0 1 (fontified nil)) . 772) (772 . 773) (#("QoS" 0 3 (fontified nil)) . -772) (undo-tree-id2629 . -3) (772 . 775) (#("Q" 0 1 (fontified t)) . -772) (undo-tree-id2630 . -1) (undo-tree-id2631 . -1) 773 (772 . 773) (770 . 772) (#(":" 0 1 (fontified t)) . -770) (undo-tree-id2632 . -1) 771 (770 . 771) (764 . 770) (#("rcl" 0 3 (fontified nil)) . 764) (764 . 767) (#("rclcpp" 0 6 (fontified nil)) . -764) (undo-tree-id2633 . -6) (764 . 770) (#("rcl" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -764) (undo-tree-id2634 . -3) (undo-tree-id2635 . -3) 767 (764 . 767)) nil (26361 8157 895083 627000) 0 nil])
([nil nil ((777 . 778)) nil (26361 8157 895059 729000) 0 nil])
([nil nil ((776 . 778) (#("0" 0 1 (fontified t)) . -776) (undo-tree-id2638 . -1) 777 (776 . 777) (t 26361 8157 935572 6000)) nil (26361 8198 768647 414000) 0 nil])
([nil nil ((811 . 812) (apply yas--snippet-revive 798 811 #s(yas--snippet nil nil nil 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 12 nil nil nil nil)) (798 . 811) (#("best_effort()" 0 13 (fontified nil)) . 798) (798 . 811) (#("best_effort()" 0 13 (fontified nil)) . -798) (undo-tree-id2639 . -13) (798 . 811) (#("be" 0 1 (fontified t) 1 2 (fontified t)) . -798) (undo-tree-id2640 . -2) (undo-tree-id2641 . -2) 800 (797 . 800) (787 . 797) (#("cu" 0 2 (fontified nil)) . 787) (787 . 789) (#("currentqol" 0 10 (fontified nil)) . -787) (undo-tree-id2642 . -10) (787 . 797) (#("cu" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -787) (undo-tree-id2643 . -2) (undo-tree-id2644 . -2) 789 (787 . 789) (780 . 787) (t 26361 8198 782499 217000)) nil (26361 8239 484080 68000) 0 nil])
([nil nil ((#("10" 0 2 (fontified t)) . 923) (undo-tree-id2949 . -1) (t 26361 8239 524382 404000)) nil (26361 8291 493651 723000) 0 nil])
([nil nil ((#("10" 0 2 (fontified t)) . 999) (undo-tree-id2948 . -1)) nil (26361 8291 493651 19000) 0 nil])
([nil nil ((#("10" 0 2 (fontified t)) . 1075) (undo-tree-id2947 . -1)) nil (26361 8291 493650 453000) 0 nil])
([nil nil ((#("10" 0 1 (fontified t) 1 2 (fontified t)) . 1156) (undo-tree-id2946 . -1)) nil (26361 8291 493649 750000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -924) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (#("u" 0 1 (fontified t)) . -925) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) 926 (924 . 926)) nil (26361 8291 493648 977000) 0 nil])
([nil nil ((923 . 933) (#("cu" 0 2 (fontified nil)) . 923) (923 . 925) (#("currentqol" 0 10 (fontified nil)) . -923) (undo-tree-id2939 . -10) (923 . 933) (#("cu" 0 1 (fontified t) 1 2 (fontified t)) . -923) (undo-tree-id2940 . -2) (undo-tree-id2941 . -2) 925 (923 . 925)) nil (26361 8291 493647 146000) 0 nil])
([nil nil ((1009 . 1019) (#("cu" 0 2 (fontified nil)) . 1009) (1009 . 1011) (#("currentqol" 0 10 (fontified nil)) . -1009) (undo-tree-id2936 . -10) (1009 . 1019) (#("cu" 0 1 (fontified t) 1 2 (fontified t)) . -1009) (undo-tree-id2937 . -2) (undo-tree-id2938 . -2) 1011 (1009 . 1011)) nil (26361 8291 493645 15000) 0 nil])
([nil nil ((1095 . 1105) (#("cu" 0 2 (fontified nil)) . 1095) (1095 . 1097) (#("currentqol" 0 10 (fontified nil)) . -1095) (undo-tree-id2693 . -10) (1095 . 1105) (#("cu" 0 1 (fontified t) 1 2 (fontified t)) . -1095) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) (undo-tree-id2735 . -1) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -2) (undo-tree-id2753 . -2) (undo-tree-id2754 . -2) (undo-tree-id2755 . -2) (undo-tree-id2756 . -2) (undo-tree-id2757 . -2) (undo-tree-id2758 . -2) (undo-tree-id2759 . -2) (undo-tree-id2760 . -2) (undo-tree-id2761 . -2) (undo-tree-id2762 . -2) (undo-tree-id2763 . -2) (undo-tree-id2764 . -2) (undo-tree-id2765 . -2) (undo-tree-id2766 . -2) (undo-tree-id2767 . -2) (undo-tree-id2768 . -2) (undo-tree-id2769 . -2) (undo-tree-id2770 . -2) (undo-tree-id2771 . -2) (undo-tree-id2772 . -2) (undo-tree-id2773 . -2) (undo-tree-id2774 . -2) (undo-tree-id2775 . -2) (undo-tree-id2776 . -2) (undo-tree-id2777 . -2) (undo-tree-id2778 . -2) (undo-tree-id2779 . -2) (undo-tree-id2780 . -2) (undo-tree-id2781 . -2) (undo-tree-id2782 . -2) (undo-tree-id2783 . -2) (undo-tree-id2784 . -2) (undo-tree-id2785 . -2) (undo-tree-id2786 . -2) (undo-tree-id2787 . -2) (undo-tree-id2788 . -2) (undo-tree-id2789 . -2) (undo-tree-id2790 . -2) (undo-tree-id2791 . -2) (undo-tree-id2792 . -2) (undo-tree-id2793 . -2) (undo-tree-id2794 . -2) (undo-tree-id2795 . -2) (undo-tree-id2796 . -2) (undo-tree-id2797 . -2) (undo-tree-id2798 . -2) (undo-tree-id2799 . -2) (undo-tree-id2800 . -2) (undo-tree-id2801 . -2) (undo-tree-id2802 . -2) (undo-tree-id2803 . -2) (undo-tree-id2804 . -2) (undo-tree-id2805 . -2) (undo-tree-id2806 . -2) (undo-tree-id2807 . -2) (undo-tree-id2808 . -2) (undo-tree-id2809 . -2) (undo-tree-id2810 . -2) (undo-tree-id2811 . -2) (undo-tree-id2812 . -2) (undo-tree-id2813 . -2) (undo-tree-id2814 . -2) (undo-tree-id2815 . -2) (undo-tree-id2816 . -2) (undo-tree-id2817 . -2) (undo-tree-id2818 . -2) (undo-tree-id2819 . -2) (undo-tree-id2820 . -2) (undo-tree-id2821 . -2) (undo-tree-id2822 . -2) (undo-tree-id2823 . -2) (undo-tree-id2824 . -2) (undo-tree-id2825 . -2) (undo-tree-id2826 . -2) (undo-tree-id2827 . -2) (undo-tree-id2828 . -2) (undo-tree-id2829 . -2) (undo-tree-id2830 . -2) (undo-tree-id2831 . -2) (undo-tree-id2832 . -2) (undo-tree-id2833 . -2) (undo-tree-id2834 . -2) (undo-tree-id2835 . -2) (undo-tree-id2836 . -2) (undo-tree-id2837 . -2) (undo-tree-id2838 . -2) (undo-tree-id2839 . -2) (undo-tree-id2840 . -2) (undo-tree-id2841 . -2) (undo-tree-id2842 . -2) (undo-tree-id2843 . -2) (undo-tree-id2844 . -2) (undo-tree-id2845 . -2) (undo-tree-id2846 . -2) (undo-tree-id2847 . -2) (undo-tree-id2848 . -2) (undo-tree-id2849 . -2) (undo-tree-id2850 . -2) (undo-tree-id2851 . -2) (undo-tree-id2852 . -2) (undo-tree-id2853 . -2) (undo-tree-id2854 . -2) (undo-tree-id2855 . -2) (undo-tree-id2856 . -2) (undo-tree-id2857 . -2) (undo-tree-id2858 . -2) (undo-tree-id2859 . -2) (undo-tree-id2860 . -2) (undo-tree-id2861 . -2) (undo-tree-id2862 . -2) (undo-tree-id2863 . -2) (undo-tree-id2864 . -2) (undo-tree-id2865 . -2) (undo-tree-id2866 . -2) (undo-tree-id2867 . -2) (undo-tree-id2868 . -2) (undo-tree-id2869 . -2) (undo-tree-id2870 . -2) (undo-tree-id2871 . -2) (undo-tree-id2872 . -2) (undo-tree-id2873 . -2) (undo-tree-id2874 . -2) (undo-tree-id2875 . -2) (undo-tree-id2876 . -2) (undo-tree-id2877 . -2) (undo-tree-id2878 . -2) (undo-tree-id2879 . -2) (undo-tree-id2880 . -2) (undo-tree-id2881 . -2) (undo-tree-id2882 . -2) (undo-tree-id2883 . -2) (undo-tree-id2884 . -2) (undo-tree-id2885 . -2) (undo-tree-id2886 . -2) (undo-tree-id2887 . -2) (undo-tree-id2888 . -2) (undo-tree-id2889 . -2) (undo-tree-id2890 . -2) (undo-tree-id2891 . -2) (undo-tree-id2892 . -2) (undo-tree-id2893 . -2) (undo-tree-id2894 . -2) (undo-tree-id2895 . -2) (undo-tree-id2896 . -2) (undo-tree-id2897 . -2) (undo-tree-id2898 . -2) (undo-tree-id2899 . -2) (undo-tree-id2900 . -2) (undo-tree-id2901 . -2) (undo-tree-id2902 . -2) (undo-tree-id2903 . -2) (undo-tree-id2904 . -2) (undo-tree-id2905 . -2) (undo-tree-id2906 . -2) (undo-tree-id2907 . -2) (undo-tree-id2908 . -2) (undo-tree-id2909 . -2) (undo-tree-id2910 . -2) (undo-tree-id2911 . -2) (undo-tree-id2912 . -2) (undo-tree-id2913 . -2) (undo-tree-id2914 . -2) (undo-tree-id2915 . -2) (undo-tree-id2916 . -2) (undo-tree-id2917 . -2) (undo-tree-id2918 . -2) (undo-tree-id2919 . -2) (undo-tree-id2920 . -2) (undo-tree-id2921 . -2) (undo-tree-id2922 . -2) (undo-tree-id2923 . -2) (undo-tree-id2924 . -2) (undo-tree-id2925 . -2) (undo-tree-id2926 . -2) (undo-tree-id2927 . -2) (undo-tree-id2928 . -2) (undo-tree-id2929 . -2) (undo-tree-id2930 . -2) (undo-tree-id2931 . -2) (undo-tree-id2932 . -2) (undo-tree-id2933 . -2) (undo-tree-id2934 . -2) (undo-tree-id2935 . -2) 1097 (1095 . 1097)) nil (26361 8291 493639 59000) 0 nil])
([nil current ((1186 . 1196) (#("cu" 0 2 (fontified nil)) . 1186) (1186 . 1188) (#("currentqol" 0 10 (fontified nil)) . -1186) (undo-tree-id2645 . -10) (1186 . 1196) (#("cu" 0 1 (fontified t) 1 2 (fontified t)) . -1186) (undo-tree-id2646 . -2) (undo-tree-id2647 . -2) (undo-tree-id2648 . -2) (undo-tree-id2649 . -2) (undo-tree-id2650 . -2) (undo-tree-id2651 . -2) (undo-tree-id2652 . -2) (undo-tree-id2653 . -2) (undo-tree-id2654 . -2) (undo-tree-id2655 . -2) (undo-tree-id2656 . -2) (undo-tree-id2657 . -2) (undo-tree-id2658 . -2) (undo-tree-id2659 . -2) (undo-tree-id2660 . -2) (undo-tree-id2661 . -2) (undo-tree-id2662 . -2) (undo-tree-id2663 . -2) (undo-tree-id2664 . -2) (undo-tree-id2665 . -2) (undo-tree-id2666 . -2) (undo-tree-id2667 . -2) (undo-tree-id2668 . -2) (undo-tree-id2669 . -2) (undo-tree-id2670 . -2) (undo-tree-id2671 . -2) (undo-tree-id2672 . -2) (undo-tree-id2673 . -2) (undo-tree-id2674 . -2) (undo-tree-id2675 . -2) (undo-tree-id2676 . -2) (undo-tree-id2677 . -2) (undo-tree-id2678 . -2) (undo-tree-id2679 . -2) (undo-tree-id2680 . -2) (undo-tree-id2681 . -2) (undo-tree-id2682 . -2) (undo-tree-id2683 . -2) (undo-tree-id2684 . -2) (undo-tree-id2685 . -2) (undo-tree-id2686 . -2) (undo-tree-id2687 . -2) (undo-tree-id2688 . -2) (undo-tree-id2689 . -2) (undo-tree-id2690 . -2) (undo-tree-id2691 . -2) (undo-tree-id2692 . -2) 1188 (1186 . 1188)) nil (26361 8291 493505 640000) 0 nil])
nil
